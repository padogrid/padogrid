# -*- mode: ruby -*-
# vi: set ft=ruby :

BOX_IMAGE = "${POD_BOX_IMAGE}"

AVAHI_ENABLED = ${POD_AVAHI_ENABLED}

# The primary node name
NODE_NAME_PRIMARY = "${NODE_NAME_PRIMARY}"

# Number of nodes not including the base node
NODE_COUNT = ${NODE_COUNT}

# Base private IP address. The node IP addresses are incremented
# from this base address.
BASE_PRIVATE_IP = "${BASE_PRIVATE_IP}"

Vagrant.configure("2") do |config|
  config.ssh.username = "vagrant";
  config.ssh.insert_key = true;

  config.vm.define "${NODE_NAME_PRIMARY}", primary: true do |primary|
    primary.vm.box = BOX_IMAGE
    if Vagrant.has_plugin?("vagrant-vbguest") then
      primary.vbguest.auto_update = false
    end
    primary.vm.hostname = NODE_NAME_PRIMARY
    primary.vm.network :private_network, ip: BASE_PRIVATE_IP
    primary.vm.provider "virtualbox" do |vb|
       vb.name = "${POD}.${NODE_NAME_PRIMARY}"
       vb.memory = "${NODE_PRIMARY_MEMORY_SIZE}"
    end
  end
  
  # Configure nodes
  (1..NODE_COUNT).each do |i|
    config.vm.define "${NODE_NAME_PREFIX}-0#{i}" do |subconfig|
      subconfig.vm.box = BOX_IMAGE
      if Vagrant.has_plugin?("vagrant-vbguest") then
         subconfig.vbguest.auto_update = false
      end
      subconfig.vm.hostname = "${NODE_NAME_PREFIX}-0#{i}"
      subconfig.vm.network :private_network, ip: "${BASE_PRIVATE_IP_FIRST_THREE_OCTETS}.#{i + ${BASE_PRIVATE_IP_LAST_OCTET}}"
      subconfig.vm.provider "virtualbox" do |vb|
         vb.name = "${POD}.${NODE_NAME_PREFIX}-0#{i}"
         vb.memory = "${NODE_MEMORY_SIZE}"
      end
    end
  end

  # bootstrap.sh sets all the necessary environment variables.
  config.vm.provision :shell, inline: "echo 'source /vagrant/bootstrap.sh' > /etc/profile.d/sa-environment.sh", :run => 'always'

  # sync folders: <host-dir> to <guest-dir>
  config.vm.synced_folder ".", "/vagrant", owner: "vagrant", group: "vagrant"
  config.vm.synced_folder "${PADOGRID_WORKSPACES_HOME}", "/home/vagrant/Padogrid/workspaces/${PADOGRID_WORKSPACES_HOME_NAME}", owner: "vagrant", group: "vagrant", owner: "vagrant", group: "vagrant"
  config.vm.synced_folder "${HOST_PRODUCTS_DIR}", "/home/vagrant/Padogrid/products", owner: "vagrant", group: "vagrant"

  # Provision Avahi if enabled
  if AVAHI_ENABLED
    config.vm.provision "shell", inline: <<-SHELL
      OS_ID="$(cat /etc/*-release | grep ^ID=)"
      if [[ "$OS_ID" == *"centos"* ]]; then
        # avahi is installed using snap, which is availble from the EPEL (Extra Packages for Enterprise Linux) repo
        sudo yum install -y epel-release
        sudo yum install -y snapd
        sudo systemctl enable --now snapd.socket
        sudo ln -s /var/lib/snapd/snap /snap
        # avahi for local mDNS
        while [[ "$(sudo snap install avahi 2>&1)" == *"error"* ]]; do
          echo "Installing avahi..."
          continue;
        done
        sudo snap install avahi
      elif [[ "$OS_ID" == *"alpine"* ]]; then
        sudo apk update
        sudo apk add dbus avahi
        sudo rc-service avahi-daemon start
        sudo rc-update add avahi-daemon
      else
        apt-get update
        # avahi for local mDNS
        apt-get install -y avahi-daemon libnss-mdns
      fi
    SHELL
  end

  # Provision required software
  config.vm.provision "shell", inline: <<-SHELL
    # Touch .Xauthority
    touch /home/vagrant/.Xauthority
    chmod 600 /home/vagrant/.Xauthority
    chown vagrant:vagrant /home/vagrant/.Xauthority

    # Install curl
    OS_ID="$(cat /etc/*-release | grep ^ID=)"
    if [[ "$OS_ID" == *"centos"* ]]; then
      # Stop firewall
      sudo service firewalld stop
    elif [[ "$OS_ID" == *"alpine"* ]]; then
      sudo apk update
      sudo apk add curl
    else
      apt-get update
      # For grafana API calls
      apt-get install -y curl
    fi

    # Configure password-less ssh
    mkdir -p /home/vagrant/.ssh
    chmod 700 /home/vagrant/.ssh
    chown -R vagrant:vagrant /home/vagrant/.ssh
    su vagrant -c "ssh-keygen -t rsa -P '' -f /home/vagrant/.ssh/id_rsa"
    if [ ! -d /vagrant/tmp/ssh ]; then
      mkdir -p /vagrant/tmp/ssh
    fi

    # Copy the public key to the host OS to build authorized_keys during the post configuration time.
    cp /home/vagrant/.ssh/id_rsa.pub /vagrant/tmp/ssh/`hostname`.pub
  SHELL
end

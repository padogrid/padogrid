#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020-2023 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

DEFAULT_FOLDER="Hazelcast"
DEFAULT_CLUSTER="hazelcast"

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   ./$EXECUTABLE - Update the Cluster variable in dashaboards

SYNOPSIS
   ./$EXECUTABLE [-folder folder_name] [-label prometheus_label] [-clusters cluster_list] [-type single|dual|all] [-?]

DESCRIPTION
   Updates the ClusterFilterLabel and Cluster variables to all dashboards in the specified
   folder .The ClusterFilterLabel variable defines the label used to filter Hazelcast clusters
   and the Cluster variable holds a list of cluster names that each dashboard monitors.
   Their default value are as follows.

      CluterFilterLabel: $DEFAULT_LABEL
      Cluster: $DEFAULT_CLUSTER

   The '$DEFAULT_LABEL' label is associated with the 'job_name' parameter in the following
   Prometheus configuration file.
   
      ../etc/prometheus.yml

   Note that the default value of 'job_name' and the '-clusters' option is '$DEFAULT_CLUSTER'.

   You can substitute the default '$DEFAULT_LABEL' label with any label that the underlying
   Prometheus server supports. For example, in Kubernetes, you may want to substitute
   it with 'namespace' (or 'service) since a Hazelcast cluster is deployed per Kubernetes
   namespace.

   This command supports three (3) types of folders identified by how the dashboards
   display Hazelcast clusters as follows.

      - single: Folders with dashboards diplaying metrics specific to a single cluster
                at a time. These folders require the '-type single' option. If '-type'
                is not specified, then it defaults to this option.

      - dual:   Folders with dashboards displaying metrics from two clusters, e.g., the
                'HazelcastDual' folder. These folders require the '-type dual' option.

      - all:    Folders with dashboards displaying metrics from all clusters, e.g.,
                the 'HazelcastAll' folder. These folders require the '-type all' option.

   See the EXAMPLES section for adding multiple clusters to Grafana dashboards.

OPTIONS
   -folder folder_name
             Folder name. Default: $DEFAULT_FOLDER

   -label prometheus_label
             The name of the Prometheus label to apply the cluster list filter. This
             label is typically introduced by Prometheus. For example, you can assign a
             list of target endpoints under the '$DEFAULT_LABEL' label as shown in the EXAMPLES
             section below. For Kubernetes, the 'namespace' label may be more approriate
             since all the members of a Hazelcast cluster start in the same namespace.
             Default: $DEFAULT_LABEL

   -clusters cluster_list
             A comma-separated list of cluster names. If Prometheus is locally launched, then
             the cluster names must match the 'job_name' values in the Prometheus configuration
             file.

   -type single|dual|all
             If 'dual', then it adds two (2) cluster pulldown menus in the toolbar.  This
             option should be used only if the dashboards require dual clusters.

            If 'all', then it does not add cluster pulldown menus in the toolbar. This
            option should be used if the dashboards require all clusters. It supplies the
            Grafana variable, \$ClusterList, set to a list of all clusters separated by
            '|' (reg OR) for filtering clusters.
DEFAULT
   ./$EXECUTABLE -folder $DEFAULT_FOLDER -label $DEFAULT_LABEL -clusters $DEFAULT_CLUSTER

EXAMPLES

   Example 1: Configuring Prometheus

      The following example configures Prometheus with two (2) Hazelcast clusters: 'myhz'
      and 'myhz2'.

         global:
           scrape_interval:     5s
           external_labels:
             monitor: 'hazelcast'

         scrape_configs:
           - job_name: 'myhz'
             static_configs:
               - targets: [localhost:8291, localhost:8292, localhost:8293, localhost:8294, localhost:8295, localhost:8296, localhost:8297, localhost:8298, localhost:8299]
           - job_name: 'myhz2'
             static_configs:
                 - targets: [localhost:8391, localhost:8392, localhost:8393, localhost:8394, localhost:8395, localhost:8396, localhost:8397, localhost:8398, localhost:8399]

      To include 'myhz' and 'myhz2' in Grafana dashboards, execute this command as follows.

         ./$EXECUTABLE -clusters "myhz,myhz2"

      The above command updates the JSON files in the following directory.

         $DASHBOARDS_DIR/$DEFAULT_FOLDER

      You can now update the entire $DEFAULT_FOLDER folder in Granana by deleting and importing
      it as follows.

         ./delete_folder -folder $DEFAULT_FOLDER
         ./import_folder -folder $DEFAULT_FOLDER

   Example 2: Kubernetes
      
      In Kubernetes, the default '$DEFAULT_LABEL' label may not be enough to filter clusters if there
      more than one cluster since all the clusters are scraped under the same '$DEFAULT_LABEL' label.
      To address this issue, Prometheus includes the 'namespace' and 'service' labels which
      we can use to filter the clusters. For example, we can use the '-label' option to
      specifgy the 'namespace' label as follows.

      ./$EXECUTABLE -label namespace -clusters "namespace1,namespace2"

   Example 3: Dual Clusters

      Dual cluster dashboards are useful for comparing metrics between two clusters. For example,
      the 'HazelcastDual' folder contains dashboards that display a series of paired panels for
      monitoring two clusters in a single view. To import 'HazelcastDual' individually, you would
      execute the following command.

      ./$EXECUTABLE -label namespace -clusters "namespace1,namespace2" -folder HazelcastDual -type dual

   Example 4: All Clusters

      If your dashboards require all metrics from all clusters, then you can use the option '-all'.
      The 'HazelcastAll' folder contains dashboards that use the \$ClusterList variable in
      regex to filter metrics. \$ClusterList is a list of clusters separated by '|' (regex OR).
      The following imports the 'HazelcastAll' folder.

      ./$EXECUTABLE -label namespace -clusters "namespace1,namespace2" -folder HazelcastAll -type all

SEE ALSO
   ../etc/prometheus.yml

EOF
exit
fi

if [ "$TYPE_ARG" == "" ]; then
   TYPE_ARG="single"
fi
if [ "$TYPE_ARG" != "single" ] && [ "$TYPE_ARG" != "dual" ] && [ "$TYPE_ARG" != "all" ]; then
   echo -e >&2 "${CError}ERROR:${CNone} Invalid type [$TYPE_ARG]. Must be 'single', 'dual', or 'all'. Command aborted."
   exit 1
fi

if [ "$FOLDER" == "" ]; then
   FOLDER="$DEFAULT_FOLDER"
fi

if [ "$CLUSTERS_ARG" == "" ]; then
   CLUSTERS="$DEFAULT_CLUSTER"
else
   CLUSTERS="$CLUSTERS_ARG"
fi

#
# $Cluster, $Cluster2
#
query="$CLUSTERS"
CLUSTERS=$(echo $CLUSTERS | sed 's/,/ /g')
current=$DEFAULT_CLUSTER
options="\"options\": ["
INDEX=0
for CLUSTER in $CLUSTERS; do
   if [ $INDEX -eq 0 ]; then
      current="$CLUSTER"
      options="$options {\"selected\": true, \"text\": \"$CLUSTER\", \"value\": \"$CLUSTER\"}"
      query="$CLUSTER"
   else
      options="$options, {\"selected\": false, \"text\": \"$CLUSTER\", \"value\": \"$CLUSTER\"}"
      query="$query,$CLUSTER"
   fi
   # cluster2 constant value for going from non-dual to dual dashboards
   cluster2=$CLUSTER
   let INDEX=INDEX+1
done
options="$options ]"
CLUSTER_OPTIONS="
[
{
   \"current\": {
   \"selected\": true,
   \"text\": \"$current\",
   \"value\": \"$current\"
 },
 \"hide\": 0,
 \"includeAll\": false,
 \"multi\": false,
 \"name\": \"Cluster\",
 $options,
 \"query\": \"$query\",
 \"queryValue\": \"\",
 \"skipUrlSync\": false,
 \"type\": \"custom\",
 \"datasource\": \"\${DATASOURCE}\"
}]
"
CLUSTER2_OPTIONS="
[
{
   \"current\": {
   \"selected\": true,
   \"text\": \"$current\",
   \"value\": \"$current\"
 },
 \"hide\": 0,
 \"includeAll\": false,
 \"multi\": false,
 \"name\": \"Cluster2\",
 \"label\": \"Cluster 2\",
 $options,
 \"query\": \"$query\",
 \"queryValue\": \"\",
 \"skipUrlSync\": false,
 \"type\": \"custom\",
 \"datasource\": \"\${DATASOURCE}\"
}]
"

#
# $Cluster - constant for "all" dashboards. This value required by both non-dual and dual dashboards.
#
CLUSTER_CONSTANT_OPTIONS="
[
{
 \"hide\": 2,
 \"name\": \"Cluster\",
 \"query\": \"$current\",
 \"skipUrlSync\": false,
 \"type\": \"constant\",
 \"datasource\": \"\${DATASOURCE}\"
}
]
"

#
# $Cluster2 - constant for non-dual dashboards. This value required by dual dashboards.
#
CLUSTER2_CONSTANT_OPTIONS="
[
{
 \"hide\": 2,
 \"name\": \"Cluster2\",
 \"query\": \"$cluster2\",
 \"skipUrlSync\": false,
 \"type\": \"constant\",
 \"datasource\": \"\${DATASOURCE}\"
}
]
"

#
# $ClusterFilterLabel
#
if [ "$LABEL_ARG" == "" ]; then
   cluster_filter_label="$DEFAULT_LABEL"
else
   cluster_filter_label=$LABEL_ARG
fi
CLUSTER_FILTER_LABEL_OPTIONS="
[
{
 \"hide\": 2,
 \"name\": \"ClusterFilterLabel\",
 \"query\": \"$cluster_filter_label\",
 \"skipUrlSync\": false,
 \"type\": \"constant\",
 \"datasource\": \"\${DATASOURCE}\"
}
]
"

#
# $ClusterList
#
cluster_list=$(echo $CLUSTERS_ARG | sed -e "s/,/|/g" -e "s/ //g")
CLUSTER_LIST_OPTIONS="
[
{
 \"hide\": 2,
 \"name\": \"ClusterList\",
 \"query\": \"$cluster_list\",
 \"skipUrlSync\": false,
 \"type\": \"constant\",
 \"datasource\": \"\${DATASOURCE}\"
}
]
"

#
# Update templates
#
if [ -d "$TMP_DIR/$FOLDER" ]; then
   rm -r "$TMP_DIR/$FOLDER"
fi
mkdir "$TMP_DIR/$FOLDER"
FOLDER_PATH="$DASHBOARDS_DIR/$FOLDER"

case "$TYPE_ARG" in
single)
   CLUSTER2_OPTIONS=$CLUSTER2_CONSTANT_OPTIONS
   ;;
all)
   CLUSTER_OPTIONS=$CLUSTER_CONSTANT_OPTIONS
   CLUSTER2_OPTIONS=$CLUSTER2_CONSTANT_OPTIONS
   ;;
dual)
   ;;
esac

pushd "$FOLDER_PATH" > /dev/null 2>&1


for file in *; do
   cat "$file" | jq "del(.dashboard.templating.list[]|select(.name==\"Cluster\"))
               | del(.dashboard.templating.list[]|select(.name==\"Cluster2\"))
               | .dashboard.templating.list |= $CLUSTER2_OPTIONS + .
               | .dashboard.templating.list |= $CLUSTER_OPTIONS + .
               | del(.dashboard.templating.list[]|select(.name==\"ClusterFilterLabel\"))
               | del(.dashboard.templating.list[]|select(.name==\"ClusterList\"))
               | .dashboard.templating.list |= $CLUSTER_FILTER_LABEL_OPTIONS + .
               | .dashboard.templating.list |= $CLUSTER_LIST_OPTIONS + .
               " > "$TMP_DIR/$FOLDER/${file}"
done
popd > /dev/null 2>&1

cp -r $TMP_DIR/$FOLDER/* "$FOLDER_PATH/"

echo ""
echo "Dashboards updated in the following directory:"
echo "   $FOLDER_PATH"
echo ""

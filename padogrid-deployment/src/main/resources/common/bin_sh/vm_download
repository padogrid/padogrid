#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020-2024 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $PADOGRID_HOME/$PRODUCT/bin_sh/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-cluster -vm -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

#
# Determine $TAR_BALL_PATH
#
ROOT_DIR_NAME=$(basename $BASE_DIR)
TOP_DIR="$(dirname "$BASE_DIR")"
TAR_BALL_GZ_NAME=$ROOT_DIR_NAME.tar.gz
TAR_BALL_GZ_PATH=$BASE_DIR/bundles/$TAR_BALL_GZ_NAME

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Download all the log and relevant files from the VMs to the local file system

SYNOPSIS
   $EXECUTABLE [-cluster cluster_name] [-vm comma_separated_hosts] [-?]

DESCRIPTION
   Downloads the log and relevant files from the VMs to the local cluster's
   'log' and relevant  directories.

   If the '-vm' option is not specified, then it downloads the log files from the hosts defined
   by the 'vm.hosts' and 'vm.*.hosts' properties in the 'etc/cluster.properties' file.

OPTIONS
   -cluster cluster_name
             Cluster name.

   -vm comma_separated_hosts
             A comma separated list of VM hosts or addresses. If the list contains spaces
             then enclosed it in quotes.

EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
DEFAULT
   $EXECUTABLE -cluster $CLUSTER

FILES
   $PADOGRID_WORKSPACE/setenv.sh
             The current workspace configuration file.

   $LOG_DIR
             The current cluster log directory.

EOF
case $CLUSTER_TYPE in
geode|gemfire)
   echo "   $STATS_DIR"
   echo "             The current cluster stats directory.";;
esac
fi
cat <<EOF

SEE ALSO
EOF
   printSeeAlsoList "vm_*" $EXECUTABLE
   exit
fi

if [ "$VM_ENABLED" != "true" ]; then
   echo "----------------------------------------------------------------"
   echo "WORKSPACE: $PADOGRID_WORKSPACE"
   echo "    ERROR: The workspace is not a VM workspace. Command aborted."
   echo "----------------------------------------------------------------"
   exit 1 
fi

# Make sure the cluster is VM enabled
VM_ENABLED=`getClusterProperty "vm.enabled" "false"`
if [ "$VM_ENABLED" == "false" ]; then
   echo >&2 "ERROR: Not a VM cluster [$CLUSTER]. To enable VMs, set the 'vm.enabled' property"
   echo >&2 "       in the 'etc/cluster.properties' file."
   exit 1
fi

# 
# VM cluster
#
if [ "$VM_HOSTS_ARG" != "" ] && [[ "$VM_HOSTS_ARG" != *"-"* ]]; then
   VM_HOSTS=$VM_HOSTS_ARG
else
   VM_HOSTS=$(getAllMergedVmHosts)
fi
if [ "$VM_HOSTS" == "" ]; then
   echo "----------------------------------------------------------------"
   echo "WORKSPACE: $PADOGRID_WORKSPACE"
   if [ "$VM_HOSTS" == "" ]; then
      echo >&2 "    ERROR: You must specify the '-vm' option or set the 'vm.hosts' property"
      echo >&2 "           in the 'etc/cluster.properties' file. Command aborted."
      exit 1
   fi
   echo "----------------------------------------------------------------"
fi

VM_USER=`getVmUser`
KEY_FILE=`getClusterProperty "vm.privateKeyFile"`
if [ "$KEY_FILE" == "" ]; then
   # Set the first private key file found in the workspace directory if exists
   __VM_PRIVATE_KEY_FILE_FOUND="false"
   if [ "$VM_PRIVATE_KEY_FILE" == "" ]; then
      if [ -f $PADOGRID_WORKSPACE/*.pem ]; then
         for i in $PADOGRID_WORKSPACE/*.pem; do
            VM_PRIVATE_KEY_FILE=$i
            __VM_PRIVATE_KEY_FILE_FOUND="true"
            break
         done
      elif [ -f $PADOGRID_WORKSPACE/*.key ]; then
         for i in $PADOGRID_WORKSPACE/*.key; do
            VM_PRIVATE_KEY_FILE=$i
            __VM_PRIVATE_KEY_FILE_FOUND="true"
            break
         done
      fi
   fi
   # Replace '~' with the VM home path
   KEY_FILE=$(echo $VM_PRIVATE_KEY_FILE | sed "s|\~|$HOME|")
fi
if [ "$KEY_FILE" == "" ]; then 
   KEY_FILE="$VM_PRIVATE_KEY_FILE"
fi
VM_KEY=""
if [ "$KEY_FILE" != "" ]; then 
   if [ ! -f "$KEY_FILE" ]; then
      echo -e >&2 "${CError}ERROR:${CNone} Specified private key does not exist [$KEY_FILE]."
      echo >&2 "       Command aborted."
      exit 1
   fi
   VM_KEY="-i $KEY_FILE"
fi

if [ "$(isVmPrivateHostReachable "$VM_USER" "$VM_KEY")" == "true" ]; then
   echo "Scanning VMs... Please wait."
   # If private hosts are reachable then execute from here.
   # Replace , with space
   __VM_HOSTS=$(echo "$VM_HOSTS" | sed "s/,/ /g")
else
   # If private hosts are not reachable then download files in the first public host and then
   # download files form the public host to this host.
   echo "Scanning public VM... Please wait."
   VM_PUBLIC_HOSTS=`getClusterProperty "vm.public.hosts"`
   if [ "$VM_PUBLIC_HOSTS" == "" ]; then
      echo -e >&2 "${CError}ERROR:${CNone} Unable to connect to VM hosts. Please set 'vm.public.hosts' in 'etc/cluster.properties."
      echo >&2 "       Command aborted."
      exit 1
   fi

   # Download from the first public host
   VM_HOST=$(echo "$VM_PUBLIC_HOSTS" | sed "s/,.*//g")
   RWE_NAME=$(basename $VM_PADOGRID_WORKSPACES_HOME)
   WORKSPACE=$(basename $VM_PADOGRID_WORKSPACE)
   ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "switch_rwe $RWE_NAME/$WORKSPACE && $COMMAND_PREFIX $VM_PADOGRID_HOME/$PRODUCT/bin_sh/$EXECUTABLE -remote -cluster $CLUSTER $@"

   __VM_HOSTS=$VM_HOST
fi

# Find all existing and new hosts
EXISTING_HOSTS=
NEW_HOSTS=
THIS_VM_HOSTNAME=`hostname`
COMMAND="if [ -d "$BASE_DIR" ]; then echo true; else echo false; fi"
EXISTING_HOST_COUNT=0
NEW_HOST_COUNT=0

FROM_LOG_DIR=$VM_PADOGRID_WORKSPACES_HOME/$WORKSPACE/clusters/$CLUSTER/log
if [ ! -d "$LOG_DIR" ]; then
   mkdir -p $LOG_DIR
fi

# Other relevant files (product specific)
case $CLUSTER_TYPE in
geode|gemfire)
   FROM_STATS_DIR=$VM_PADOGRID_WORKSPACES_HOME/$WORKSPACE/clusters/$CLUSTER/stats
   if [ ! -d "$STATS_DIR" ]; then
      mkdir -p $STATS_DIR
   fi;;
esac

for VM_HOST in $__VM_HOSTS; do
   if [ "$VM_HOST" == "$THIS_VM_HOSTNAME" ]; then
      continue
   fi
   HOSTNAME=`ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "hostname"`
   if [ "$HOSTNAME" == "" ]; then
      echo "Invalid host [$VM_HOST]"
      continue
   elif [ "$HOSTNAME" == "$THIS_VM_HOSTNAME" ]; then
      continue
   fi

   echo "   Downloading $VM_HOST..."
   scp -q -r -o stricthostkeychecking=no -o LogLevel=error -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $VM_USER@$VM_HOST:$FROM_LOG_DIR/*.log $LOG_DIR/ 
   case $CLUSTER_TYPE in
   geode|gemfire)
         scp -q -r -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $VM_USER@$VM_HOST:$FROM_STATS_DIR/*.gfs $STATS_DIR/ ;;
   esac
done

if [ "$REMOTE_SPECIFIED" == "false" ]; then
   echo ""
   echo "Downloaded directories:"
   echo "   $LOG_DIR"
   case $CLUSTER_TYPE in
      geode|gemfire)
         echo "   $STATS_DIR"
      esac
   echo ""
   echo "Download complete."
fi

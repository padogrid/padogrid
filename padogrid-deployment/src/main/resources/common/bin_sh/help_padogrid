#!/usr/bin/env bash 

# ========================================================================
# Copyright (c) 2020-2022 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
if [ -f $SCRIPT_DIR/.addonenv.sh ]; then
   . $SCRIPT_DIR/.addonenv.sh
   BASE_DIR="$(dirname "$BASE_DIR")"
else
   . $SCRIPT_DIR/.argenv.sh
   BASE_DIR="$(dirname "$SCRIPT_DIR")"
fi

EXECUTABLE="`basename $0`"

# 
# Determine the PadoGrid environment base path. Default is "$HOME/Padogrid".
#
if [ "$PADOGRID_WORKSPACES_HOME" != "" ]; then
   PADOGRID_ENV_BASE_PATH="$(dirname $(dirname $PADOGRID_WORKSPACES_HOME))"
elif [ "$PADOGRID_ENV_BASE_PATH" == "" ]; then
   if [ "$PADOGRID_HOME" == "" ]; then
      PADOGRID_ENV_BASE_PATH="$HOME/Padogrid"
   fi
fi

__options()
{
   echo "-?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

NAME
   $EXECUTABLE - Display PadoGrid help page

SYNOPSIS
   $EXECUTABLE [-?]

DESCRIPTION
   Displays PagoGrid help page.

DEFAULT
   $EXECUTABLE

EOF
cat <<EOF
SEE ALSO
EOF
   printSeeAlsoList "padogrid" $EXECUTABLE
   exit
fi

cat <<EOF

SUMMARY
   PadoGrid commands are bash scripts grouped and identifiable by prefixes and postfixes as shown
   below. Bash auto-completion is automatically enabled for all the supported products including
   some of the product native commands.

   Prefixes
      cp_ (Hazelcast CP Subsystem), t_ (tools), vm_ (VMs).

   Postfixes
      _app, _bundle, _cluster, _datanode, _docker, _group, _jupyter, _k8s, _leader, _locator, _master, _member,
      _namenode, _pod, _rwe, _vm, _vscode, _worker, _workspace.

EOF

# Change dir required due to bash resolving the wild card in the current directory.
# The mathcing current directory files are picked up, otherwise.
PWD=$(pwd)
cd $PADOGRID_HOME > /dev/null 2>&1
HEADERS="APP BUNDLE CLUSTER DATANODE DOCKER GROUP K8S LEADER LOCATOR MASTER MEMBER NAMENODE POD RWE VM WORKER WORKSPACE"
COMMANDS="*_app *_bundle *_cluster *_datanode *_docker *_group *_k8s *_leader *_locator *_master *_member *_namenode *_pod *_rwe vm_* *_worker *_workspace"

HEADERS_ARRAY=($HEADERS)
COMMANDS_ARRAY=($COMMANDS)
cd $PWD

#
# Appends spaces to the specified string to create the new string size of the
# specified length.
# @param str  String
# @param len  New length with the spaces appended
# @return Returns a new string with spaces padded at the end. If the specified length is
#         less than or equal to the specified string then it returns the specified string.
#
function appendSpaces
{
   local str=$1
   local len=$2
   local str_len=${#str}
   local padded_str=$str
   let pad_count=len-str_len   
   if [ $pad_count -gt 0 ]; then
      for i in $(seq 1 $pad_count); do
         padded_str="$padded_str "
      done
   fi
   echo "$padded_str"
}

#
# Displays all the commands matching the specified name part.
# @param directory Command directory path
# @param namePart  Command name part with wild cards
#
function displayCommands
{
   local dir="$1"
   local name_part="$2"

   local command_len=26

   pushd $dir > /dev/null 2>&1
   local COMMANDS=$(ls $name_part)
   for i in $COMMANDS; do
      if [[ "$i" == *".sh" ]]; then
         continue;
      fi
      COMMAND=$(appendSpaces $i $command_len)
      local description="$(echo $spaces | sed 's/1//g')$(grep "^. *\$EXECUTABLE - " $i | sed 's/^.*\$EXECUTABLE - //')"
      if [ ${#i} -gt $command_len ]; then
         echo "      $COMMAND"
         echo "                                 $description"
      else
         echo "      $COMMAND $description"
      fi
   done
   popd > /dev/null 2>&1
}

let LAST_INDEX=${#HEADERS_ARRAY[@]}-1
for i in $(seq 0 $LAST_INDEX); do
   HEADER=${HEADERS_ARRAY[$i]}
   COMMAND=${COMMANDS_ARRAY[$i]}
   if [ "$HEADER" == "LOCATOR" ]; then
      HEADER="$HEADER (Geode/GemFire/SnappyData/ComputeDB)"
   elif [ "$HEADER" == "LEADER" ]; then
      HEADER="$HEADER (SnappyData/ComputeDB)"
   elif [ "$HEADER" == "MASTER" ] || [ "$HEADER" == "WORKER" ]; then
      HEADER="$HEADER (Spark)"
   elif [ "$HEADER" == "NAMENODE" ] || [ "$HEADER" == "DATANODE" ]; then
      HEADER="$HEADER (Hadoop)"
   elif [ "$HEADER" == "RWE" ]; then
      COMMAND="$COMMAND list_rwes"
   elif [ "$HEADER" == "WORKSPACE" ]; then
      COMMAND="$COMMAND list_workspaces"
   elif [ "$HEADER" == "POD" ]; then
      COMMAND="$COMMAND *_node list_pods"
   elif [ "$HEADER" == "GROUP" ]; then
      COMMAND="$COMMAND list_groups"
   elif [ "$HEADER" == "CLUSTER" ]; then
      COMMAND="$COMMAND list_clusters"
   elif [ "$HEADER" == "APP" ]; then
      COMMAND="$COMMAND list_apps"
   fi
   echo "   $HEADER"
   if [[ "$HEADER" == *"SnappyData"* ]]; then
      displayCommands "$PADOGRID_HOME/snappydata/bin_sh" "${COMMAND}"
   elif [[ "$HEADER" == *"Spark"* ]]; then
      displayCommands "$PADOGRID_HOME/spark/bin_sh" "${COMMAND}"
   elif [[ "$HEADER" == *"Hadoop"* ]]; then
      displayCommands "$PADOGRID_HOME/hadoop/bin_sh" "${COMMAND}"
   else
      displayCommands "$PADOGRID_HOME/geode/bin_sh" "${COMMAND}"
   fi
   echo ""
done

# tools
echo "   TOOLS (Geode/GemFire)"
displayCommands "$PADOGRID_HOME/geode/bin_sh/tools" "*"
echo ""

# tools
echo "   TOOLS (Hazelcast)"
displayCommands "$PADOGRID_HOME/hazelcast/bin_sh/tools" "*"
echo ""

# tools
echo "   TOOLS (Others)"
displayCommands "$PADOGRID_HOME/geode/bin_sh" "*_jupyter"
displayCommands "$PADOGRID_HOME/geode/bin_sh" "*_vscode"
echo ""

# cp_sub
echo "   CP SUBSYSTEM (Hazelcast)"
displayCommands "$PADOGRID_HOME/hazelcast/bin_sh/cp_sub" "*"
echo ""

# misc
echo "   MISCELLANEOUS"
displayCommands "$PADOGRID_HOME/geode/bin_sh" "find_padogrid help_padogrid install_padogrid *_products *_product"
echo ""

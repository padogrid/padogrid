#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-cluster -num -count -all -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Remove the specified member from the specified cluster in the current workspace

SYNOPSIS
   $EXECUTABLE [-cluster cluster_name] [-num member_number] [-count member_count] [-all] [-?]

DESCRIPTION
   Removes the specified member. If the member number is not specified then it
   removes the last member in the list, i.e., the member with the highest member
   number. Note that this command aborts if the specified member is running.

   For VM clusters, the member number reflects the host in the order it is
   defined by the cluster property, 'vm.hosts', in the 'etc/cluster.properties' file.
   (Run 'show_cluster -long' to see the VM member numbers that map to hosts.)

OPTIONS
   -cluster cluster_name
             Cluster name.

   -num member_number
             Member number 1-$LAST_MEMBER_NUM

   -count member_count
             Number of members to remove.

   -all
             This option applies to VM clusters only. If specified,
             it removes from all VMs in the cluster and member_number
             is ignored.

EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
DEFAULT
   $EXECUTABLE -cluster $CLUSTER

FILES
   $CLUSTER_DIR/etc/cluster.properties
             The current cluster configuration file.

EOF
fi
cat <<EOF
SEE ALSO
EOF
   printSeeAlsoList "*member* *worker*" $EXECUTABLE
   exit
fi

#
# If '-count' specified then recursively execute this command
#
if [ "$COUNT" != "" ]; then
   if [ "$(isNumber $COUNT)" == "false" ]; then
      echo -e "${CLightRed}ERROR:${CNone} Invalid number [$COUNT]. Command aborted."
      exit 1
   fi
   if [ $COUNT -eq 0 ]; then
     exit
   elif [ $COUNT -gt 1 ]; then
      for i in $(seq $COUNT); do
         $EXECUTABLE
      done
      exit
   fi
fi

#
# Run the target cluster command if the product is different.
#
if [ "$PRODUCT_CLUSTER_SPECIFIED" == "false" ]; then
   if [ "$THIS_PRODUCT" != "$PRODUCT" ]; then
      $PADOGRID_HOME/$PRODUCT/bin_sh/$EXECUTABLE -product-cluster $CLUSTER "$@"
      exit
   fi
fi

# Get workspace name
WORKSPACE=${PADOGRID_WORKSPACE##*/}
POD=`getClusterProperty "pod.name" "local"`

#
# VM cluster
#
if [ "$REMOTE_SPECIFIED" == "false" ]; then
   VM_ENABLED=`getClusterProperty "vm.enabled" "false"`
   if [ "$VM_ENABLED" == "true" ]; then
      VM_HOSTS=`getClusterProperty "vm.hosts"`
      if [ "$VM_HOSTS" == "" ]; then
         echo "----------------------------------------------------------------"
         echo "WORKSPACE $PADOGRID_WORKSPACE"
         echo "    ERROR: VM hosts undefined. Set 'vm.hosts' in the following cluster.properties file."  
         echo "           $ETC_DIR/cluster.properties"
         echo "           Command aborted."
         echo "----------------------------------------------------------------"
         exit 1
      fi

      # If pod cluster, then source in the pod env vars to set the VM specific variables
      OS_ENV=`getOsEnv`
      if [ "$OS_ENV" == "gh" ] && [ "$POD" != "local" ]; then
         if [ -f "$PODS_DIR/$POD/.nodeenv.sh" ]; then
            . "$PODS_DIR/$POD/.nodeenv.sh"
         fi
      fi

      # Replace , with space
      __VM_HOSTS=$(echo "$VM_HOSTS" | sed "s/,/ /g")
      DEFAULT_USER=$(whoami)
      VM_USER=`getClusterProperty "vm.user" "$DEFAULT_USER"`
      VM_KEY=`getClusterProperty "vm.privateKeyFile"`
      if [ "$VM_KEY" != "" ]; then 
         VM_KEY="-i $VM_KEY"
      elif [ "$VM_PRIVATE_KEY_FILE" != "" ]; then
         VM_KEY="-i $VM_PRIVATE_KEY_FILE"
      fi
      if [ "$ALL" == "true" ]; then
         for VM_HOST in $__VM_HOSTS; do
            ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no "$COMMAND_PREFIX $SCRIPT_DIR/remove_member -cluster $CLUSTER -remote $VM_HOST -workspace $PADOGRID_WORKSPACE"
         done
      else
         # Determine the host
         __MEMBER_NUMBER=0
         __FOUND="false"
         
         for VM_HOST in $__VM_HOSTS; do
            let __MEMBER_NUMBER=__MEMBER_NUMBER+1
            if [ $__MEMBER_NUMBER -eq $MEMBER_NUM_NO_LEADING_ZERO ]; then
               __FOUND="true"
               if [ "$POD" == "local" ]; then
                  NUM=1
               else
                  let NUM=__MEMBER_NUMBER
               fi
               ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no "$COMMAND_PREFIX $SCRIPT_DIR/remove_member -cluster $CLUSTER -remote $VM_HOST -workspace $PADOGRID_WORKSPACE -num $NUM"
               break;
            fi
         done
         FIRST_NUMBER=1
         LAST_NUMBER=$__MEMBER_NUMBER
         if [ "$__FOUND" == "false" ]; then
            echo "ERROR: Invalid member number. Valid range is [$FIRST_NUMBER, $LAST_NUMBER]. Command aborted." 
         fi
      fi
      exit
   fi
fi

#
# Local cluster
#
NODE_NAME_PREFIX=`getClusterProperty "node.name.prefix" $NODE_NAME_PREFIX`

MEMBER_PREFIX=`getMemberPrefix`
MEMBER_PREFIX_LEN=${#MEMBER_PREFIX}
MEMBER_NUMBER=$MEMBER_NUM

if [ "$MEMBER_NUM_SPECIFIED" == "false" ]; then
   # Find the last member
   pushd $RUN_DIR > /dev/null 2>&1
   for i in ${MEMBER_PREFIX}*; do
      if [ -d "$i" ]; then
        MEMBER_NUMBER=${i:$MEMBER_PREFIX_LEN}
      fi
   done
   popd > /dev/null 2>&1
fi

if  [ -z $MEMBER_NUMBER ]; then
   echo "No members configured for the cluster $CLUSTER. Command aborted." 
   exit 1
fi

NODE_LOCAL=${NODE_NAME_PREFIX}-${MEMBER_NUMBER}.local
MEMBER=${MEMBER_PREFIX}${MEMBER_NUMBER}
MEMBER_DIR=$RUN_DIR/$MEMBER
PID=`getRedisMemberPid $MEMBER_NUMBER $WORKSPACE`

if [ -n "$PID" ]; then
   echo "----------------------------------------------------------------"
   echo "      ERROR: The last member ($MEMBER) is running. Command aborted."
   echo "             Please stop the member first before executing this command." 
   echo "     Member: $MEMBER"
   echo "Working Dir: $MEMBER_DIR"
   echo "----------------------------------------------------------------"
   exit 0
fi

MEMBER_DIR_EXISTS="false"
if [ -d $MEMBER_DIR ]; then
   MEMBER_DIR_EXISTS="true"
   rm -rf $MEMBER_DIR
fi

echo "----------------------------------------------------------------"
echo "       WORKSPACE $PADOGRID_WORKSPACE"
if [ "$MEMBER_DIR_EXISTS" == "true" ]; then
echo "  Member Removed: $MEMBER"
else
echo "Member Not Found: $MEMBER"
fi
echo "     Working Dir: $MEMBER_DIR"
echo "----------------------------------------------------------------"

#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020-2022 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"
PADOGRID_ENV_BASE_PATH="$(dirname $(dirname $PADOGRID_WORKSPACES_HOME))"
DOWNLOADS_DIR=$PADOGRID_ENV_BASE_PATH/downloads
PRODUCTS_DIR=$PADOGRID_ENV_BASE_PATH/products

__options()
{
   echo "-product -version -vm -simulate -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

#
# Determeint $TAR_BALL_PATH
#
ROOT_DIR_NAME=$(basename $BASE_DIR)
TOP_DIR="$(dirname "$BASE_DIR")"
TAR_BALL_GZ_NAME=$ROOT_DIR_NAME.tar.gz
TAR_BALL_GZ_PATH=$BASE_DIR/bundles/$TAR_BALL_GZ_NAME

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Install the specified product on the remote VMs

SYNOPSIS
   $EXECUTABLE [-vm comma_separated_hosts]
               -product product_name [-version product_version] | -file product_distribution_file
               [-simulate] [-?]

DESCRIPTION
   Installs the specified product distribtion on all the VMs defined by the VM_HOSTS
   environment variable in the workspace's 'setenv.sh' file. To install only on the
   cluster VMs, specify the cluster with the '-cluster' option. To install on a select
   list of VMs, specify the VM list with the '-vm' option.

   Note that this command and all other commands that begin with the "vm_" prefix are
   available only on VM workspaces.

   The '-vm' option overrides both the '-cluster' option and VM_HOSTS. The '-cluster' option
   overrides VM_HOSTS. 

   This command also updates the product home path in the VM workspace 'setenv.sh' file.

OPTIONS
   -cluster cluster_name
             Cluster name.

   -vm comma_separated_hosts
              A comma separated list of VM hosts or addresses. If the list contains spaces
             then enclosed it in quotes.

   -file product_distribution_file
              A distribution file path in the local file system, e.g., apache-geode-1.15.0.tgz,
              hazelcast-5.1.3.tar.gz, etc.

   -simulate
             Print the remote commands but do not execute.

EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
DEFAULT
   $EXECUTABLE -cluster $CLUSTER -product product_distribution_file

FILES
   $PADOGRID_WORKSPACE/setenv.sh
             The current workspace configuration file.
EOF
fi
cat <<EOF

SEE ALSO
EOF
   printSeeAlsoList "vm_*" $EXECUTABLE
   exit
fi

if [ "$FILE_SPECIFIED" == "true" ] && [ "$PRODUCT_SPECIFIED" == "true" ]; then
   echo >&2 "ERROR: Invalid options. Only one of '-file' or '-product' is allowed. Command aborted."
   exit 1
fi
if [ "$FILE_SPECIFIED" == "true" ] && [ "$FILE_ARG" == "" ]; then
   echo >&2 "ERROR: '-file' requires file path. Command aborted."
   exit 1
fi
if [ "$VERSION_SPECIFIED" == "true" ] && [ "$VERSION_ARG" == "" ]; then
   echo >&2 "ERROR: '-version' requires product version. Command aborted."
   exit 1
fi

PRODUCT=$PRODUCT_ARG
PRODUCT_VERSION=$VERSION_ARG
if [ "$PRODUCT" != "" ] && [ "$VERSION_SPECIFIED" == "false" ]; then
   PRODUCT_VERSION=$(getCurrentProductVersion $PRODUCT)
   if [ "$PRODUCT_VERSION" == "" ]; then
      echo >&2 "ERROR: Unable to determine the specifed product version: [$PRODUCT]. Please specify '-version'. Command aborted."
      exit 1
   fi
fi

# Available only on VM workspaces
if [ "$VM_ENABLED" != "true" ]; then
   echo "----------------------------------------------------------------"
   echo "WORKSPACE: $PADOGRID_WORKSPACE"
   echo "    ERROR: The workspace is not a VM workspace. Command aborted."
   echo "----------------------------------------------------------------"
   exit 1 
fi

# If the -vm option is specified then it overrides all other options
if [ "$VM_SPECIFIED" == "true" ]; then
   if [ "$VM_HOSTS_ARG" != "" ] && [[ "$VM_HOSTS_ARG" != *"-"* ]]; then
      VM_HOSTS=$VM_HOSTS_ARG
   else
      echo "----------------------------------------------------------------"
      echo "WORKSPACE: $PADOGRID_WORKSPACE"
      echo >&2 "ERROR: Invalid value for -vm [$VM_HOSTS_ARG]. Command aborted."
      echo "----------------------------------------------------------------"
      exit 1
   fi
else
   # The -cluster option overrides VM_HOSTS
   if [ "$CLUSTER_SPECIFIED" == "true" ]; then
      if [ "`isClusterExist "$CLUSTER"`" == "false" ]; then 
         echo "----------------------------------------------------------------"
         echo "WORKSPACE: $PADOGRID_WORKSPACE"
         echo >&2 "ERROR: Cluster does not exist [$CLUSTER]. Command aborted."
         echo "----------------------------------------------------------------"
         exit 1
      fi
      VM_ENABLED=`getClusterProperty "vm.enabled" "false"`
      if [ "$VM_ENABLED" == "false" ]; then
         echo "----------------------------------------------------------------"
         echo "WORKSPACE: $PADOGRID_WORKSPACE"
         echo >&2 "ERROR: Not a VM cluster [$CLUSTER]. To enable VMs, set the 'vm.enabled' property"
         echo >&2 "       in the 'etc/cluster.properties' file."
         echo "----------------------------------------------------------------"
         exit 1
      fi
      VM_HOSTS=`getClusterProperty "vm.hosts"`
      if [ "$VM_HOSTS" == "" ]; then
         if [ "$VM_HOSTS" == "" ]; then
            echo "----------------------------------------------------------------"
            echo "WORKSPACE: $PADOGRID_WORKSPACE"
            echo >&2 "    ERROR: The 'vm.hosts' property is not set in the 'etc/cluster.properties' file."
            echo >&2 "           file. Command aborted."
            echo "----------------------------------------------------------------"
            exit 1
         fi
      fi
   fi
fi

# Replace , with space
__VM_HOSTS=$(echo "$VM_HOSTS" | sed "s/,/ /g")
DEFAULT_USER=$(whoami)
VM_USER=`getClusterProperty "vm.user" "$DEFAULT_USER"`

if [ "$KEY" == "" ]; then
   KEY=`getClusterProperty "vm.privateKeyFile"`
fi
if [ "$KEY" == "" ]; then 
   KEY="$VM_PRIVATE_KEY_FILE"
fi
VM_KEY=""
if [ "$KEY" != "" ]; then 
   if [ ! -f "$KEY" ]; then
      echo >&2 "ERROR: Specified private key does not exist [$KEY]."
      echo >&2 "       Command aborted."
      exit 1
   fi
   VM_KEY="-i $KEY"
fi

# Fail fast: Exit if any of the hosts is not reachable
for VM_HOST in $__VM_HOSTS; do
   REPLY=$(ssh -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT -o PasswordAuthentication=no "echo hello" 2>&1)
   EXIT_CODE=$?
   if [ "$EXIT_CODE" != "0" ]; then
      echo -e "ERROR: $VM_HOST - ${CLightRed}Failed${CNone} ($REPLY)"
      echo "       Command aborted."
      exit 1
   fi
done

#
# Installs the product defined by the following variables. It uses the first
# VM that has the product file as the base VM for installing the product
# to the remaining VMs.
#
# @required VM_PRODUCT_HOME_NOT_FOUND_LIST
# @required VM_PRODUCT_HOME
# @required PRODUCT_PATH
# @required __VM_HOSTS
#
function installProduct
{
   if [ "$VM_PRODUCT_HOME_NOT_FOUND_LIST" == "" ]; then
      echo "Product already installed on all VMs."
   else

      if [ ! -f "$PRODUCT_PATH" ]; then
         echo >&2 "ERROR: Invalid path [$PRODUCT_PATH]."
         echo >&2 "       Command aborted."
         exit 1
      fi

      local __PRODUCT_DIST_FILE_NAME=$(basename $PRODUCT_PATH)
      local __PRODUCT_PARENT_PATH="$(dirname $VM_PRODUCT_HOME_PATH)"
      local __PRODUCT_DOWNLOADS_PATH="$(dirname $__PRODUCT_PARENT_PATH)/downloads"
      local __PRODUCT_FILE_PATH="$__PRODUCT_DOWNLOADS_PATH/$__PRODUCT_DIST_FILE_NAME"
      local __PRODUCT_COMMAND="[ -f $__PRODUCT_DOWNLOADS_PATH/$__PRODUCT_DIST_FILE_NAME ] && echo true || echo false"

      echo "          Local Source: $PRODUCT_PATH"
      echo "         Remote Target: $__PRODUCT_FILE_PATH"
      echo "   Remote Product Home: $VM_PRODUCT_HOME_PATH"
      echo ""

      # Determine the first VM that has product distribution file
      BASE_VM=""
      for VM_HOST in $__VM_HOSTS; do
         __PRODUCT_EXISTS=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$__PRODUCT_COMMAND")
         if [ "$__PRODUCT_EXISTS" == "true" ]; then
            BASE_VM=$VM_HOST
            break
         fi
      done

      if [ "$BASE_VM" == "" ]; then
         for VM_HOST in $VM_PRODUCT_HOME_NOT_FOUND_LIST; do
            echo "   Uploading $VM_HOST..."
            BASE_VM=$VM_HOST
            break
         done
         # Upload to the base VM
         if [ "$SIMULATE" == "true" ]; then
            echo ssh -q -n $VM_KEY $VM_USER@$BASE_VM -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "[ ! -d $__PRODUCT_DOWNLOADS_PATH ] && mkdir -p $__PRODUCT_DOWNLOADS_PATH"
            echo scp -q -r -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $PRODUCT_PATH $VM_USER@$BASE_VM:$__PRODUCT_DOWNLOADS_PATH
         else
            ssh -q -n $VM_KEY $VM_USER@$BASE_VM -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "[ ! -d $__PRODUCT_DOWNLOADS_PATH ] && mkdir -p $__PRODUCT_DOWNLOADS_PATH"
            scp -q -r -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $PRODUCT_PATH $VM_USER@$BASE_VM:$__PRODUCT_DOWNLOADS_PATH
         fi
      fi

      for VM_HOST in $VM_PRODUCT_HOME_NOT_FOUND_LIST; do
         echo "   Installing $VM_HOST..."
         if [ "$VM_HOST" != "$BASE_VM" ]; then
            # Copy from the base VM
            if [ "$SIMULATE" == "true" ]; then
               echo ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "[ ! -d $__PRODUCT_DOWNLOADS_PATH ] && mkdir -p $__PRODUCT_DOWNLOADS_PATH"
               echo ssh -q -n $VM_KEY $VM_USER@$BASE_VM -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "scp -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $REMOTE_VM_KEY $__PRODUCT_FILE_PATH $VM_USER@$VM_HOST:$__PRODUCT_FILE_PATH"
            else
               ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "[ ! -d $__PRODUCT_DOWNLOADS_PATH ] && mkdir -p $__PRODUCT_DOWNLOADS_PATH"
               ssh -q -n $VM_KEY $VM_USER@$BASE_VM -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "scp -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $REMOTE_VM_KEY $__PRODUCT_FILE_PATH $VM_USER@$VM_HOST:$__PRODUCT_FILE_PATH"
            fi
         fi
         # Install
         if [ "$SIMULATE" == "true" ]; then
            echo "ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT [ ! -d $__PRODUCT_PARENT_PATH ] && mkdir -p $__PRODUCT_PARENT_PATH"
            echo "ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT tar -C $__PRODUCT_PARENT_PATH/ -xzf $__PRODUCT_FILE_PATH"
         else
            ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "[ ! -d $__PRODUCT_PARENT_PATH ] && mkdir -p $__PRODUCT_PARENT_PATH"
            ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "tar -C $__PRODUCT_PARENT_PATH/ -xzf $__PRODUCT_FILE_PATH"
         fi
      done
      echo "Remote installation complete: $VM_PRODUCT_HOME_PATH"
   fi
}

#
# Updates setenv.sh files of all VMs with the specified VM product home path.
#
# @param vmProductHomePath Product home path for all VMs.
#
function updateVmSetenv
{
   local VM_PRODUCT_HOME_PATH="$1"

   # Update product home in workspace setenv.sh
   if [ "$VM_PRODUCT_HOME_PATH" != "" ]; then
      local __VM_PRODUCT_NAME=$(getProductName $VM_PRODUCT_HOME_PATH)
      local __VM_PRODUCT_HOME=$(getProductHome $__VM_PRODUCT_NAME)
      echo "Updating VM $__VM_PRODUCT_HOME..."
      for VM_HOST in $__VM_HOSTS; do
         if [ "$SIMULATE" == "true" ]; then
            echo ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "sed -i -e 's|^.*export $__VM_PRODUCT_HOME=.*$|   export $__VM_PRODUCT_HOME="\"${VM_PRODUCT_HOME_PATH}\""|' $VM_PADOGRID_WORKSPACE/setenv.sh"
         else
            ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "sed -i -e 's|^.*export $__VM_PRODUCT_HOME=.*$|   export $__VM_PRODUCT_HOME="\"${VM_PRODUCT_HOME_PATH}\""|' $VM_PADOGRID_WORKSPACE/setenv.sh"
         fi
      done
      # Update vmenv.sh if java
      if [ "$__VM_PRODUCT_NAME" == "padogrid" ] || [ "$__VM_PRODUCT_NAME" == "java" ]; then
         # local vmenv.sh
         if [ "$SIMULATE" == "true" ]; then
            echo sed -i$__SED_BACKUP -e "s|VM_${__VM_PRODUCT_HOME}=.*$|VM_${__VM_PRODUCT_HOME}=\"${VM_PRODUCT_HOME_PATH}\"|" "$PADOGRID_WORKSPACE/vmenv.sh"
         else
            sed -i$__SED_BACKUP -e "s|VM_${__VM_PRODUCT_HOME}=.*$|VM_${__VM_PRODUCT_HOME}=\"${VM_PRODUCT_HOME_PATH}\"|" "$PADOGRID_WORKSPACE/vmenv.sh"
         fi
         # remote vmenv.sh
         for VM_HOST in $__VM_HOSTS; do
            if [ "$SIMULATE" == "true" ]; then
               echo ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "sed -i -e 's|VM_${__VM_PRODUCT_HOME}=.*$|VM_${__VM_PRODUCT_HOME}="\"${VM_PRODUCT_HOME_PATH}\""|' $VM_PADOGRID_WORKSPACE/vmenv.sh"
            else
               ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "sed -i -e 's|VM_${__VM_PRODUCT_HOME}=.*$|VM_${__VM_PRODUCT_HOME}="\"${VM_PRODUCT_HOME_PATH}\""|' $VM_PADOGRID_WORKSPACE/vmenv.sh"
            fi
         done
      fi

   fi
}

#
# Returns the product directory name for the specified product index
#
# @param product        Downloadable product name
# @param productVersion Product version
#
# @return Returns the product directory name
#
function getProductDirName
{
  local PRODUCT="$1"
  local VERSION="$2"
  local DIR_NAME=""
  case $PRODUCT in
    padogrid ) DIR_NAME="padogrid_$VERSION";;
    pado ) DIR_NAME="pado_$VERSION";;
    padodesktop ) DIR_NAME="pado-desktop_$VERSION";;
    padoweb ) DIR_NAME="padoweb_$VERSION";;
    gemfire ) DIR_NAME="pivotal-gemfire-$VERSION";;
    geode ) DIR_NAME="apache-geode-$VERSION";;
    hazelcast-enterprise ) DIR_NAME="hazelcast-enterprise-$VERSION";;
    hazelcast-oss ) DIR_NAME="hazelcast-$VERSION";;
    hazelcast-mc ) DIR_NAME="hazelcast-management-center-$VERSION";;
    hazelcast-desktop ) DIR_NAME="hazelcast-desktop_$VERSION";;
    jet-enterprise ) DIR_NAME="hazelcast-jet-enterprise-$VERSION";;
    jet-oss ) DIR_NAME="hazelcast-jet-$VERSION";;
    redis ) DIR_NAME="redis-$VERSION";;
    snappydata ) DIR_NAME="snappydata-$VERSION";;
    spark ) DIR_NAME="spark-$VERSION";;
    kafka ) DIR_NAME="kafka_$VERSION";;
    confluent ) DIR_NAME="confluent-$VERSION";;
    hadoop ) DIR_NAME="hadoop-$VERSION";;
    prometheus ) DIR_NAME="prometheus-$VERSION";;
    grafana-enterprise|grafana-oss) DIR_NAME="grafana-$VERSION";;
    derby ) DIR_NAME="db-derby-$VERSION";;
  esac
  echo $DIR_NAME
}

if [ "$FILE_SPECIFIED" == "true" ]; then

   # Install product using file

   # Arguments to installProduct function
   PRODUCT_PATH=$FILE_ARG

   # Determine all the VMs that do not have the product installed
   VM_PADOGRID_ENV_BASE_PATH=$(dirname $(dirname $VM_PADOGRID_WORKSPACES_HOME))
   VM_PRODUCT_DIR_NAME=$(tar tzvf $PRODUCT_PATH | tail -n 1 | sed -e 's/.* //' -e 's/\/.*//')
   VM_PRODUCT_HOME_PATH="$VM_PADOGRID_ENV_BASE_PATH/products/$VM_PRODUCT_DIR_NAME"
   VM_PRODUCT_HOME_COMMAND="[ -d $VM_PRODUCT_HOME_PATH ] && echo true || echo false"
   VM_PRODUCT_HOME_NOT_FOUND_LIST=""
   for VM_HOST in $__VM_HOSTS; do
      VM_PRODUCT_HOME_EXISTS=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$VM_PRODUCT_HOME_COMMAND")
      if [[ "$VM_PRODUCT_HOME_EXISTS" == *"false" ]]; then
         VM_PRODUCT_HOME_NOT_FOUND_LIST="$VM_PRODUCT_HOME_NOT_FOUND_LIST $VM_HOST"
      fi
   done

   echo ""

   REMOTE_VM_KEY=""
   if [ "$VM_PRIVATE_KEY_FILE" != "" ]; then
      PRIVATE_KEY_FILE_NAME=$(basename $VM_PRIVATE_KEY_FILE)
      REMOTE_VM_KEY="-i $VM_PADOGRID_WORKSPACE/$PRIVATE_KEY_FILE_NAME"
   fi

   installProduct
   updateVmSetenv $VM_PRODUCT_HOME_PATH
   
else

   # Install product using install_padogrid

   PRODUCT=$PRODUCT_ARG
   product=""
   COMMAND="vm_show_products -raw"
   for VM_HOST in $__VM_HOSTS; do
      vm_products=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$COMMAND")
      found="false"
      count=0
      for i in $vm_products; do
         if [ $count -eq 0 ]; then
            product=$i
         fi
         if [ "$product" == "$PRODUCT" ]; then
            if [ "$i" == ";" ]; then
               break;
            elif [[ "$i" == "_"* ]]; then
               i=${i:1} 
            fi
            if [ "$i" == "$PRODUCT_VERSION" ]; then
               found="true"
               break;
            fi
         fi
         let count=count+1
         if [ "$i" == ";" ]; then
            count=0
         fi
      done
      if [ "$found" != "true" ]; then
         echo "   Installing $PRODUCT:$PRODUCT_VERSION on $VM_HOST..."
         if [ "$SIMULATE" == "true" ]; then
            echo ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "install_padogrid -quiet -product $PRODUCT -version $PRODUCT_VERSION"
         else
            ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "install_padogrid -quiet -product $PRODUCT -version $PRODUCT_VERSION"
         fi
      fi
   done

   DIR_NAME=$(getProductDirName $PRODUCT $PRODUCT_VERSION)
   VM_PRODUCT_HOME_PATH="$PRODUCTS_DIR/$DIR_NAME"
   updateVmSetenv $VM_PRODUCT_HOME_PATH
fi

echo "Run 'vm_test' to check installation and configuration status."
if [ "$SIMULATE" == "true" ]; then
   echo ""
   echo "Simulation complete."
fi
echo ""

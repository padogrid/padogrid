#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020-2022 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-cluster -vm -overwrite -simulate -quiet -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Deploy the padogrid distribution to VMs

SYNOPSIS
   $EXECUTABLE [-cluster cluster_name] [-vm comma_separated_hosts] [-simulate] [-quiet] [-?]

DESCRIPTION
   Deploys the padogrid distribution to all the VMs defined by the VM_HOSTS
   environment variable in the workspace 'setenv.sh' file. To deploy to only the
   cluster VMs, specify the cluster with the '-cluster' option. To deploy to a select
   list of VMs, specify the VM list with the '-vm' option.

   It first scans the VMs and displays the VMs that already have padogrid installed.
   It then prompts for optionally overwriting the existing installations. The VMs'
   padogrid installation directory path is defined by VM_PADOGRID_HOME
   set in the workspace 'setenv.sh' file.

   Note that this command and all other commands that begin with the "vm_" prefix are
   available only on VM workspaces.

   The '-vm' option overrides both the '-cluster' option and VM_HOSTS. The '-cluster' option
   overrides VM_HOSTS. 
   
OPTIONS
   -cluster cluster_name
             Cluster name.

   -vm comma_separated_hosts
             A comma separated list of VM hosts or addresses. If the list contains spaces
             then enclosed it in quotes.

   -overwrite
             If specified, then overwrites the existing VMs.

   -simulate
             Print the remote commands but do not execute.

   -quiet
             Quiet mode. Supresses all interactive prompts.

CAUTION
   The -quiet option overwrites existing installations if any.

EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
DEFAULT
   $EXECUTABLE -cluster $CLUSTER

FILES
   $PADOGRID_WORKSPACE/setenv.sh
             The current workspace configuration file.
EOF
fi
cat <<EOF

SEE ALSO
EOF
   printSeeAlsoList "vm_*" $EXECUTABLE
   exit
fi

# Available only on VM workspaces
if [ "$VM_ENABLED" != "true" ]; then
   echo "----------------------------------------------------------------"
   echo "WORKSPACE: $PADOGRID_WORKSPACE"
   echo "    ERROR: The workspace is not a VM workspace. Command aborted."
   echo "----------------------------------------------------------------"
   exit 1 
fi

# If the -vm option is specified then it overrides all other options
if [ "$VM_SPECIFIED" == "true" ]; then
   if [ "$VM_HOSTS_ARG" != "" ] && [ "${VM_HOSTS_ARG:0:1}" != "-" ]; then
      VM_HOSTS=$VM_HOSTS_ARG
   else
      echo "----------------------------------------------------------------"
      echo "WORKSPACE: $PADOGRID_WORKSPACE"
      echo >&2 "ERROR: Invalid value for -vm [$VM_HOSTS_ARG]. Command aborted."
      echo "----------------------------------------------------------------"
      exit 1
   fi
else
   # The -cluster option overrides VM_HOSTS
   if [ "$CLUSTER_SPECIFIED" == "true" ]; then
      if [ "`isClusterExist "$CLUSTER"`" == "false" ]; then 
         echo "----------------------------------------------------------------"
         echo "WORKSPACE: $PADOGRID_WORKSPACE"
         echo >&2 "ERROR: Cluster does not exist [$CLUSTER]. Command aborted."
         echo "----------------------------------------------------------------"
         exit 1
      fi
      VM_ENABLED=`getClusterProperty "vm.enabled" "false"`
      if [ "$VM_ENABLED" == "false" ]; then
         echo "----------------------------------------------------------------"
         echo "WORKSPACE: $PADOGRID_WORKSPACE"
         echo >&2 "ERROR: Not a VM cluster [$CLUSTER]. To enable VMs, set the 'vm.enabled' property"
         echo >&2 "       in the 'etc/cluster.properties' file."
         echo "----------------------------------------------------------------"
         exit 1
      fi
      VM_HOSTS=`getClusterProperty "vm.hosts"`
      if [ "$VM_HOSTS" == "" ]; then
         if [ "$VM_HOSTS" == "" ]; then
            echo "----------------------------------------------------------------"
            echo "WORKSPACE: $PADOGRID_WORKSPACE"
            echo >&2 "    ERROR: The 'vm.hosts' property is not set in the 'etc/cluster.properties' file."
            echo >&2 "           file. Command aborted."
            echo "----------------------------------------------------------------"
            exit 1
         fi
      fi
   fi
fi

if [ "$REMOTE_SPECIFIED" == "false" ]; then
   echo "----------------------------------------------------------------"
   echo "WORKSPACE: $PADOGRID_WORKSPACE"
   echo "Deploying padogrid to the following VM hosts:"
   echo "    $VM_HOSTS"
   echo "----------------------------------------------------------------"
fi

VM_USER=`getVmUser`
KEY_FILE=`getClusterProperty "vm.privateKeyFile"`
if [ "$KEY_FILE" == "" ]; then
   # Set the first private key file found in the workspace directory if exists
   __VM_PRIVATE_KEY_FILE_FOUND="false"
   if [ "$VM_PRIVATE_KEY_FILE" == "" ]; then
      if [ -f $PADOGRID_WORKSPACE/*.pem ]; then
         for i in $PADOGRID_WORKSPACE/*.pem; do
            VM_PRIVATE_KEY_FILE=$i
            __VM_PRIVATE_KEY_FILE_FOUND="true"
            break
         done
      elif [ -f $PADOGRID_WORKSPACE/*.key ]; then
         for i in $PADOGRID_WORKSPACE/*.key; do
            VM_PRIVATE_KEY_FILE=$i
            __VM_PRIVATE_KEY_FILE_FOUND="true"
            break
         done
      fi
   fi
   # Replace '~' with the VM home path
   KEY_FILE=$(echo $VM_PRIVATE_KEY_FILE | sed "s|\~|$HOME|")
fi
if [ "$KEY_FILE" == "" ]; then 
   KEY_FILE="$VM_PRIVATE_KEY_FILE"
fi
VM_KEY=""
if [ "$KEY_FILE" != "" ]; then 
   if [ ! -f "$KEY_FILE" ]; then
      echo -e >&2 "${CError}ERROR:${CNone} Specified private key does not exist [$KEY_FILE]."
      echo >&2 "       Command aborted."
      exit 1
   fi
   VM_KEY="-i $KEY_FILE"
fi

# Fail fast: Exit if any of the hosts is not reachable
#for VM_HOST in $__VM_HOSTS; do
#   REPLY=$(ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT -o PasswordAuthentication=no "echo hello" 2>&1)
#   EXIT_CODE=$?
#   if [ "$EXIT_CODE" != "0" ]; then
#      echo -e "ERROR: $VM_HOST - ${CLightRed}Failed${CNone} ($REPLY)"
#      echo "       Command aborted."
#      exit 1
#   fi
#done

# Simulation runs in the quiet mode
if [ "$SIMULATE" == "true" ]; then
   QUIET=$SIMULATE
fi

IS_PUBLIC_HOST="false"
if [ "$(isVmPrivateHostReachable "$VM_USER" "$VM_KEY")" == "true" ]; then
   echo "Scanning VMs... Please wait."
   # If private hosts are reachable then execute from here.
   # Replace , with space
   __VM_HOSTS=$(echo "$VM_HOSTS" | sed "s/,/ /g")
else
   # If private hosts are not reachable then deploy to the first public host and then
   # use that public as a proxy to execute this command.
   echo "Scanning public VM... Please wait."
   VM_PUBLIC_HOSTS=`getClusterProperty "vm.public.hosts"`
   if [ "$VM_PUBLIC_HOSTS" == "" ]; then
      echo -e >&2 "${CError}ERROR:${CNone} Unable to connect to VM hosts. Please set 'vm.public.hosts' in 'etc/cluster.properties."
      echo "       Command aborted."
      exit 1
   fi

   # Use the first public host
   VM_HOST=$(echo "$VM_PUBLIC_HOSTS" | sed "s/,.*//g")
   __VM_HOSTS=$VM_HOST
   IS_PUBLIC_HOST="true"
fi

# Find all existing and new hosts
EXISTING_HOSTS=
NEW_HOSTS=
THIS_VM_HOSTNAME=`hostname`
COMMAND="if [ -d "$VM_PADOGRID_HOME" ]; then echo true; else echo false; fi"
EXISTING_HOST_COUNT=0
NEW_HOST_COUNT=0
for VM_HOST in $__VM_HOSTS; do
   HOST_NAME=`ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "hostname"`
   if [ "$HOST_NAME" == "$THIS_VM_HOSTNAME" ]; then
      continue
   fi
   DIR_EXISTS=`ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $COMMAND`
   if [ "$DIR_EXISTS" == "true" ]; then
      EXISTING_HOSTS="$EXISTING_HOSTS $VM_HOST"
      let EXISTING_HOST_COUNT=EXISTING_HOST_COUNT+1
   else
      NEW_HOSTS="$NEW_HOSTS $VM_HOST"
      let NEW_HOST_COUNT=NEW_HOST_COUNT+1
   fi
done

if [ "$EXISTING_HOSTS" != "" ]; then
   echo ""
   echo "padogrid installation found in the following host(s):"
   echo "   $EXISTING_HOSTS"
fi

if [ "$NEW_HOSTS" != "" ]; then
   echo ""
   echo "padogrid installation not found in the following host(s):"
   echo "   $NEW_HOSTS"
fi
DEPLOYMENT_HOST_COUNT=$NEW_HOST_COUNT
INPUT=
if [ "$QUIET" == "false" ] && [ "$OVERWRITE" != "true" ]; then
   if [ "$EXISTING_HOSTS" != "" ]; then
      echo "Do you want to overwrite the existing installations?"
      echo "('overwrite' + Enter to overwrite the installations, other keys to continue.)"
      read INPUT
      echo ""
   fi
   
   OVERWRITE="false"
   if [ "$INPUT" == "overwrite" ]; then
      OVERWRITE="true"
      echo "This installation will be deployed to both existing and new hosts."
   else
      echo "Existing installations will be skipped."
   fi
   echo "Do you want to continue?"
   echo "('continue' + Enter to continue deployment, other keys to quit.)"
   read INPUT
   echo ""
   # trim string
   INPUT=`echo "$INPUT" | xargs`
   if [ "$INPUT" != "continue" ]; then
      echo "Addon deployment aborted."
      exit
   fi
fi

if [ "$OVERWRITE" == "true" ]; then
   let DEPLOYMENT_HOST_COUNT=DEPLOYMENT_HOST_COUNT+EXISTING_HOST_COUNT
fi

if [ "$IS_PUBLIC_HOST" != "true" ]; then
   if [ $DEPLOYMENT_HOST_COUNT -eq 0 ]; then
      exit
   fi
fi

echo "Total deployment host count: $DEPLOYMENT_HOST_COUNT"

DOWNLOADS_DIR="$PADOGRID_ENV_BASE_PATH/downloads"
ROOT_DIR_NAME=$(basename $PADOGRID_HOME)
TAR_BALL_NAME=$ROOT_DIR_NAME.tar
TAR_BALL_GZ_NAME=$ROOT_DIR_NAME.tar.gz
TAR_BALL_GZ_PATH="$DOWNLOADS_DIR/$TAR_BALL_GZ_NAME"
TAR_BALL_PATH=$PADOGRID_WORKSPACE/bundles/$TAR_BALL_NAME
VM_PADOGRID_HOME_PARENT_DIR="$(dirname "$VM_PADOGRID_HOME")"

echo "Creating a tar ball: [$TAR_BALL_GZ_PATH]..."
if [ "$SIMULATE" != "true" ]; then
   pushd $PADOGRID_HOME/..  > /dev/null 2>&1
   tar czf $TAR_BALL_GZ_PATH $ROOT_DIR_NAME
   popd > /dev/null 2>&1
fi

ROOT_DIR_NAME=$(basename $PADOGRID_HOME)
VM_PADOGRID_TARBALL_GZ_PATH="$VM_PADOGRID_ENV_BASE_PATH/downloads/$TAR_BALL_GZ_NAME"

if [ "$NEW_HOSTS" != "" ]; then
   echo "New Hosts:"
   for VM_HOST in $NEW_HOSTS; do
      echo "   Deploying to $VM_HOST..."
      if [ "$SIMULATE" == "true" ]; then
         echo ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "mkdir -p $VM_PADOGRID_HOME_PARENT_DIR"
         echo scp -q -o stricthostkeychecking=no -o LogLevel=error -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $TAR_BALL_GZ_PATH $VM_USER@$VM_HOST:$VM_PADOGRID_TARBALL_GZ_PATH
         echo ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "tar -C $VM_PADOGRID_HOME_PARENT_DIR -xzf $VM_PADOGRID_TARBALL_GZ_PATH"
      else
         ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "mkdir -p $VM_PADOGRID_HOME_PARENT_DIR"
         scp -q -o stricthostkeychecking=no -o LogLevel=error -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $TAR_BALL_GZ_PATH $VM_USER@$VM_HOST:$VM_PADOGRID_TARBALL_GZ_PATH
         ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "tar -C $VM_PADOGRID_HOME_PARENT_DIR -xzf $VM_PADOGRID_TARBALL_GZ_PATH"
      fi
   done
fi

if [ "$EXISTING_HOSTS" != "" ] && [ "$OVERWRITE" == "true" ] ; then
   echo "Existing Hosts:"
   for VM_HOST in $EXISTING_HOSTS; do
      echo "   Deploying to $VM_HOST..."
      if [ "$SIMULATE" == "true" ]; then
         echo scp -q -o stricthostkeychecking=no -o LogLevel=error -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $TAR_BALL_GZ_PATH $VM_USER@$VM_HOST:$VM_PADOGRID_TARBALL_GZ_PATH
         echo ssh -n $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "tar -C $VM_PADOGRID_HOME_PARENT_DIR -xzf $VM_PADOGRID_TARBALL_GZ_PATH"
      else
         scp -q -o stricthostkeychecking=no -o LogLevel=error -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $TAR_BALL_GZ_PATH $VM_USER@$VM_HOST:$VM_PADOGRID_TARBALL_GZ_PATH
         ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "tar -C $VM_PADOGRID_HOME_PARENT_DIR -xzf $VM_PADOGRID_TARBALL_GZ_PATH"
      fi
   done
fi

if [ "$IS_PUBLIC_HOST" == "true" ]; then
   # Use the public host a proxy to sync the rest of hosts
   #RWE_NAME=$(basename $PADOGRID_WORKSPACES_HOME)
   #WORKSPACE=$(basename $PADOGRID_WORKSPACE)
   RWE_NAME=$(basename $VM_PADOGRID_WORKSPACES_HOME)
   WORKSPACE=$(basename $VM_PADOGRID_WORKSPACE)
   if [ "$OVERWRITE" == "true" ]; then
      COMMAND_OPTS="-overwrite"
   fi
   if [ "$SIMULATE" == "true" ]; then
      echo ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "switch_rwe $RWE_NAME/$WORKSPACE && $COMMAND_PREFIX $VM_PADOGRID_HOME/$PRODUCT/bin_sh/$EXECUTABLE $COMMAND_OPTS -remote -cluster $CLUSTER $@"
   else
      ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "switch_rwe $RWE_NAME/$WORKSPACE && $COMMAND_PREFIX $VM_PADOGRID_HOME/$PRODUCT/bin_sh/$EXECUTABLE $COMMAND_OPTS -remote -cluster $CLUSTER $@"
   fi
fi


if [ "$REMOTE_SPECIFIED" == "false" ]; then
   echo ""
   if [ "$SIMULATE" == "true" ]; then
      echo "Simulation deployment complete."
   else
      echo "Deployment complete."
   fi
fi

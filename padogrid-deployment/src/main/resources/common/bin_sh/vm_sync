#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020-2022 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-cluster -vm -rwe -simulate -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

#
# Determeint $TAR_BALL_PATH
#
ROOT_DIR_NAME=$(basename $BASE_DIR)
TOP_DIR="$(dirname "$BASE_DIR")"
TAR_BALL_GZ_NAME=$ROOT_DIR_NAME.tar.gz
TAR_BALL_GZ_PATH=$BASE_DIR/bundles/$TAR_BALL_GZ_NAME

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Synchronize the rmote VMs with the local workspace

SYNOPSIS
   $EXECUTABLE [-cluster cluster_name] [-vm comma_separated_hosts] [-rwe] [-simulate] [-?]

DESCRIPTION
   Synchronizes all the VMs defined by VM_HOSTS environment variable in the workspace
   'vmenv.sh' file with the local workspace. To synchronize only the cluster VMs, specify
   the cluster with the '-cluster' option. To synchronize a select list of VMs, specify
   the VM list with the '-vm' option.

   Note that this command and all other commands that begin with the "vm_" preprefix are
   available for operating on VM workspaces only.

   The '-vm' option overrides both the '-cluster' option and VM_HOSTS. The '-cluster' option
   overrides VM_HOSTS. 

OPTIONS
   -cluster cluster_name
             Cluster name.

   -vm comma_separated_hosts
             A comma separated list of VM hosts or addresses. If the list contains spaces
             then enclosed it in quotes.

   -rwe
             Synchronizes RWE specific configuration files also. Specify this option if the license keys
             are updated in the RWE's hidden file, '.<project>env.sh', for example.

   -simulate
             Print the remote commands but do not execute.

EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
DEFAULT
   $EXECUTABLE -cluster $CLUSTER file_path

FILES
   $PADOGRID_WORKSPACE/vmenv.sh
             The current remote workspace VM configuration file.
EOF
fi
cat <<EOF

SEE ALSO
EOF
   printSeeAlsoList "vm_*" $EXECUTABLE
   exit
fi

if [ "$SIMULATE" == "true" ]; then
   echo ""
   echo "In simulation mode [$EXECUTABLE]..."
   echo ""
fi

# Available only on VM workspaces
if [ "$VM_ENABLED" != "true" ]; then
   echo "----------------------------------------------------------------"
   echo "WORKSPACE: $PADOGRID_WORKSPACE"
   echo "    ERROR: The workspace is not a VM workspace. Command aborted."
   echo "----------------------------------------------------------------"
   exit 1 
fi

# If the -vm option is specified then it overrides all other options
if [ "$VM_SPECIFIED" == "true" ]; then
   if [ "$VM_HOSTS_ARG" != "" ] && [[ "$VM_HOSTS_ARG" != *"-"* ]]; then
      VM_HOSTS=$VM_HOSTS_ARG
   else
      echo "----------------------------------------------------------------"
      echo "WORKSPACE: $PADOGRID_WORKSPACE"
      echo >&2 "ERROR: Invalid value for -vm [$VM_HOSTS_ARG]. Command aborted."
      echo "----------------------------------------------------------------"
      exit 1
   fi
else
   # The -cluster option overrides VM_HOSTS
   if [ "$CLUSTER_SPECIFIED" == "true" ]; then
      if [ "`isClusterExist "$CLUSTER"`" == "false" ]; then 
         echo "----------------------------------------------------------------"
         echo "WORKSPACE: $PADOGRID_WORKSPACE"
         echo >&2 "ERROR: Cluster does not exist [$CLUSTER]. Command aborted."
         echo "----------------------------------------------------------------"
         exit 1
      fi
      VM_ENABLED=`getClusterProperty "vm.enabled" "false"`
      if [ "$VM_ENABLED" == "false" ]; then
         echo "----------------------------------------------------------------"
         echo "WORKSPACE: $PADOGRID_WORKSPACE"
         echo >&2 "ERROR: Not a VM cluster [$CLUSTER]. To enable VMs, set the 'vm.enabled' property"
         echo >&2 "       in the 'etc/cluster.properties' file."
         echo "----------------------------------------------------------------"
         exit 1
      fi
      VM_HOSTS=`getClusterProperty "vm.hosts"`
      if [ "$VM_HOSTS" == "" ]; then
         if [ "$VM_HOSTS" == "" ]; then
            echo "----------------------------------------------------------------"
            echo "WORKSPACE: $PADOGRID_WORKSPACE"
            echo >&2 "    ERROR: The 'vm.hosts' property is not set in the 'etc/cluster.properties' file."
            echo >&2 "           file. Command aborted."
            echo "----------------------------------------------------------------"
            exit 1
         fi
      fi
   fi
fi

WORKSPACE_NAME=$(basename "$PADOGRID_WORKSPACE")

# Replace , with space
__VM_HOSTS=$(echo "$VM_HOSTS" | sed "s/,/ /g")
DEFAULT_USER=$(whoami)
VM_USER=`getClusterProperty "vm.user" "$DEFAULT_USER"`

# Set the first private key file found in the workspace directory if exists
__VM_PRIVATE_KEY_FILE_FOUND="false"
if [ "$VM_PRIVATE_KEY_FILE" == "" ]; then
   if [ -f $PADOGRID_WORKSPACE/*.pem ]; then
      for i in $PADOGRID_WORKSPACE/*.pem; do
         VM_PRIVATE_KEY_FILE=$i
         __VM_PRIVATE_KEY_FILE_FOUND="true"
         break
      done
   fi
fi
if [ "$KEY" == "" ]; then
   KEY=`getClusterProperty "vm.privateKeyFile"`
fi
if [ "$KEY" == "" ]; then 
   KEY="$VM_PRIVATE_KEY_FILE"
fi
VM_KEY=""
if [ "$KEY" != "" ]; then 
   if [ ! -f "$KEY" ]; then
      echo >&2 "ERROR: Specified private key does not exist [$KEY]."
      echo >&2 "       Command aborted."
      exit 1
   fi
   VM_KEY="-i $KEY"
fi

echo ""
echo "Scanning VMs... Please wait."

# Fail fast: Exit if any of the hosts is not reachable
for VM_HOST in $__VM_HOSTS; do
   REPLY=$(ssh -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT -o PasswordAuthentication=no "echo hello" 2>&1)
   EXIT_CODE=$?
   if [ "$EXIT_CODE" != "0" ]; then
      echo -e "ERROR: $VM_HOST - ${CLightRed}Failed${CNone} ($REPLY)"
      echo "       Command aborted."
      exit 1
   fi
done

# Trap Ctrl-C
LAST_TIMESTAMP_TRAP=0
trap 'cleanExit "$EXECUTABLE" "vm" "false"' INT

TMP_RWE_SETENV_FILE="/tmp/padogrid-$EXECUTABLE-vm-rwe_setenv.sh"
TMP_SETENV_FILE="/tmp/padogrid-$EXECUTABLE-vm-setenv.sh"
TMP_VM_SYNC_TARBALL_FILE="/tmp/padogrid-$EXECUTABLE-vm-vm_sync.tar.gz"
TMP_ADDONEVN_FILE="/tmp/padogrid-$EXECUTABLE-vm-.addonenv.sh"

# Replace '~' with the VM home path in 'vmenv.sh'
VM_HOME=""
for VM_HOST in $__VM_HOSTS; do
   VM_HOME=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "cd && pwd")
   break;
done
sed -i$__SED_BACKUP -e "s|\~|$VM_HOME|" "$PADOGRID_WORKSPACE/vmenv.sh"
VM_PADOGRID_ENV_BASE_PATH=$(echo $VM_PADOGRID_ENV_BASE_PATH | sed -e "s|\~|$VM_HOME|")
VM_PADOGRID_WORKSPACES_HOME=$(echo $VM_PADOGRID_WORKSPACES_HOME | sed -e "s|\~|$VM_HOME|")
VM_JAVA_HOME=$(echo $VM_JAVA_HOME | sed -e "s|\~|$VM_HOME|")

# Check if we need to deploy padogrid to any of the VMs
PADOGRID_COMMAND="[ -d "$VM_PADOGRID_HOME" ] && echo true || echo false"
JAVA_COMMAND="[ -d "$VM_JAVA_HOME" ] && echo true || echo false"
INSTALL_PADOGRID_HOST_LIST=""
SETENV_DOWNLOADED="false"
for VM_HOST in $__VM_HOSTS; do
   # padogrid
   PADOGRID_EXISTS=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$PADOGRID_COMMAND")
   if [[ "$PADOGRID_EXISTS" == *"false" ]]; then
      INSTALL_PADOGRID_HOST_LIST="$INSTALL_PADOGRID_HOST_LIST $VM_HOST"
   fi
   if [ "$SETENV_DOWNLOADED" == "false" ]; then
      # Download the first setenv.sh. We'll use this later to update the VMs that do not have it.
      # That could happen if new VMs were added or there were network issues.
      if [ "$SIMULATE" == "true" ]; then
        echo "scp -q -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $VM_USER@$VM_HOST:$VM_PADOGRID_WORKSPACES_HOME/setenv.sh $TMP_RWE_SETENV_FILE > /dev/null 2>&1"
        echo "scp -q -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $VM_USER@$VM_HOST:$VM_PADOGRID_WORKSPACE/setenv.sh $TMP_SETENV_FILE > /dev/null 2>&1"
      else
         scp -q -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $VM_USER@$VM_HOST:$VM_PADOGRID_WORKSPACES_HOME/setenv.sh $TMP_RWE_SETENV_FILE > /dev/null 2>&1
         scp -q -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $VM_USER@$VM_HOST:$VM_PADOGRID_WORKSPACE/setenv.sh $TMP_SETENV_FILE > /dev/null 2>&1
      fi
      if [ -f $TMP_RWE_SETENV_FILE ] && [ -f $TMP_SETENV_FILE ]; then
         SETENV_DOWNLOADED="true"
      fi
   fi
done
if [ "$INSTALL_PADOGRID_HOST_LIST" != "" ]; then
   ROOT_DIR_NAME=$(basename $PADOGRID_HOME)
   TAR_BALL_GZ_NAME=padogrid-$EXECUTABLE-vm-$ROOT_DIR_NAME.tar.gz
   TMP_TAR_BALL_GZ_PATH=/tmp/$TAR_BALL_GZ_NAME
   VM_PADOGRID_HOME_PARENT_DIR="$(dirname "$VM_PADOGRID_HOME")"
   pushd $PADOGRID_HOME/.. > /dev/null 2>&1
   tar czf $TMP_TAR_BALL_GZ_PATH $ROOT_DIR_NAME
   popd > /dev/null 2>&1

   for VM_HOST in $INSTALL_PADOGRID_HOST_LIST; do
      echo "Deploying $ROOT_DIR_NAME to $VM_HOST..."
      if [ "$SIMULATE" == "true" ]; then
         echo ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "mkdir -p $VM_PADOGRID_HOME_PARENT_DIR"
         echo scp -q -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $TMP_TAR_BALL_GZ_PATH $VM_USER@$VM_HOST:$TMP_TAR_BALL_GZ_PATH
         echo ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "tar -C $VM_PADOGRID_HOME_PARENT_DIR --warning=no-unknown-keyword -xzf $TMP_TAR_BALL_GZ_PATH; rm $TMP_TAR_BALL_GZ_PATH"
      else
         ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "mkdir -p $VM_PADOGRID_HOME_PARENT_DIR"
         scp -q -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $TMP_TAR_BALL_GZ_PATH $VM_USER@$VM_HOST:$TMP_TAR_BALL_GZ_PATH
         ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "tar -C $VM_PADOGRID_HOME_PARENT_DIR --warning=no-unknown-keyword -xzf $TMP_TAR_BALL_GZ_PATH; rm $TMP_TAR_BALL_GZ_PATH"
      fi
   done
fi

# Set first VM's installed products in arrays
__VM_HOST_FIRST=$(echo $__VM_HOSTS | sed 's/ .*//')
declare -A vm_installed_product_array
declare -A vm_installed_product_home_array
getVmProductArray $__VM_HOST_FIRST vm_installed_product_array vm_installed_product_home_array
VM_INSTALLED_PRODUCTS=${!vm_installed_product_array[@]}
VM_INSTALLED_PRODUCTS="$(echo $(printf '%s\n' $VM_INSTALLED_PRODUCTS|sort -u))"
VM_INSTALLED_PRODUCT_HOMES=${!vm_installed_product_home_array[@]}
VM_INSTALLED_PRODUCT_HOMES="$(echo $(printf '%s\n' $VM_INSTALLED_PRODUCT_HOMES|sort -u))"
VM_PADOGRID_PRODUCTS_PATH="$VM_PADOGRID_ENV_BASE_PATH/products"

# Prepare rwe and workspace setenv.sh files for VMs
THIS_VM_HOSTNAME=`hostname`
ABS_PATH="$PADOGRID_WORKSPACE"
INITENV_COMMAND="[ -f "$VM_PADOGRID_WORKSPACES_HOME/initenv.sh" ] && echo true || echo false"
ADDONENV_COMMAND="[ -f "$VM_PADOGRID_WORKSPACES_HOME/.addonenv.sh" ] && echo true || echo false"
SETENV_COMMAND="[ -f "$VM_PADOGRID_WORKSPACES_HOME/setenv.sh" ] && echo true || echo false"
if [ "SETENV_DOWNLOADED" != "true" ]; then
   cp $PADOGRID_WORKSPACES_HOME/setenv.sh $TMP_RWE_SETENV_FILE
   cp $PADOGRID_WORKSPACE/setenv.sh $TMP_SETENV_FILE
   # Reset all exported variables
   EXPORT_HOME_LIST_RWE=$(grep "export .*HOME=" $TMP_RWE_SETENV_FILE | sed -e 's/^.*export //' -e 's/HOME=.*/HOME/')
   for i in $EXPORT_HOME_LIST_RWE; do
      sed -i$__SED_BACKUP -e "s/export $i=.*$/#export $i="\"\""/" -e 's/##/#/' $TMP_RWE_SETENV_FILE
   done
   sed -i$__SED_BACKUP -e 's|^.*export PADOGRID_HOME=.*$|   export PADOGRID_HOME='\"${VM_PADOGRID_HOME}\"'|' $TMP_RWE_SETENV_FILE
   EXPORT_HOME_LIST_WORKSPACE=$(grep "export .*HOME=" $TMP_SETENV_FILE | sed -e 's/^.*export //' -e 's/HOME=.*/HOME/')
   for i in $EXPORT_HOME_LIST_WORKSPACE; do
      sed -i$__SED_BACKUP -e "s/export $i=.*$/#export $i="\"\""/" -e 's/##/#/' $TMP_SETENV_FILE
   done
   sed -i$__SED_BACKUP -e 's|^.*export PADOGRID_HOME=.*$|   export PADOGRID_HOME='\"${VM_PADOGRID_HOME}\"'|' $TMP_SETENV_FILE

   # Create VM workspace setenv.sh
   for VM_PRODUCT_HOME_VAR in $VM_INSTALLED_PRODUCT_HOMES; do
      VM_PRODUCT_HOME_DIR_NAME="${vm_installed_product_home_array[$VM_PRODUCT_HOME_VAR]}"
      VM_PRODUCT_HOME_PATH="$VM_PADOGRID_PRODUCTS_PATH/$VM_PRODUCT_HOME_DIR_NAME"
      sed -i$__SED_BACKUP -e "s|^.*export $VM_PRODUCT_HOME_VAR=.*$|   export $VM_PRODUCT_HOME_VAR="\"${VM_PRODUCT_HOME_PATH}\""|" $TMP_RWE_SETENV_FILE
      sed -i$__SED_BACKUP -e "s|^.*export $VM_PRODUCT_HOME_VAR=.*$|   export $VM_PRODUCT_HOME_VAR="\"${VM_PRODUCT_HOME_PATH}\""|" $TMP_SETENV_FILE
   done
fi

# Set the found private key in 'setenv.sh'
if [ -f "$VM_PRIVATE_KEY_FILE" ]; then
   PRIVATE_KEY_FILE_NAME=$(basename $VM_PRIVATE_KEY_FILE)
else
   PRIVATE_KEY_FILE_NAME=""
fi
if [ "$__VM_PRIVATE_KEY_FILE_FOUND" == "true" ]; then
   if [ "$SIMULATE" == "true" ]; then
      echo sed -i$__SED_BACKUP -e "s|VM_PRIVATE_KEY_FILE=.*$|VM_PRIVATE_KEY_FILE=\"$VM_PRIVATE_KEY_FILE\"|" -e "s|^.*#.*VM_PRIVATE_KEY_FILE|VM_PRIVATE_KEY_FILE|" "$PADOGRID_WORKSPACE/setenv.sh"
      echo sed -i$__SED_BACKUP -e "s|VM_PRIVATE_KEY_FILE=.*$|VM_PRIVATE_KEY_FILE=\"$REMOTE_PRIVATE_KEY_FILE\"|" -e "s|^.*#.*VM_PRIVATE_KEY_FILE|VM_PRIVATE_KEY_FILE|" "$TMP_SETENV_FILE"
   else
      # local
      sed -i$__SED_BACKUP -e "s|VM_PRIVATE_KEY_FILE=.*$|VM_PRIVATE_KEY_FILE=\"$VM_PRIVATE_KEY_FILE\"|" -e "s|^.*#.*VM_PRIVATE_KEY_FILE|VM_PRIVATE_KEY_FILE|" "$PADOGRID_WORKSPACE/setenv.sh"
      # remote
      REMOTE_PRIVATE_KEY_FILE="$VM_PADOGRID_WORKSPACE/$PRIVATE_KEY_FILE_NAME"
      sed -i$__SED_BACKUP -e "s|VM_PRIVATE_KEY_FILE=.*$|VM_PRIVATE_KEY_FILE=\"$REMOTE_PRIVATE_KEY_FILE\"|" -e "s|^.*#.*VM_PRIVATE_KEY_FILE|VM_PRIVATE_KEY_FILE|" "$TMP_SETENV_FILE"
   fi
fi

#
# Synchronize workspaces
#
echo ""
echo "Workspace sync: $WORKSPACE_NAME"
pushd $ABS_PATH > /dev/null 2>&1
tar czf $TMP_VM_SYNC_TARBALL_FILE .addonenv.sh *.sh $PRIVATE_KEY_FILE_NAME apps clusters lib plugins
popd > /dev/null 2>&1
for VM_HOST in $__VM_HOSTS; do
   HOSTNAME=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "hostname")
   if [ "$HOSTNAME" == "" ]; then
      echo "Invalid host [$VM_HOST]"
      continue
   elif [ "$HOSTNAME" == "$THIS_VM_HOSTNAME" ]; then
      continue
   fi

   echo "   Synchronizing $VM_HOST..."
   if [ "$SIMULATE" == "true" ]; then
      echo ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "mkdir -p $VM_PADOGRID_WORKSPACE"
      echo scp -q -r -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $TMP_VM_SYNC_TARBALL_FILE $VM_USER@$VM_HOST:$TMP_VM_SYNC_TARBALL_FILE
      if [ "$PRIVATE_KEY_FILE_NAME" == "" ]; then
         echo ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "tar -C $VM_PADOGRID_WORKSPACE --warning=no-unknown-keyword -xzf $TMP_VM_SYNC_TARBALL_FILE && rm $TMP_VM_SYNC_TARBALL_FILE"
      else
         echo ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "tar -C $VM_PADOGRID_WORKSPACE --warning=no-unknown-keyword -xzf $TMP_VM_SYNC_TARBALL_FILE && chmod 400 $VM_PADOGRID_WORKSPACE/$PRIVATE_KEY_FILE_NAME && rm $TMP_VM_SYNC_TARBALL_FILE"
      fi
      echo scp -q -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $TMP_SETENV_FILE $VM_USER@$VM_HOST:$VM_PADOGRID_WORKSPACE/setenv.sh
   else
      ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "mkdir -p $VM_PADOGRID_WORKSPACE"
      scp -q -r -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $TMP_VM_SYNC_TARBALL_FILE $VM_USER@$VM_HOST:$TMP_VM_SYNC_TARBALL_FILE
      # private key file permissions must be changed to 400
      if [ "$PRIVATE_KEY_FILE_NAME" == "" ]; then
         ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "tar -C $VM_PADOGRID_WORKSPACE --warning=no-unknown-keyword -xzf $TMP_VM_SYNC_TARBALL_FILE && rm $TMP_VM_SYNC_TARBALL_FILE"
      else
         ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "tar -C $VM_PADOGRID_WORKSPACE --warning=no-unknown-keyword -xzf $TMP_VM_SYNC_TARBALL_FILE && chmod 400 $VM_PADOGRID_WORKSPACE/$PRIVATE_KEY_FILE_NAME && rm $TMP_VM_SYNC_TARBALL_FILE"
      fi
      scp -q -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $TMP_SETENV_FILE $VM_USER@$VM_HOST:$VM_PADOGRID_WORKSPACE/setenv.sh
   fi

   # Configure the rwe directory if not configured already
   INITENV_EXISTS=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$INITENV_COMMAND")
   ADDONENV_EXISTS=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$ADDONENV_COMMAND")
   SETENV_EXISTS=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$SETENV_COMMAND")

   if [[ "$INITENV_EXISTS" == *"false" ]]; then
      scp -q -r -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $PADOGRID_WORKSPACES_HOME/initenv.sh $VM_USER@$VM_HOST:$VM_PADOGRID_WORKSPACES_HOME/initenv.sh
   fi
   if [[ "$ADDONENV_EXISTS" == *"false" ]]; then
      cp $PADOGRID_WORKSPACES_HOME/.addonenv.sh $TMP_ADDONEVN_FILE
      if [ "$SIMULATE" == "true" ]; then
         echo scp -q -r -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $TMP_ADDONEVN_FILE $VM_USER@$VM_HOST:$VM_PADOGRID_WORKSPACES_HOME/.addonenv.sh
      else
         scp -q -r -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $TMP_ADDONEVN_FILE $VM_USER@$VM_HOST:$VM_PADOGRID_WORKSPACES_HOME/.addonenv.sh
      fi
   fi
   if [ "$RWE_SPECIFIED" == "true" ] || [[ "$SETENV_EXISTS" == *"false" ]]; then
      if [ "$SIMULATE" == "true" ]; then
         echo scp -q -r -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $TMP_RWE_SETENV_FILE $VM_USER@$VM_HOST:$VM_PADOGRID_WORKSPACES_HOME/setenv.sh
      else
         scp -q -r -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $TMP_RWE_SETENV_FILE $VM_USER@$VM_HOST:$VM_PADOGRID_WORKSPACES_HOME/setenv.sh
      fi
   fi
   if [ "$RWE_SPECIFIED" == "true" ]; then
      if [ "$SIMULATE" == "true" ]; then
         echo scp -q -r -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $PADOGRID_WORKSPACES_HOME/.*env.sh $VM_USER@$VM_HOST:$VM_PADOGRID_WORKSPACES_HOME/
      else
         scp -q -r -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $PADOGRID_WORKSPACES_HOME/.*env.sh $VM_USER@$VM_HOST:$VM_PADOGRID_WORKSPACES_HOME/
      fi
   fi
   # Update workspace metadata
   RWE=$(basename $PADOGRID_WORKSPACES_HOME)
   VM_RWE=$(basename $VM_PADOGRID_WORKSPACES_HOME)
   if [ "$SIMULATE" == "true" ]; then
      echo ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "[ ! -d ~/.padogrid/workspaces/$RWE ] && mkdir -p ~/.padogrid/workspaces/$VM_RWE"
      echo scp -q -r -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $HOME/.padogrid/workspaces/$RWE/$WORKSPACE $VM_USER@$VM_HOST:~/.padogrid/workspaces/$VM_RWE/
   else
      ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "[ ! -d ~/.padogrid/workspaces/$RWE ] && mkdir -p ~/.padogrid/workspaces/$VM_RWE"
      scp -q -r -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $HOME/.padogrid/workspaces/$RWE/$WORKSPACE $VM_USER@$VM_HOST:~/.padogrid/workspaces/$VM_RWE/
   fi
done
echo ""

# Update .bashrc
echo "Updating remote (VM) '.bashrc' if needed..."
BASHRC_COMMAND="grep initenv.sh ~/.bashrc"
INIT_COMMAND="\"echo . ${VM_PADOGRID_WORKSPACES_HOME}/initenv.sh -quiet >> ~/.bashrc\""
for VM_HOST in $__VM_HOSTS; do
   if [ "$SIMULATE" == "true" ]; then
      echo ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$BASHRC_COMMAND"
   else
      PADOGRID_INIT_IN_BASHRC=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$BASHRC_COMMAND")
   fi
   if [ "$PADOGRID_INIT_IN_BASHRC" == "" ]; then
      if [ "$SIMULATE" == "true" ]; then
         echo ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "\"$INIT_COMMAND\""
      else
         ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "\"$INIT_COMMAND\""
      fi
   fi
done

echo ""
echo "The following products are installed in the VMs. Make sure you have installed and"
echo "configured all the required products before starting the cluster."
echo ""
for VM_PRODUCT_HOME_VAR in $VM_INSTALLED_PRODUCT_HOMES; do
   echo "   ${vm_installed_product_home_array[$VM_PRODUCT_HOME_VAR]}"
done
echo ""
echo "To install a product, run 'vm_install -product <product_distribution_file>'."
echo ""

# Determine and display all VMs that do not have Java and the current cluster
# product installed.
if [[ "$VM_INSTALLED_PRODUCTS" != *"java"* ]]; then
   JAVA_DIR_NAME=$(basename $VM_JAVA_HOME)
   echo "------------------------------------------------------------------------------------------"
   echo -e "${CBrownOrange}WARNING:${CNone}"
   echo "   JDK is not installed in the VMs. The workspace will not be operational until you"
   echo "   have installed JDK."
   echo ""
   echo "To install Java in the VMs, download the correct version of JDK and execute 'vm_install'."
   echo "------------------------------------------------------------------------------------------"
fi

if [[ "$VM_INSTALLED_PRODUCTS" != *"$PRODUCT_NAME"* ]]; then
   echo "------------------------------------------------------------------------------------------"
   echo -e "${CBrownOrange}WARNING:${CNone}"
   echo "   The cluster product [$PRODUCT_NAME] is not installed in the VMs. The workspace will"
   echo "   not be operational until you have installed the product."
   echo ""
   echo "To install the product in the VMs, download the correct version of the product and"
   echo "execute 'vm_install'."
   echo "------------------------------------------------------------------------------------------"
else
   # Check if the cluster product home is set in 'setenv.sh'
   PRODUCT_NAME=$(getProductName $PRODUCT $CLUSTER_TYPE)
   PRODUCT_HOME_VAR=$(getProductHome $PRODUCT_NAME)
   line=$(grep "export .*$PRODUCT_HOME_VAR" $TMP_SETENV_FILE)
   commented_line=$(echo $line | grep "^.*#")
   if [ "$commented_line" == "" ]; then
      VALUE=$(echo $line | sed -e "s/^.*$PRODUCT_HOME_VAR=//" -e "s/\"//g")
      echo "------------------------------------------------------------------------------------------"
      echo -e "${CGo}INFO:${CNone}"
      echo "The cluster product [$PRODUCT_NAME] is configured with the following installation:"
      echo "   $PRODUCT_HOME_VAR=$VALUE"
      echo "------------------------------------------------------------------------------------------"
   else   
      echo "------------------------------------------------------------------------------------------"
      echo -e "${CBrownOrange}WARNING:${CNone}"
      echo "   The cluster product [$PRODUCT_NAME] is installed in the VMs but it is not set"
      echo "   in the workspace's 'setenv.sh' file. Please set it with 'vm_install'."
      echo "------------------------------------------------------------------------------------------"
   fi
fi

echo ""
echo -e "${CLightGreen}Workspace sync complete.${CNone}"
echo ""
if [ "$SIMULATE" == "true" ]; then
   echo "Simulation complete."
fi

# Clean tmp files and exit
cleanExit "$EXECUTABLE" "vm" "true"

#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020-2022 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-cluster -vm -simulate -quiet -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

#
# Determeint $TAR_BALL_PATH
#
ROOT_DIR_NAME=$(basename $BASE_DIR)
TOP_DIR="$(dirname "$BASE_DIR")"
TAR_BALL_GZ_NAME=$ROOT_DIR_NAME.tar.gz
TAR_BALL_GZ_PATH=$BASE_DIR/bundle/$TAR_BALL_GZ_NAME

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Deploy the specified bundle file to the specified VMs in padogrid environment

SYNOPSIS
   $EXECUTABLE [-cluster cluster_name] [-vm comma_separated_hosts] [-simulate] [-quiet] bundle_file [-?]

DESCRIPTION
   Deploys the specified bundle file to all the VMs defined by the VM_HOSTS
   environment variable in the workspace 'setenv.sh' file. To deploy to only the
   cluster VMs, specify the cluster with the '-cluster' option. To deploy to a select
   list of VMs, specify the VM list with the '-vm' option.

   $PADOGRID_WORKSPACE/setenv.sh

   It prompts for confimration if the '-quiet' is not specified.

   Note that this command and all other commands that begin with the "vm_" prefix are
   available only on VM workspaces.

   The '-vm' option overrides both the '-cluster' option and VM_HOSTS. The '-cluster' option
   overrides VM_HOSTS. 

OPTIONS
   -cluster cluster_name
             Cluster name.

   -vm comma_separated_hosts
             A comma separated list of VM hosts or addresses. If the list contains spaces
             then enclosed it in quotes.

   -simulate
             Print the remote commands but do not execute.

   -quiet
             Quiet mode. Supresses all interactive prompts.

   bundle_file
             Bundle file to deploy.

CAUTION
   The -quiet option overwrites existing installations if any.

EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
DEFAULT
   $EXECUTABLE -cluster $CLUSTER bundle_file

FILES
   $PADOGRID_WORKSPACE/setenv.sh
             The current workspace configuration file.

   $PADOGRID_WORKSPACE/bundles
             The current workspace bundles directory where locally generated bundles are stored.
EOF
fi
cat <<EOF

SEE ALSO
EOF
   printSeeAlsoList "vm_*" $EXECUTABLE
   exit
fi

# Available only on VM workspaces
if [ "$VM_ENABLED" != "true" ]; then
   echo "----------------------------------------------------------------"
   echo "WORKSPACE: $PADOGRID_WORKSPACE"
   echo "    ERROR: The workspace is not a VM workspace. Command aborted."
   echo "----------------------------------------------------------------"
   exit 1 
fi

# If the -vm option is specified then it overrides all other options
if [ "$VM_SPECIFIED" == "true" ]; then
   if [ "$VM_HOSTS_ARG" != "" ] && [[ "$VM_HOSTS_ARG" != *"-"* ]]; then
      VM_HOSTS=$VM_HOSTS_ARG
   else
      echo "----------------------------------------------------------------"
      echo "WORKSPACE: $PADOGRID_WORKSPACE"
      echo >&2 "ERROR: Invalid value for -vm [$VM_HOSTS_ARG]. Command aborted."
      echo "----------------------------------------------------------------"
      exit 1
   fi
else
   # The -cluster option overrides VM_HOSTS
   if [ "$CLUSTER_SPECIFIED" == "true" ]; then
      if [ "`isClusterExist "$CLUSTER"`" == "false" ]; then 
         echo "----------------------------------------------------------------"
         echo "WORKSPACE: $PADOGRID_WORKSPACE"
         echo >&2 "ERROR: Cluster does not exist [$CLUSTER]. Command aborted."
         echo "----------------------------------------------------------------"
         exit 1
      fi
      VM_ENABLED=`getClusterProperty "vm.enabled" "false"`
      if [ "$VM_ENABLED" == "false" ]; then
         echo "----------------------------------------------------------------"
         echo "WORKSPACE: $PADOGRID_WORKSPACE"
         echo >&2 "ERROR: Not a VM cluster [$CLUSTER]. To enable VMs, set the 'vm.enabled' property"
         echo >&2 "       in the 'etc/cluster.properties' file."
         echo "----------------------------------------------------------------"
         exit 1
      fi
      VM_HOSTS=`getClusterProperty "vm.hosts"`
      if [ "$VM_HOSTS" == "" ]; then
         if [ "$VM_HOSTS" == "" ]; then
            echo "----------------------------------------------------------------"
            echo "WORKSPACE: $PADOGRID_WORKSPACE"
            echo >&2 "    ERROR: The 'vm.hosts' property is not set in the 'etc/cluster.properties' file."
            echo >&2 "           file. Command aborted."
            echo "----------------------------------------------------------------"
            exit 1
         fi
      fi
   fi
fi

BUNDLE_FILE_PATH=${@: -1}
if [ ! -f "$BUNDLE_FILE_PATH" ]; then
   echo "ERROR: Invalid bundle file path. Command aborted."
   exit 1
fi

# 
# VM cluster
#
VM_ENABLED=`getClusterProperty "vm.enabled" "false"`
if [ "$VM_ENABLED" != "true" ]; then
   echo "ERROR: The specified cluster is not a VM cluster [$CLUSTER]. Command aborted."
   exit 1 
fi

if [ "$VM_HOSTS_ARG" != "" ] && [[ "$VM_HOSTS_ARG" != *"-"* ]]; then
   VM_HOSTS=$VM_HOSTS_ARG
fi
if [ "$VM_HOSTS" == "" ]; then
   echo "----------------------------------------------------------------"
   echo "WORKSPACE $PADOGRID_WORKSPACE"
   if [ "$VM_HOSTS" == "" ]; then
      echo >&2 "    ERROR: You must specify the '-vm' option or set VM_HOSTS in the workspace"
      echo >&2 "           'setenv.sh' file. Command aborted."
      echo "----------------------------------------------------------------"
      exit 1
   fi
   echo "----------------------------------------------------------------"
fi

# Replace , with space
__VM_HOSTS=$(echo "$VM_HOSTS" | sed "s/,/ /g")
DEFAULT_USER=$(whoami)
VM_USER=`getClusterProperty "vm.user" "$DEFAULT_USER"`
KEY_FILE=`getClusterProperty "vm.privateKeyFile"`
if [ "$KEY_FILE" == "" ]; then 
   KEY_FILE="$VM_PRIVATE_KEY_FILE"
fi
if [ ! -f "$KEY_FILE" ]; then
   echo >&2 "ERROR: Private key does not exist [$KEY_FILE]."
   echo >&2 "       Command aborted."
   exit 1
fi
if [ "$KEY_FILE" == "" ]; then
   VM_KEY=""
else
   VM_KEY="-i $KEY_FILE"
fi

# Fail fast: Exit if any of the hosts is not reachable
for VM_HOST in $__VM_HOSTS; do
   REPLY=$(ssh -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT -o PasswordAuthentication=no "echo hello" 2>&1)
   EXIT_CODE=$?
   if [ "$EXIT_CODE" != "0" ]; then
      echo -e "ERROR: $VM_HOST - ${CLightRed}Failed${CNone} ($REPLY)"
      echo "       Command aborted."
      exit 1
   fi
done

# Simulation runs in the quite mode
if [ "$SIMULATE" == "true" ]; then
   QUIET=$SIMULATE
fi

# Find all existing and new hosts
EXISTING_HOSTS=
NEW_HOSTS=
THIS_VM_HOSTNAME=`hostname`
COMMAND="if [ -d "$VM_PADOGRID_HOME" ]; then echo true; else echo false; fi"
EXISTING_HOST_COUNT=0
NEW_HOST_COUNT=0
for VM_HOST in $__VM_HOSTS; do
   HOST_NAME=`ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "hostname"`
   if [ "$HOST_NAME" == "$THIS_VM_HOSTNAME" ]; then
      continue
   fi
   DIR_EXISTS=`ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $COMMAND`
   if [ "$DIR_EXISTS" == "true" ]; then
      EXISTING_HOSTS="$EXISTING_HOSTS $VM_HOST"
      let EXISTING_HOST_COUNT=EXISTING_HOST_COUNT+1
   else
      NEW_HOSTS="$NEW_HOSTS $VM_HOST"
      let NEW_HOST_COUNT=NEW_HOST_COUNT+1
   fi
done

echo ""
echo "padogrid installation found in the following host(s):"
echo "   $EXISTING_HOSTS"
echo ""
echo "padogrid not found in the following host(s) (these hosts will be ignored):"
echo "   $NEW_HOSTS"
echo ""
DEPLOYMENT_HOST_COUNT=$EXISTING_HOST_COUNT
INPUT=
if [ "$QUIET" == "false" ]; then
   echo "Do you want to continue?"
   echo "('continue' + Enter to continue deployment, other keys to quit.)"
   read INPUT
   echo ""
   # trim string
   INPUT=`echo "$INPUT" | xargs`
   if [ "$INPUT" != "continue" ]; then
      echo "Bundle deployment aborted."
      exit
   fi
fi

if [ $DEPLOYMENT_HOST_COUNT -eq 0 ]; then
   echo "No qualified hosts found. Command aborted." 
   echo ""
   exit
fi

echo "Total deployment host count: $DEPLOYMENT_HOST_COUNT"

BUNDLE_FILE_PATH=${@: -1}
BUNDLE_FILE_DIR="$(dirname "$BUNDLE_FILE_PATH")"
BUNDLE_FILE="$(basename "$BUNDLE_FILE_PATH")"

if [ "$EXISTING_HOSTS" != "" ]; then
   echo "Existing Hosts:"
   for VM_HOST in $EXISTING_HOSTS; do
      echo "   Deploying to $VM_HOST..."
      if [ "$SIMULATE" == "true" ]; then
         echo ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "mkdir -p $VM_PADOGRID_WORKSPACE/bundle"
         echo scp -q -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $BUNDLE_FILE_PATH $VM_USER@$VM_HOST:$VM_PADOGRID_WORKSPACE/bundle
         echo ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "tar -C $VM_PADOGRID_WORKSPACE -xzf $VM_PADOGRID_WORKSPACE/bundle/$BUNDLE_FILE"
      else
         ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "mkdir -p $VM_PADOGRID_WORKSPACE/bundle"
         scp -q -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT $VM_KEY $BUNDLE_FILE_PATH $VM_USER@$VM_HOST:$VM_PADOGRID_WORKSPACE/bundle
         ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "tar -C $VM_PADOGRID_WORKSPACE -xzf $VM_PADOGRID_WORKSPACE/bundle/$BUNDLE_FILE"
      fi
   done
fi

echo ""
if [ "$SIMULATE" == "true" ]; then
   echo "Simulation deployment complete."
else
   echo "Deployment complete."
fi

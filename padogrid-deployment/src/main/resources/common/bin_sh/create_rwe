#!/usr/bin/env bash 

# ========================================================================
# Copyright (c) 2020-2022 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
if [ -f $SCRIPT_DIR/.addonenv.sh ]; then
   . $SCRIPT_DIR/.addonenv.sh
   BASE_DIR="$(dirname "$BASE_DIR")"
else
   . $SCRIPT_DIR/.argenv.sh
   BASE_DIR="$(dirname "$SCRIPT_DIR")"
fi

EXECUTABLE="`basename $0`"

# 
# Determine the PadoGrid environment base path. Default is "$HOME/Padogrid".
#
if [ "$PADOGRID_ENV_BASE_PATH" == "" ]; then
   if [ "$PADOGRID_HOME" == "" ]; then
      PADOGRID_ENV_BASE_PATH="$HOME/Padogrid"
   else
      PADOGRID_ENV_BASE_PATH="$(dirname $(dirname $PADOGRID_WORKSPACES_HOME))"
   fi
fi      

__options()
{
   echo "-product -path -rwe -workspace -cluster -java -vm -quiet -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

PadoGrid Initialization

NAME
   $EXECUTABLE - Initialize a padogrid root workspaces environment (RWE)

SYNOPSIS
   $EXECUTABLE [-product product_home_path]
              [-path workspaces_path]
              [-rwe rwe_name]
              [-java JAVA_HOME_path]
              [-workspace default_workspace]
              [-cluster default_cluster]
              [-vm]
              [-quiet] [-?]

DESCRIPTION
   Initializes a root  workspaces environment (RWE) by setting the default paths to the
   required software installation directories.

OPTIONS
   -product product_home_path
             Default product home path. One of Geode, GemFire, Hazelcast, Jet, Coherence,
             SnappyData, Spark, Kafka, and Hadoop home paths.

   -rwe rwe_name
             A new RWE name.

   -path workspaces_path
             Workspaces home path where workspaces will be store. If not specified,
             then it defaults to the current workspaces path if exists, otherwise,
             it displays an error message.

   -java JAVA_HOME_path
             JDK home path.
EOF
if [ "$MAN_SPECIFIED" == "false" ] && [ "$JAVA_HOME" != "" ]; then
cat <<EOF
             Default: $JAVA_HOME
EOF
fi
cat <<EOF

   -workspace default_workspace
             Default workspace to be created.
             Default: $DEFAULT_WORKSPACE

   -cluster default_cluster
             Default cluster name.

   -vm
             Specify '-vm' to enable VM cluster.
 
   -quiet
             Quiet mode. Supresses the interactive prompt.

DEFAULT
   $EXECUTABLE

EOF
cat <<EOF
SEE ALSO
EOF
   printSeeAlsoList "*rwe*" $EXECUTABLE
   exit
fi

PRODUCTS="geode gemfire hazelcast snappydata coherence redis spark kafka hadoop"
__PRODUCT_HOME="$PRODUCT_HOME_ARG"

function isValidProduct
{
   local PRODUCT=$1
   local FOUND="false"
   for i in $PRODUCTS; do
      if [ "$i" == "$PRODUCT" ]; then
         FOUND="true"
      fi
   done
   echo $FOUND
}

# 
# Returns "true" if number, else "false"
# @param number
#
function isNumber
{
   num=$1
   [ ! -z "${num##*[!0-9]*}" ] && echo "true" || echo "false";
}

function getLatestProductVersion
{
   local ALL_VERSIONS="$1"
   local lmajor=0
   local lminor=0
   local lupdate=-1
   for i in $ALL_VERSIONS; do
      local periods="${i//[^\.]}"
      local period_count=${#periods}
      if [ $period_count -eq 2 ]; then
         local major=${i%%\.*}
         local minor=${i%\.*}
         local minor=${minor#*\.}
         local update=${i##*\.}
      else
         local major=${i%%\.*}
         local minor=${i#*\.}
         local update=-1
      fi
      # echo debug: lmajor=$lmajor, lminor=$lminor, lupdate=$lupdate
      if [ $lmajor -lt $major ]; then
        lmajor=$major
        lminor=$minor
        lupdate=$update
      elif [ $lmajor -eq $major ]; then
        if [ "$(isNumber $minor)" == "true" ]; then
           if [ $lminor -lt $minor ]; then
              lminor=$minor
              lupdate=$update
           elif [ $lminor -eq $minor ]; then
              if [ $lupdate == "-1" ]; then
                 lupdate=$update
              elif [ "$(isNumber $lupdate)" == "true" ] && [ "$(isNumber $update)" == "true" ]; then
                 if [ $lupdate -lt $update ]; then
                    lupdate=$update
                 fi
              else
                 lupdate=$update
              fi
           fi
        fi
      fi
   done
   if [ $lupdate == "-1" ]; then
      echo "$lmajor.$lminor"
   else
      echo "$lmajor.$lminor.$lupdate"
   fi
}

function determineInstalledProducts
{
   if [ -d "$PADOGRID_ENV_BASE_PATH/products" ]; then
      pushd $PADOGRID_ENV_BASE_PATH/products > /dev/null 2>&1

      # To prevent wildcard not expanding in for loop if files do not exist
      shopt -s nullglob

      local __versions

      # Pado
      if [ "$PADO_HOME" == "" ]; then
         __versions=""
         for i in pado_*; do
            __version=${i#pado_}
            __versions="$__versions $__version "
         done
         __version=$(getLatestProductVersion "$__versions")
         PADO_HOME=$PADOGRID_ENV_BASE_PATH/products/pado_$__version
      fi

      # Geode
      if [ "$GEODE_HOME" == "" ]; then
         __versions=""
         for i in apache-geode-*; do
            __version=${i#apache-geode-}
            __versions="$__versions $__version "
         done
         __version=$(getLatestProductVersion "$__versions")
         GEODE_HOME=$PADOGRID_ENV_BASE_PATH/products/apache-geode-$__version
      fi

      # GemFire
      if [ "$GEMFIRE_HOME" == "" ]; then
         __versions=""
         for i in pivotal-gemfire-*; do
            __version=${i#pivotal-gemfire-}
            __versions="$__versions $__version "
         done
         __version=$(getLatestProductVersion "$__versions")
         GEMFIRE_HOME=$PADOGRID_ENV_BASE_PATH/products/pivotal-gemfire-$__version
      fi

      # Hazelcast OSS, Enterprise, Hazelcast Management Center, Jet OSS, Jet Enterprise, Jet Management Center
      local hossv henterv hmanv jossv jenterv jmanv
      for i in hazelcast-*; do
         if [[ "$i" == "hazelcast-enterprise-"** ]]; then
            __version=${i#hazelcast-enterprise-}
            henterv="$henterv $__version"
         elif [[ "$i" == "hazelcast-management-center-"** ]]; then
            __version=${i#hazelcast-management-center-}
            hmanv="$hmanv $__version"
         elif [[ "$i" == "hazelcast-jet-enterprise-"** ]]; then
            __version=${i#hazelcast-jet-enterprise-}
            jenterv="$jenterv $__version"
         elif [[ "$i" == "hazelcast-jet-management-center-"** ]]; then
            __version=${i#hazelcast-jet-management-center-}
            jmanv="$jmanv $__version"
         elif [[ "$i" == "hazelcast-jet-"** ]]; then
            __version=${i#hazelcast-jet-}
            jossv="$jossv $__version"
         elif [[ "$i" == "hazelcast-"** ]]; then
            __version=${i#hazelcast-}
            hossv="$hossv $__version"
         fi
      done
      if [ "$HAZELCAST_HOME" == "" ]; then
         if [ "$henterv" != "" ]; then
            __version=$(getLatestProductVersion "$henterv")
            HAZELCAST_HOME=$PADOGRID_ENV_BASE_PATH/products/hazelcast-enterprise-$__version
         elif [ "$hossv" != "" ]; then
            __version=$(getLatestProductVersion "$hossv")
            HAZELCAST_HOME=$PADOGRID_ENV_BASE_PATH/products/hazelcast-$__version
         fi
      fi
      if [ "$HAZELCAST_MC_HOME" == "" ]; then
         if [ "$hmanv" != "" ]; then
            __version=$(getLatestProductVersion "$hmanv")
            HAZELCAST_MC_HOME=$PADOGRID_ENV_BASE_PATH/products/hazelcast-management-center-$__version
         fi
      fi
      if [ "$JET_HOME" == "" ]; then
         if [ "$jenterv" != "" ]; then
            __version=$(getLatestProductVersion "$jenterv")
            JET_HOME=$PADOGRID_ENV_BASE_PATH/products/hazelcast-jet-enterprise-$__version
         elif [ "$jossv" != "" ]; then
            __version=$(getLatestProductVersion "$jossv")
            JET_HOME=$PADOGRID_ENV_BASE_PATH/products/hazelcast-jet-$__version
         fi
      fi
      if [ "$JET_MC_HOME" == "" ]; then
         if [ "$jmanv" != "" ]; then
            __version=$(getLatestProductVersion "$jmanv")
            JET_MC_HOME=$PADOGRID_ENV_BASE_PATH/products/hazelcast-jet-management-center-$__version
         fi
      fi

      # Redis
      if [ "$REDIS_HOME" == "" ]; then
         __versions=""
         for i in redis-*; do
            if [[ "$i" == *"redis-stack-server"* ]]; then
               __version=${i#redis-stack-server-}
               __version=${__version%\-*}
            else
               __version=${i#redis-}
            fi
            __versions="$__versions $__version "
         done
         __version=$(getLatestProductVersion "$__versions")
         REDIS_HOME=$PADOGRID_ENV_BASE_PATH/products/redis-$__version-bin
      fi

      # SnappyData
      if [ "$SNAPPYDATA_HOME" == "" ]; then
         __versions=""
         for i in snappydata-*; do
            __version=${i#snappydata-}
            __version=${__version%-bin}
            __versions="$__versions $__version "
         done
         __version=$(getLatestProductVersion "$__versions")
         SNAPPYDATA_HOME=$PADOGRID_ENV_BASE_PATH/products/snappydata-$__version-bin
      fi

      # Spark
      if [ "$SPARK_HOME" == "" ]; then
         __versions=""
         for i in spark-*; do
            __version=${i#spark-}
            __version=${__version%-bin}
            __versions="$__versions $__version "
         done
         __version=$(getLatestProductVersion "$__versions")
         SPARK_HOME=$PADOGRID_ENV_BASE_PATH/products/spark-$__version
      fi

      # Kafka
      if [ "$KAFKA_HOME" == "" ]; then
         __versions=""
         for i in kafka_*; do
            __version=${i#kafka_}
            __versions="$__versions $__version "
         done
         __version=$(getLatestProductVersion "$__versions")
         KAFKA_HOME=$PADOGRID_ENV_BASE_PATH/products/kafka_$__version
      fi

      # Hadoop
      if [ "$HADOOP_HOME" == "" ]; then
         __versions=""
         for i in hadoop-*; do
            __version=${i#hadoop}
            __versions="$__versions $__version "
         done
         __version=$(getLatestProductVersion "$__versions")
         HADOOP_HOME=$PADOGRID_ENV_BASE_PATH/products/hadoop_$__version
      fi

      popd > /dev/null 2>&1

      if [ ! -d "$GEODE_HOME" ]; then
         GEODE_HOME=""
      fi
      if [ ! -d "$GEMFIRE_HOME" ]; then
         GEMFIRE_HOME=""
      fi
      if [ ! -d "$HAZELCAST_HOME" ]; then
         HAZELCAST_HOME=""
      fi
      if [ ! -d "$HAZELCAST_MC_HOME" ]; then
         HAZELCAST_MC_HOME=""
      fi
      if [ ! -d "$JET_HOME" ]; then
         JET_HOME=""
      fi
      if [ ! -d "$JET_MC_HOME" ]; then
         JET_MC_HOME=""
      fi
      if [ ! -d "$REDIS_HOME" ]; then
         REDIS_HOME=""
      fi
      if [ ! -d "$SNAPPYDATA_HOME" ]; then
         SNAPPYDATA_HOME=""
      fi
      if [ ! -d "$SPARK_HOME" ]; then
         SPARK_HOME=""
      fi
      if [ ! -d "$KAFKA_HOME" ]; then
         KAFKA_HOME=""
      fi
      if [ ! -d "$HADOOP_HOME" ]; then
         HADOOP_HOME=""
      fi
   fi
}

# Determine products by scanning the products directory
determineInstalledProducts

# Determine the default product
if [ "$__PRODUCT_HOME" == "" ]; then
   if [  "$QUIET" == "true" ]; then
      if [ "$PRODUCT" == "hazelcast" ]; then
         if [ "$CLUSTER_TYPE" == "jet" ]; then
            __PRODUCT_HOME="$JET_HOME"
         else
            __PRODUCT_HOME="$HAZELCAST_HOME"
         fi
      elif [ "$PRODUCT" == "geode" ]; then
         __PRODUCT_HOME="$GEODE_HOME"
      elif [ "$PRODUCT" == "coherence" ]; then
         __PRODUCT_HOME="$COHERENCE_HOME"
      elif [ "$PRODUCT" == "redis" ]; then
         __PRODUCT_HOME="$REDIS_HOME"
      elif [ "$PRODUCT" == "snappydata" ]; then
         __PRODUCT_HOME="$SNAPPYDATA_HOME"
      elif [ "$PRODUCT" == "spark" ]; then
         __PRODUCT_HOME="$SPARK_HOME"
      elif [ "$PRODUCT" == "kafka" ]; then
         __PRODUCT_HOME="$KAFKA_HOME"
      elif [ "$PRODUCT" == "hadoop" ]; then
         __PRODUCT_HOME="$HADOOP_HOME"
      else
         __PRODUCT_HOME=""
      fi
   fi
fi


if [ "$QUIET" == "false" ] && [ "$PRODUCT_ARG" == "" ]; then
   REDO=true
   while [ "$REDO" == "true" ]; do
      echo "Enter the default product home path. Leave blank to skip. The supported products are"
      echo "[$PRODUCTS]"
      if [[ $OS_NAME == CYGWIN* ]]; then
          echo "Enter only Unix absoulte path. Windows path not allowed."
      fi
      if [ "$HAZELCAST_HOME" != "" ]; then
         echo "   $HAZELCAST_HOME"
      fi
      if [ "$JET_HOME" != "" ]; then
         echo "   $JET_HOME"
      fi
      if [ "$GEODE_HOME" != "" ]; then
         echo "   $GEODE_HOME"
      fi
      if [ "$GEMFIRE_HOME" != "" ]; then
         echo "   $GEMFIRE_HOME"
      fi
      if [ "$COHERENCE_HOME" != "" ]; then
         echo "   $COHERENCE_HOME"
      fi
      if [ "$REDIS_HOME" != "" ]; then
         echo "   $REDIS_HOME"
      fi
      if [ "$SNAPPYDATA_HOME" != "" ]; then
         echo "   $SNAPPYDATA_HOME"
      fi
      if [ "$SPARK_HOME" != "" ]; then
         echo "   $SPARK_HOME"
      fi
      if [ "$KAFKA_HOME" != "" ]; then
         echo "   $KAFKA_HOME"
      fi
      if [ "$HADOOP_HOME" != "" ]; then
         echo "   $HADOOP_HOME"
      fi
      echo "[$__PRODUCT_HOME]:"
      read -p "" INPUT
      # trim string
      INPUT=`echo "$INPUT" | xargs`
      if [ "$INPUT" != "" ]; then
         __PRODUCT_HOME=$INPUT
      fi
      if [ "$__PRODUCT_HOME" == "" ]; then
        echo "Product not selected. The RWE will be configured without the default product."
        PRODUCT_HOME=""
        PRODUCT=""
        REDO=false
      else
         if [ ! -d "$__PRODUCT_HOME" ]; then
            echo "Directory does not exist or not a directory."
         fi
         PRODUCT_HOME="$__PRODUCT_HOME"
         determineProduct

         echo "Product selected: $PRODUCT"

         if [ `isValidProduct "$PRODUCT"` == "false" ]; then
            echo "Invalid product home path entered [$__PRODUCT_HOME]"
            REDO=true
            __PRODUCT_HOME=$PRODUCT_HOME_ARG
         else
            REDO=false
         fi
      fi
   done
else
   PRODUCT_HOME="$__PRODUCT_HOME"
   determineProduct
fi

if [ "$PRODUCT" == "" ]; then
   PRODUCT="none"
fi

if [ "$PRODUCT" != "none" ] && [ `isValidProduct "$PRODUCT"` == "false" ]; then
  echo >&2 "ERROR: Invalid product: [$PRODUCT]. Supported products are [$PRODUCTS]."
  echo >&2 "       Command aborted."
  exit 1
fi

# Create env file for the '.init_padpgrid' command to source in.
TMP_ENV_FILE=/tmp/$EXECUTABLE-$(date "+%m%d%y%H%M%S").sh
echo "PADOGRID_WORKSPACES_HOME=\"$PADOGRID_WORKSPACES_HOME\"" > $TMP_ENV_FILE
echo "PRODUCT_HOME_ARG=\"$PRODUCT_HOME\"" >> $TMP_ENV_FILE
echo "PRODUCT_ARG=\"$PRODUCT\"" >> $TMP_ENV_FILE
echo "JAVA_HOME_ARG=\"$JAVA_HOME_ARG\"" >> $TMP_ENV_FILE
echo "PATH_ARG=\"$PATH_ARG\"" >> $TMP_ENV_FILE
echo "RWE_ARG=\"$RWE_ARG\"" >> $TMP_ENV_FILE
echo "NAME_ARG=\"$NAME_ARG\"" >> $TMP_ENV_FILE
echo "WORKSPACE_ARG=\"$WORKSPACE_ARG\"" >> $TMP_ENV_FILE
echo "CLUSTER_SPECIFIED=\"$CLUSTER_SPECIFIED\"" >> $TMP_ENV_FILE
echo "CLUSTER=\"$CLUSTER\"" >> $TMP_ENV_FILE
echo "VM_SPECIFIED=\"$VM_SPECIFIED\"" >> $TMP_ENV_FILE
echo "QUIET=\"$QUIET\"" >> $TMP_ENV_FILE

# product homes
echo "PADO_HOME=\"$PADO_HOME\"" >> $TMP_ENV_FILE
echo "GEODE_HOME=\"$GEODE_HOME\"" >> $TMP_ENV_FILE
echo "GEMFIRE_HOME=\"$GEMFIRE_HOME\"" >> $TMP_ENV_FILE
echo "HAZELCAST_HOME=\"$HAZELCAST_HOME\"" >> $TMP_ENV_FILE
echo "HAZELCAST_MC_HOME=\"$HAZELCAST_MC_HOME\"" >> $TMP_ENV_FILE
echo "JET_HOME=\"$JET_HOME\"" >> $TMP_ENV_FILE
echo "JET_MC_HOME=\"$JET_MC_HOME\"" >> $TMP_ENV_FILE
echo "SNAPPYDATA_HOME=\"$SNAPPYDATA_HOME\"" >> $TMP_ENV_FILE
echo "SPARK_HOME=\"$SPARK_HOME\"" >> $TMP_ENV_FILE
echo "KAFKA_HOME=\"$KAFKA_HOME\"" >> $TMP_ENV_FILE
echo "HADOOP_HOME=\"$HADOOP_HOME\"" >> $TMP_ENV_FILE
echo "COHERENCE_HOME=\"$COHERENCE_HOME\"" >> $TMP_ENV_FILE

# Initialize the product RWE environment.
$BASE_DIR/${PRODUCT}/bin_sh/.init_padogrid -env $TMP_ENV_FILE
if [ -f $TMP_ENV_FILE ]; then
   rm $TMP_ENV_FILE
fi

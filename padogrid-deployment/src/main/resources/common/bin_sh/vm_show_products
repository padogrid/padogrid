#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020-2022 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

# 
# Determine the PadoGrid environment base path. Default is "$HOME/Padogrid".
#
if [ "$PADOGRID_WORKSPACES_HOME" != "" ]; then
   PADOGRID_ENV_BASE_PATH="$(dirname $(dirname $PADOGRID_WORKSPACES_HOME))"
elif [ "$PADOGRID_ENV_BASE_PATH" == "" ]; then
   if [ "$PADOGRID_HOME" == "" ]; then
      PADOGRID_ENV_BASE_PATH="$HOME/Padogrid"
   fi
fi

__options()
{
   echo "-active -raw -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Display installed product versions in all VMs

SYNOPSIS
   $EXECUTABLE [-active] [-raw] [-?]

DESCRIPTION
   Displays installed product versions in all VMs with the current workspace versions
   highlighted.

OPTIONS
   -active
             If specified, then displays only the active products.

   -raw
             If specified, then returns the raw form of installed product information on
             this host that can be parsed accordingly by the caller. This option returns
             product information of only one (1) VM, i.e., this VM.

EOF
cat <<EOF
SEE ALSO
EOF
   printSeeAlsoList "vm_*" $EXECUTABLE
   exit
fi

# If the -vm option is specified then it overrides all other options
if [ "$VM_SPECIFIED" == "true" ]; then
   if [ "$VM_HOSTS_ARG" != "" ] && [ "${VM_HOSTS_ARG:0:1}" != "-" ]; then
      VM_HOSTS=$VM_HOSTS_ARG
   else
      echo "----------------------------------------------------------------"
      echo "WORKSPACE: $PADOGRID_WORKSPACE"
      echo >&2 "ERROR: Invalid value for -vm [$VM_HOSTS_ARG]. Command aborted."
      echo "----------------------------------------------------------------"
      exit 1
   fi
else
   # The -cluster option overrides VM_HOSTS
   if [ "$CLUSTER_SPECIFIED" == "true" ]; then
      if [ "`isClusterExist "$CLUSTER"`" == "false" ]; then 
         echo "----------------------------------------------------------------"
         echo "WORKSPACE: $PADOGRID_WORKSPACE"
         echo >&2 "ERROR: Cluster does not exist [$CLUSTER]. Command aborted."
         echo "----------------------------------------------------------------"
         exit 1
      fi
      VM_ENABLED=`getClusterProperty "vm.enabled" "false"`
      if [ "$VM_ENABLED" == "false" ]; then
         echo "----------------------------------------------------------------"
         echo "WORKSPACE: $PADOGRID_WORKSPACE"
         echo >&2 "ERROR: Not a VM cluster [$CLUSTER]. To enable VMs, set the 'vm.enabled' property"
         echo >&2 "       in the 'etc/cluster.properties' file."
         echo "----------------------------------------------------------------"
         exit 1
      fi
      VM_HOSTS=`getClusterProperty "vm.hosts"`
      if [ "$VM_HOSTS" == "" ]; then
         if [ "$VM_HOSTS" == "" ]; then
            echo "----------------------------------------------------------------"
            echo "WORKSPACE: $PADOGRID_WORKSPACE"
            echo >&2 "    ERROR: The 'vm.hosts' property is not set in the 'etc/cluster.properties' file."
            echo >&2 "           file. Command aborted."
            echo "----------------------------------------------------------------"
            exit 1
         fi
      fi
   fi
fi

WORKSPACE_NAME=$(basename "$PADOGRID_WORKSPACE")

VM_USER=`getVmUser`
__VM_PRIVATE_KEY_FILE=`getClusterProperty "vm.privateKeyFile"`
KEY_FILE=$__VM_PRIVATE_KEY_FILE
if [ "$KEY_FILE" == "" ]; then
   # Set the first private key file found in the workspace directory if exists
   if [ "$VM_PRIVATE_KEY_FILE" == "" ]; then
      if [ -f $PADOGRID_WORKSPACE/*.pem ]; then
         for i in $PADOGRID_WORKSPACE/*.pem; do
            KEY_FILE=$i
            break
         done
      elif [ -f $PADOGRID_WORKSPACE/*.key ]; then
         for i in $PADOGRID_WORKSPACE/*.key; do
            KEY_FILE=$i
            break
         done
      fi
   fi
fi
if [ "$KEY_FILE" == "" ]; then 
   KEY_FILE="$VM_PRIVATE_KEY_FILE"
fi
# Replace '~' with the VM home path
KEY_FILE=$(echo $KEY_FILE | sed "s|\~|$HOME|")
VM_KEY=""
if [ "$KEY_FILE" != "" ]; then 
   if [ ! -f "$KEY_FILE" ]; then
      echo -e >&2 "${CError}ERROR:${CNone} Specified private key does not exist [$KEY_FILE]."
      echo >&2 "       Command aborted."
      exit 1
   fi
   VM_KEY="-i $KEY_FILE"
fi

VM_KEY=""
if [ "$KEY_FILE" != "" ]; then 
   if [ ! -f "$KEY_FILE" ]; then
      echo -e >&2 "${CError}ERROR:${CNone} Specified private key does not exist [$KEY_FILE]."
      echo >&2 "       Command aborted."
      exit 1
   fi
   VM_KEY="-i $KEY_FILE"
fi

# Fail fast: Exit if any of the hosts is not reachable
#for VM_HOST in $__VM_HOSTS; do
#   REPLY=$(ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT -o PasswordAuthentication=no "echo hello" 2>&1)
#   EXIT_CODE=$?
#   if [ "$EXIT_CODE" != "0" ]; then
#      echo -e "${CError}ERROR:${CNone} $VM_HOST - $REPLY"
#      echo "       Command aborted."
#      exit 1
#   fi
#done

# Show each VM
if [ "$RAW_SPECIFIED" != "true" ] && [ "$REMOTE_SPECIFIED" != "true" ]; then
   if [ "$ACTIVE_SPECIFIED" == "true" ]; then
      COMMAND="vm_show_products -remote -active"
   else
      COMMAND="vm_show_products -remote"
   fi
   if [ "$(isVmPrivateHostReachable "$VM_USER" "$VM_KEY")" == "true" ]; then
      # If private hosts are reachable then execute from here.
      # Replace , with space
      __VM_HOSTS=$(echo "$VM_HOSTS" | sed "s/,/ /g")

      for VM_HOST in $__VM_HOSTS; do
         vm_products=$(ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$COMMAND")
         total=0
         for i in $vm_products; do
            if [ "$i" == ";" ]; then
              let total=total+1
            fi
         done
         delimiter_count=0
         echo "$VM_HOST"
         for i in $vm_products; do
            if [ "$i" == ";" ]; then
               let delimiter_count=delimiter_count+1
               if [ $delimiter_count -eq $total ]; then
                  echo -e "$TLel $line"
               else
                  echo -e "$TTee $line"
               fi
               line=""
            else
               if [[ "$i" == "_"* ]]; then
                  line="$line ${CGo}${i:1}${CNone}"
               else
                  line="$line $i"
               fi
            fi
         done
      done
   else
      VM_PUBLIC_HOSTS=`getClusterProperty "vm.public.hosts"`
      if [ "$VM_PUBLIC_HOSTS" == "" ]; then
         echo -e >&2 "${CLightRed}ERROR:${CNone} Unable to connect to VM hosts. Please set 'vm.public.hosts' in 'etc/cluster.properties."
         echo >&2 "       Command aborted."
         exit 1
      fi

      # If private hosts are not reachable then use a public host as a proxy to execute this command.
      #RWE_NAME=$(basename $PADOGRID_WORKSPACES_HOME)
      #WORKSPACE=$(basename $PADOGRID_WORKSPACE)
      RWE_NAME=$(basename $VM_PADOGRID_WORKSPACES_HOME)
      WORKSPACE=$(basename $VM_PADOGRID_WORKSPACE)

      # Replace , with space
      __VM_HOSTS=$(echo "$VM_PUBLIC_HOSTS" | sed "s/,/ /g")
      for VM_HOST in $__VM_HOSTS; do
         ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "switch_rwe $RWE_NAME/$WORKSPACE && $COMMAND_PREFIX $VM_PADOGRID_HOME/$PRODUCT/bin_sh/$EXECUTABLE -cluster $CLUSTER $@"
         break;
      done
   fi
   exit 0
fi

#
# Prints the specified product information a raw form that can be parsed.
#
# @product                Product name
# @param versions         A space separated list of product versions
# @param currentVersion   Current (active) version
# @param isCurrentVersion "true" to print only the current version
#
function printProductVersions
{
   local PRODUCT="$1"
   local VERSIONS="$2"
   local CURRENT_VERSION="$3" 
   local IS_CURRENT_VERSION="$4"

   if [ "$VERSIONS" == "" ]; then
      return 0
   fi
   if [ "$IS_CURRENT_VERSION" == "true" ]; then
      if [ "$CURRENT_VERSION" == "" ]; then
         return 0
      else
         echo "$PRODUCT $CURRENT_VERSION ;"
         return 0
      fi
   fi

   local LINE="$PRODUCT"
   for i in $VERSIONS; do
      if [ "$i" == "$CURRENT_VERSION" ]; then
         LINE="$LINE _$i"
      else
         LINE="$LINE $i"
      fi
   done
   echo "$LINE ;"
}

if [ "$(isVmPrivateHostReachable "$VM_USER" "$VM_KEY")" == "true" ]; then
   # If private hosts are reachable then execute from here.
   # Replace , with space
   __VM_HOSTS=$(echo "$VM_HOSTS" | sed "s/,/ /g")
else
   # If private hosts are not reachable then sync the first public host and then
   # use that public host as a proxy to execute this command.

   VM_PUBLIC_HOSTS=`getClusterProperty "vm.public.hosts"`
   if [ "$VM_PUBLIC_HOSTS" == "" ]; then
      echo -e >&2 "${CError}ERROR:${CNone} Unable to connect to VM hosts. Please set 'vm.public.hosts' in 'etc/cluster.properties."
      echo "       Command aborted."
      exit 1
   fi

   # Sync the first public host
   VM_HOST=$(echo "$VM_PUBLIC_HOSTS" | sed "s/,.*//g")
   __VM_HOSTS=$VM_HOST

   # Use the public host as a proxy to sync the rest of hosts
   #RWE_NAME=$(basename $PADOGRID_WORKSPACES_HOME)
   #WORKSPACE=$(basename $PADOGRID_WORKSPACE)
   RWE_NAME=$(basename $VM_PADOGRID_WORKSPACES_HOME)
   WORKSPACE=$(basename $VM_PADOGRID_WORKSPACE)
   ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "switch_rwe $RWE_NAME/$WORKSPACE && $COMMAND_PREFIX $VM_PADOGRID_HOME/$PRODUCT/bin_sh/$EXECUTABLE -cluster $CLUSTER $@"

   # Clean tmp files and exit
   cleanExit "$EXECUTABLE" "vm" "true"
   exit
fi

determineInstalledProductVersions
getCurrentProductVersions

printProductVersions "padogrid" "$PADOGRID_VERSIONS" "$PADOGRID_VERSION" "$ACTIVE_SPECIFIED"
printProductVersions "pado" "$PADO_VERSIONS" "$__PADO_VERSION" "$ACTIVE_SPECIFIED"
printProductVersions "padodesktop" "$PADODESKTOP_VERSIONS" "$__PADODESKTOP_VERSION" "$ACTIVE_SPECIFIED"
printProductVersions "padoweb" "$PADOWEB_VERSIONS" "$__PADOWEB_VERSION" "$ACTIVE_SPECIFIED"
printProductVersions "coherence" "$COHERENCE_VERSIONS" "$__COHERENCE_VERSION" "$ACTIVE_SPECIFIED"
printProductVersions "derby" "$DERBY_VERSIONS" "$__DERBY_VERSION" "$ACTIVE_SPECIFIED"
printProductVersions "gemFire" "$GEMFIRE_VERSIONS" "$__GEMFIRE_VERSION" "$ACTIVE_SPECIFIED"
printProductVersions "geode" "$GEODE_VERSIONS" "$__GEODE_VERSION" "$ACTIVE_SPECIFIED"
printProductVersions "grafana" "$GRAFANA_VERSIONS" "$__GRAFANA_VERSION" "$ACTIVE_SPECIFIED"
printProductVersions "hadoop" "$HADOOP_VERSIONS" "$__HADOOP_VERSION" "$ACTIVE_SPECIFIED"
printProductVersions "hazelcast-desktop" "$HAZELCAST_DESKTOP_VERSIONS" "$__HAZELCAST_DESKTOP_VERSION" "$ACTIVE_SPECIFIED"
printProductVersions "hazelcast-enterprise" "$HAZELCAST_ENTERPRISE_VERSIONS" "$__HAZELCAST_ENTERPRISE_VERSION" "$ACTIVE_SPECIFIED"
printProductVersions "hazelcast-oss" "$HAZELCAST_OSS_VERSIONS" "$__HAZELCAST_OSS_VERSION" "$ACTIVE_SPECIFIED"
printProductVersions "hazelcast-management-center" "$HAZELCAST_MANAGEMENT_CENTER_VERSIONS" "$__HAZELCAST_MC_VERSION" "$ACTIVE_SPECIFIED"
printProductVersions "java" "$JAVA_VERSIONS" "$__JAVA_VERSION" "$ACTIVE_SPECIFIED"
printProductVersions "jet-enterprise" "$JET_ENTERPRISE_VERSIONS" "$__JET_ENTERPRISE_VERSION" "$ACTIVE_SPECIFIED"
printProductVersions "jet-oss" "$JET_OSS_VERSIONS" "$__JET_OSS_VERSION" "$ACTIVE_SPECIFIED"
printProductVersions "jet-management-center" "$JET_MANAGEMENT_CENTER_VERSIONS" "$__JET_MC_VERSION" "$ACTIVE_SPECIFIED"
printProductVersions "kafka" "$KAFKA_VERSIONS" "$__KAFKA_VERSION" "$ACTIVE_SPECIFIED"
printProductVersions "kafka-confluent-platform" "$CONFLUENT_VERSIONS" "$__CONFLUENT_VERSION" "$ACTIVE_SPECIFIED"
printProductVersions "prometheus" "$PROMETHEUS_VERSIONS" "$__PROMETHEUS_VERSION" "$ACTIVE_SPECIFIED"
printProductVersions "redis" "$REDIS_VERSIONS" "$__REDIS_VERSION" "$ACTIVE_SPECIFIED"
printProductVersions "snappyData" "$SNAPPYDATA_VERSIONS" "$__SNAPPYDATA_VERSION" "$ACTIVE_SPECIFIED"
printProductVersions "spark" "$SPARK_VERSIONS" "$__SPARK_VERSION" "$ACTIVE_SPECIFIED"

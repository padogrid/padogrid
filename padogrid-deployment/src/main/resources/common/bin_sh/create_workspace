#!/usr/bin/env bash 

# ========================================================================
# Copyright (c) 2020-2022 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-name -cluster -product -java -vm -vm-java -vm-padogrid -vm-user -vm-key -headless -quiet -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Create a padogrid workspace environment

SYNOPSIS
   $EXECUTABLE [-name workspace_name] 
               [-cluster default_cluster]
               [-java local_JAVA_HOME]
               [-product local_product_home_path]
               [-vm-padogrid vm_padogrid_base_path]
               [-vm-java vm_JAVA_HOME]
               [-vm [comma_separated_host_names]]
               [-vm-user vm_user_name]
               [-vm-key private_key_file_path]
               [-headless]
               [-quiet] [-?]

DESCRIPTION
   Creates a padogrid workspace environment where you can run padogrid
   and your applications. By default, workspaces are created locally to run the
   specified product clusters. To run clusters remotely, you must specify the
   '-vm' option to create a VM workspace. With a VM workspace, you can control
   and manage VMs from your local environment which can be completely synchronized
   with all the VMs by executing the 'vm_sync' command.

   This command is by default interactive. If you want to suppress the interactive mode,
   then specify '-quiet' option along with the other options to configure the workspace.

   Once the workspace has been created, you can modify the configurations set by 
   this command in the workspace's 'setenv.sh' and 'vmenv.sh' files. The 'setenv.sh'
   file contains local workspace settings and the 'vmenv.sh' file contains remote
   VM workspace settings.

OPTIONS
   -name workspace_name
             Workspace name. All of your workspace changes will be stored under
             this name. Use this option if the workspaces have been intialized
             by executing 'create_rwe'.

   -cluster default_cluster
              Default cluster name.

   -java local_JAVA_HOME_path
              Local Java home path.
EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
              Default: $JAVA_HOME
EOF
fi
cat <<EOF

   -product local_product_home_path
              Local home path of Geode, GemFire, Hazelcast, Jet, Coherence, or Spark.

   -vm-padogrid vm_padogrid_base_path
              VM PadoGrid base path where PadoGrid is deployed. This is the root directory of
              PadoGrid where products and workspaces are stored. Default: ~/Padogrid

   -vm-java vm_JAVA_HOME
              VM JAVA_HOME path. If the VMs do not have Java installed in this path, then
              you can install it by executing 'vm_install' after the workspace has locally
              been created.

   -vm [comma_separated_host_names]
              A comma separated list of VM host names (or IP addresses). If the list contains
              spaces then enclosed it in quotes. Note that this option enables VMs. If it is
              not specified then all other '-vm-' options are still recorded but the workspace
              will not be VM enabled and all clusters will be locally created instead. If this
              option is specified alone without a list of host names, then the workspace is
              still VM enabled. The VM hosts can be modified or entered in the workspace
              'vmenv.sh' file after the workspace has been created.

   -vm-user vm_user_name
              VM user name. All VMs must be accessible via ssh with this user name.

   -vm-key private_key_file_path
              Local private key file path. Some VMs such as AWS EC2 VMs require the '.pem'
              private key file. If the private key file is required then specify the full path
              to the private key file in your local file system. It will be copied to the
              workspace and deployed to the VMs when you execute 'vm_sync' later.

   -headless
              If specified, then it creates the specified workspace without document
              artifiacts, i.e., README.md, images, etc.

   -quiet
              Quiet mode. Supresses the interactive prompts. The options not specified will
              set to their default values. You can change the option values in the workspace's
              'setenv.sh' and 'vmenv.sh' files as needed after the workspace is created.

DEFAULT
   $EXECUTABLE

SEE ALSO
EOF
   printSeeAlsoList "*workspace*" $EXECUTABLE
   exit
fi

if [ "$PADOGRID_WORKSPACES_HOME" == "" ] || [ ! -d $PADOGRID_WORKSPACES_HOME ]; then
   if [ "$WORKSPACE_DIR" == "" ]; then
      echo >&2 "----------------------------------------------------------------"
      echo >&2 "ERROR: Workspace directory path not specified. Command aborted."
      echo >&2 "----------------------------------------------------------------"
      exit 1
   fi
fi

# TODO: It seems .argenv.sh source-in of ENV_ARG has no effect due to recurrent source-ins.
#       For now, source in again.
if [ "$ENV_ARG" != "" ]; then
   . $ENV_ARG
fi

# 
# Determine the PadoGrid environment base path. Default is "$HOME/Padogrid".
#
if [ "$PADOGRID_WORKSPACES_HOME" != "" ]; then
   PADOGRID_ENV_BASE_PATH="$(dirname $(dirname $PADOGRID_WORKSPACES_HOME))"
elif [ "$PADOGRID_ENV_BASE_PATH" == "" ]; then
   if [ "$PADOGRID_HOME" == "" ]; then
      PADOGRID_ENV_BASE_PATH="$HOME/Padogrid"
   fi
fi

if [ "$JAVA_HOME_ARG" == "" ]; then
   JAVA_HOME_ARG="$JAVA_HOME"
fi

# Default cluster
if [ $CLUSTER_SPECIFIED == "false" ]; then
   CLUSTER=""
fi

PARENT_DIR="$(dirname "$BASE_DIR")"

# VM
VM_ENABLED=$VM_SPECIFIED

if [ "$QUIET" == "true" ]; then
   WORKSPACE=$NAME_ARG
   if [ "$WORKSPACE" == "" ]; then
      echo >&2 "ERROR: Workspace name not specified. Use the '-name' option to set the workspace name."
      echo >&2 "       Command aborted."
      exit 1
   fi

   WORKSPACE_DIR=$PADOGRID_WORKSPACES_HOME/$WORKSPACE
   if [ -d "$WORKSPACE_DIR" ]; then
      echo >&2 "ERROR: Workspace already exists [$WORKSPACE]. Command aborted."
      exit 1
   fi
   if [ -f "$WORKSPACE_DIR" ]; then
      echo >&2 "ERROR: A file with the sanem workspace name exists in the RWE parent directory."
      echo >&2 "       [$WORKSPACE_DIR]"
      echo >&2 "       Please remove the file and try again. Command aborted."
      exit 1
   fi

   if [ "$PRODUCT_HOME_ARG" != "" ] && [ ! -d "$PRODUCT_HOME_ARG" ]; then
      echo >&2 "ERROR: The specified product home path does not exists [$PRODUCT_HOME_ARG]."
      echo >&2 "       Command aborted."
      exit 1
   fi
   if [ "$JAVA_HOME_ARG" != "" ]; then
      if [ ! -d "$JAVA_HOME_ARG" ]; then
         echo >&2 "ERROR: The specified Java home path does not exists [$JAVA_HOME_ARG]."
         echo >&2 "       Command aborted."
         exit 1
      fi
   fi
   if [ "$VM_PRIVATE_KEY_FILE_ARG" != "" ] && [ ! -f $VM_PRIVATE_KEY_FILE_ARG ]; then
      echo >&2 "ERROR: The specified private key file does not exists [$VM_PRIVATE_KEY_FILE_ARG]."
      echo >&2 "       Command aborted."
      exit 1
   fi

   # Set PADOGRID_HOME - required when create_rwe is executed.
   PADOGRID_HOME="$(dirname "$BASE_DIR")"

   JAVA_HOME="$JAVA_HOME_ARG"
   PRODUCT_HOME="$PRODUCT_HOME_ARG"
   WORKSPACE="$NAME_ARG"

   determineProduct

   VM_JAVA_HOME="$VM_JAVA_HOME_ARG"
   VM_PADOGRID_ENV_BASE_PATH=$VM_PADOGRID_BASE_ARG
   VM_PADOGRID_HOME=$VM_PADOGRID_HOME_ARG
   VM_PADOGRID_WORKSPACES_HOME=$VM_PADOGRID_WORKSPACES_HOME_ARG
   VM_HOSTS="$VM_HOSTS_ARG"
   # Remove all spaces from VM_HOSTS
   VM_HOSTS=$(echo "$VM_HOSTS" | sed "s/ //g")
   VM_USER=$VM_USER_ARG
   VM_PRIVATE_KEY_FILE=$VM_PRIVATE_KEY_FILE_ARG

   if [ "$VM_PADOGRID_ENV_BASE_PATH" == "" ]; then
      VM_PADOGRID_ENV_BASE_PATH='~/Padogrid'
   fi
   if [ "$VM_JAVA_HOME" == "" ]; then
      JAVA_DIR_NAME=$(basename $JAVA_HOME)
      VM_JAVA_HOME="$VM_PADOGRID_ENV_BASE_PATH/products/$JAVA_DIR_NAME"
   fi
   if [ "$VM_PADOGRID_HOME" == "" ]; then
      VM_PADOGRID_HOME="\$VM_PADOGRID_ENV_BASE_PATH/products/padogrid_$PADOGRID_VERSION"
   fi
   if [ "$VM_PADOGRID_WORKSPACES_HOME" == "" ]; then
      RWE=$(basename $PADOGRID_WORKSPACES_HOME)
      VM_PADOGRID_WORKSPACES_HOME="\$VM_PADOGRID_ENV_BASE_PATH/workspaces/$RWE"
   fi
   VM_PADOGRID_WORKSPACE=$VM_PADOGRID_WORKSPACES_HOME/$WORKSPACE

   echo ""
   echo "You have entered the following."
   echo "                     JAVA_HOME: $JAVA_HOME"
   echo "                  PRODUCT_HOME: $PRODUCT_HOME"
   echo "            PADOGRID_WORKSPACE: $WORKSPACE_DIR"
   echo "               Default Cluster: $CLUSTER"
   echo "                    VM_ENABLED: $VM_ENABLED"
   if [ "$VM_ENABLED" == "true" ]; then
   echo "     VM_PADOGRID_ENV_BASE_PATH: $VM_PADOGRID_ENV_BASE_PATH"
   echo "                  VM_JAVA_HOME: $VM_JAVA_HOME"
   echo "              VM_PADOGRID_HOME: $VM_PADOGRID_HOME"
   echo "   VM_PADOGRID_WORKSPACES_HOME: $VM_PADOGRID_WORKSPACES_HOME"
   echo "         VM_PADOGRID_WORKSPACE: $VM_PADOGRID_WORKSPACE"
   echo "                      VM_HOSTS: $VM_HOSTS"
   echo "                       VM_USER: $VM_USER"
   echo "           VM_PRIVATE_KEY_FILE: $VM_PRIVATE_KEY_FILE"
   fi
else
   echo ""
   echo "Please answer the prompts that appear below. If you are not able to complete"
   echo "the prompts at this time then use the '-quiet' option to bypass the prompts."
   echo "You can complete the requested values later in the generated 'setenv.sh' file"
   echo "You can abort this command at any time by entering 'Ctrl-C'."
   echo ""
   __JAVA_HOME=$JAVA_HOME_ARG
   __PRODUCT_HOME=$PRODUCT_HOME_ARG
   if [ "$__PRODUCT_HOME" == "" ]; then
      __PRODUCT_HOME="$PRODUCT_HOME"
   fi
   __WORKSPACE=$NAME_ARG
   VM_JAVA_HOME="$VM_JAVA_HOME_ARG"
   VM_PADOGRID_ENV_BASE_PATH="$PADOGRID_BASE_ARG"
   VM_PADOGRID_HOME="$VM_PADOGRID_HOME_ARG"
   VM_PADOGRID_WORKSPACES_HOME="$VM_WORKSPACES_HOME_ARG"
   VM_PADOGRID_WORKSPACE="$VM_WORKSPACE_ARG"
   VM_HOSTS="$VM_HOSTS_ARG"
   VM_USER=""
   VM_PRIVATE_KEY_FILE=""
   REDO=true
   while [ "$REDO" == "true" ]; do

      # JAVA_HOME
      __REDO=true
      while [ "$__REDO" == "true" ]; do

         echo "Enter Java home path. Leave blank to skip."
         if [[ $OS_NAME == CYGWIN* ]]; then
	    echo "Enter only Unix absolute path. Windows path not allowed."
         fi
         echo "[$__JAVA_HOME]:"

         read -p "" INPUT
         # trim string
         INPUT=`echo "$INPUT" | xargs`
         if [ "$INPUT" != "" ]; then
            __JAVA_HOME="$INPUT"
         fi
         if [[ $OS_NAME == CYGWIN* ]]; then
            __JAVA_HOME=$(cygpath -au "$__JAVA_HOME")
         fi
         if [ "$__JAVA_HOME" == "" ]; then
            echo "Java home path not specified and will not be set."
            __REDO=false
         elif [ ! -d "$__JAVA_HOME" ]; then
            echo "Directory does not exist or not a directory."
            __JAVA_HOME=$JAVA_HOME_ARG
            __REDO=true
         else
            __REDO=false
         fi
      done
      JAVA_HOME=$__JAVA_HOME

      # PRODUCT_HOME
      __REDO=true
      while [ "$__REDO" == "true" ]; do

         echo "Enter the local product home directory path. Choose one"
         echo "from the defaults listed below or enter another."
         if [[ $OS_NAME == CYGWIN* ]]; then
            echo "Enter only Unix absoulte path. Windows path not allowed."
         fi
         if [ "$HAZELCAST_HOME" != "" ]; then
            echo "   $HAZELCAST_HOME"
         fi
         if [ "$JET_HOME" != "" ]; then
            echo "   $JET_HOME"
         fi
         if [ "$GEODE_HOME" != "" ]; then
            echo "   $GEODE_HOME"
         fi 
         if [ "$GEMFIRE_HOME" != "" ]; then
            echo "   $GEMFIRE_HOME"
         fi 
         if [ "$SNAPPYDATA_HOME" != "" ]; then
            echo "   $SNAPPYDATA_HOME"
         fi
         if [ "$COHERENCE_HOME" != "" ]; then
            echo "   $COHERENCE_HOME"
         fi
         if [ "$REDIS_HOME" != "" ]; then
            echo "   $REDIS_HOME"
         fi
         if [ "$SPARK_HOME" != "" ]; then
            echo "   $SPARK_HOME"
         fi
         if [ "$KAFKA_HOME" != "" ]; then
            echo "   $KAFKA_HOME"
         fi
         if [ "$HADOOP_HOME" != "" ]; then
            echo "   $HADOOP_HOME"
         fi
         echo "[$__PRODUCT_HOME]:"

         read -p "" INPUT
         # trim string
         INPUT=`echo "$INPUT" | xargs`
         if [ "$INPUT" != "" ]; then
            __PRODUCT_HOME=$INPUT
         fi
         if [[ $OS_NAME == CYGWIN* ]]; then
            __PRODUCT_HOME="$(cygpath -au $__PRODUCT_HOME)"
         fi
         if [ ! -d "$__PRODUCT_HOME" ]; then
            echo "Directory does not exist or not a directory. Do you want to skip?"
            __REDO=true
            INNER_LOOP=true
            while [ "$INNER_LOOP" == "true" ]; do
               read -p "Enter 'c' to skip this question and continue, 'r' to re-enter, 'q' to quit: " INPUT
               case $INPUT in
                  [Cc]* ) __REDO=false; INNER_LOOP=false; __PRODUCT_HOME="";;
                  [Rr]* ) __REDO=true; INNER_LOOP=false; __PRODUCT_HOME="$PRODUCT_HOME_ARG";;
                  [Qq]* ) echo "Command Aborted."; INNER_LOOP=false; exit;;
               esac
            done
         else
            __REDO=false
         fi
      done
      PRODUCT_HOME="$__PRODUCT_HOME"
      determineProduct

      # WORKSPACE
      __REDO=true
      while [ "$__REDO" == "true" ]; do

         echo "Enter workspace name."
         echo "[$__WORKSPACE]:"

         read -p "" INPUT
         # trim string
         INPUT=`echo "$INPUT" | xargs`
         if [ "$INPUT" != "" ]; then
            __WORKSPACE="$INPUT"
         fi
         __WORKSPACE_DIR=$PADOGRID_WORKSPACES_HOME/$__WORKSPACE
         if [ -d "$__WORKSPACE_DIR" ]; then
            echo "Workspace already exists. Please enter another workspace name."
            __WORKSPACE=$NAME_ARG
            __REDO=true
         else
            __REDO=false
         fi
      done
      WORKSPACE=$__WORKSPACE
      WORKSPACE_DIR=$PADOGRID_WORKSPACES_HOME/$WORKSPACE

      # CLUSTER
      echo "Enter default cluster name."
      echo "[$CLUSTER]:"
      read -p "" INPUT
      # trim string
      INPUT=`echo "$INPUT" | xargs`
      if [ "$INPUT" != "" ]; then
         CLUSTER=$INPUT
      fi

      # VM
      INNER_LOOP=true
      while [ "$INNER_LOOP" == "true" ]; do
         read -p "Enable VM? Enter 'true' or 'false' [$VM_ENABLED]: " INPUT 
         # trim string
         INPUT=`echo "$INPUT" | xargs`
         if [ "$INPUT" == "" ]; then
            INPUT=$VM_ENABLED
         fi
         if [ "$INPUT" == "true" ] || [ "$INPUT" == "false" ]; then
            VM_ENABLED=$INPUT
            REDO=false;
            INNER_LOOP=false;
         fi
      done

      if [ "$VM_ENABLED" == "true" ]; then
         # VM_PADOGRID_ENV_BASE_PATH
         if [ "$VM_PADOGRID_ENV_BASE_PATH" == "" ]; then
            VM_PADOGRID_ENV_BASE_PATH=$PADOGRID_BASE
         fi
         if [ "$VM_PADOGRID_ENV_BASE_PATH" == "" ]; then
            VM_PADOGRID_ENV_BASE_PATH='~/Padogrid'
         fi
         echo "Enter VM padogrid base path. '~' represents the user home directory."
         echo "[$VM_PADOGRID_ENV_BASE_PATH]:"
         read -p "" INPUT 
         # trim string
         INPUT=`echo "$INPUT" | xargs`
         if [ "$INPUT" != "" ]; then
            VM_PADOGRID_ENV_BASE_PATH=$INPUT
         fi

         if [ "$VM_JAVA_HOME" == "" ]; then
            JAVA_DIR_NAME="$(basename $JAVA_HOME)"
            VM_JAVA_HOME="$VM_PADOGRID_ENV_BASE_PATH/products/$JAVA_DIR_NAME"
         fi
         # VM_JAVA_HOME
         echo "Enter VM JDK home path."
         echo "[$VM_JAVA_HOME]:"
         read -p "" INPUT 
         # trim string
         INPUT=`echo "$INPUT" | xargs`
         if [ "$INPUT" != "" ]; then
            VM_JAVA_HOME=$INPUT
         fi

         # VM_HOSTS
         echo "Enter VM host names or IP addresses separated by comma."
         echo "[$VM_HOSTS]:"
         read -p "" INPUT
         # trim string
         INPUT=`echo "$INPUT" | xargs`
         if [ "$INPUT" != "" ]; then
            VM_HOSTS=$INPUT
         fi
         # Remove spaces
         VM_HOSTS=${VM_HOSTS//[[:space:]]/}

         # VM_USER
         echo "Enter VM user name."
         read -p "[$VM_USER]: " INPUT
         # trim string
         INPUT=`echo "$INPUT" | xargs`
         if [ "$INPUT" != "" ]; then
            VM_USER=$INPUT
         fi

         # VM_PRIVATE_KEY_FILE
         __REDO=true
         echo "Enter VM SSH private key path. If you don't have the key file (.pem) then"
         echo "leave it blank for now. You can place the file in the workspace directory or"
         echo "set the path in the workspace 'setenv.sh' file later."
         while [ "$__REDO" == "true" ]; do

            if [[ $OS_NAME == CYGWIN* ]]; then
	       echo "Enter only Unix absolute path. Windows path not allowed."
            fi
            echo "[$__VM_PRIVATE_KEY_FILE]:"
            read -p "" INPUT

            # trim string
            INPUT=`echo "$INPUT" | xargs`
            if [ "$INPUT" != "" ]; then
               __VM_PRIVATE_KEY_FILE="$INPUT"
            fi
            if [[ $OS_NAME == CYGWIN* ]]; then
               __VM_PRIVATE_KEY_FILE=$(cygpath -au "$__VM_PRIVATE_KEY_FILE")
            fi
            if [ "$__VM_PRIVATE_KEY_FILE" != "" ] && [ ! -f "$__VM_PRIVATE_KEY_FILE" ]; then
               echo "Invalid file path. The file does not exist."
               __VM_PRIVATE_KEY_FILE=$VM_PRIVATE_KEY_FILE_ARG
               __REDO=true
            else
               __REDO=false
            fi
         done
         VM_PRIVATE_KEY_FILE=$__VM_PRIVATE_KEY_FILE
      else # VM_ENABLED==false
         VM_HOSTS=""
         VM_USER=""
         VM_PRIVATE_KEY_FILE=""
      fi
      if [ "$VM_PADOGRID_ENV_BASE_PATH" == "" ]; then
         VM_PADOGRID_ENV_BASE_PATH='~/Padogrid'
      fi
      if [ "$VM_JAVA_HOME" == "" ]; then
         JAVA_DIR_NAME=$(basename $JAVA_HOME)
         VM_JAVA_HOME="\$VM_PADOGRID_ENV_BASE_PATH/products/$JAVA_DIR_NAME"
      fi
      if [ "$VM_PADOGRID_HOME" == "" ]; then
         VM_PADOGRID_HOME="\$VM_PADOGRID_ENV_BASE_PATH/products/padogrid_$PADOGRID_VERSION"
      fi
      if [ "$VM_PADOGRID_WORKSPACES_HOME" == "" ]; then
         RWE=$(basename $PADOGRID_WORKSPACES_HOME)
         VM_PADOGRID_WORKSPACES_HOME="\$VM_PADOGRID_ENV_BASE_PATH/workspaces/$RWE"
      fi
      VM_PADOGRID_WORKSPACE=$VM_PADOGRID_WORKSPACES_HOME/$WORKSPACE

      echo ""
      echo "You have entered the following."
      echo "                     JAVA_HOME: $JAVA_HOME"
      echo "                  PRODUCT_HOME: $PRODUCT_HOME"
      echo "            PADOGRID_WORKSPACE: $WORKSPACE_DIR"
      echo "               Default Cluster: $CLUSTER"
      echo "                    VM_ENABLED: $VM_ENABLED"
      if [ "$VM_ENABLED" == "true" ]; then
      echo "                  VM_JAVA_HOME: $VM_JAVA_HOME"
      echo "              VM_PADOGRID_HOME: $VM_PADOGRID_HOME"
      echo "   VM_PADOGRID_WORKSPACES_HOME: $VM_PADOGRID_WORKSPACES_HOME"
      echo "         VM_PADOGRID_WORKSPACE: $VM_PADOGRID_WORKSPACE"
      echo "                      VM_HOSTS: $VM_HOSTS"
      echo "                       VM_USER: $VM_USER"
      echo "           VM_PRIVATE_KEY_FILE: $VM_PRIVATE_KEY_FILE"
      fi

      REDO=true
      INNER_LOOP=true
      while [ "$INNER_LOOP" == "true" ]; do
         read -p "Enter 'c' to continue, 'r' to re-enter, 'q' to quit: " INPUT
         case $INPUT in
            [Cc]* ) REDO=false; INNER_LOOP=false;;
            [Rr]* ) REDO=true; INNER_LOOP=false;;
            [Qq]* ) echo "Command Aborted."; INNER_LOOP=false; exit;;
         esac
      done
   done
fi

mkdir -p $WORKSPACE_DIR/clusters
mkdir -p $WORKSPACE_DIR/pods
mkdir -p $WORKSPACE_DIR/apps
mkdir -p $WORKSPACE_DIR/lib
mkdir -p $WORKSPACE_DIR/plugins
mkdir -p $WORKSPACE_DIR/bundles
mkdir -p $WORKSPACE_DIR/k8s
mkdir -p $WORKSPACE_DIR/docker

if [ "$VM_PRIVATE_KEY_FILE" != "" ] && [ -f $VM_PRIVATE_KEY_FILE ]; then
   __VM_PRIVATE_FILE_NAME=$(basename "$VM_PRIVATE_KEY_FILE")
   cp "$VM_PRIVATE_KEY_FILE" "$WORKSPACE_DIR/$__VM_PRIVATE_FILE_NAME"
   VM_PRIVATE_KEY_FILE="$WORKSPACE_DIR/$__VM_PRIVATE_FILE_NAME"
   chmod 400 "$VM_PRIVATE_KEY_FILE"
fi

if [ "$PRODUCT" == "" ]; then
   PRODUCT="none"
fi

#
# Create setenv.sh
#
echo "#!/usr/bin/env bash" > $WORKSPACE_DIR/setenv.sh
echo "SCRIPT_DIR=\"\$(cd -P -- \"\$(dirname -- \"\${BASH_SOURCE[0]}\")\" && pwd -P)\"" >> $WORKSPACE_DIR/setenv.sh
echo ". \$SCRIPT_DIR/.addonenv.sh \$@" >> $WORKSPACE_DIR/setenv.sh
echo "" >> $WORKSPACE_DIR/setenv.sh
echo "#" >> $WORKSPACE_DIR/setenv.sh
echo "# The following environment variables are required. Without them, padogrid may not" >> $WORKSPACE_DIR/setenv.sh
echo "# function properly." >> $WORKSPACE_DIR/setenv.sh
echo "" >> $WORKSPACE_DIR/setenv.sh

# Product home paths
echo "#" >> $WORKSPACE_DIR/setenv.sh
echo "# Set product home paths. Unspecified product homes default to the values set" >> $WORKSPACE_DIR/setenv.sh
echo "# in the RWE's setenv.sh file. Note that for non-local pods, they are set" >> $WORKSPACE_DIR/setenv.sh
echo "# separately in the node initialization file, i.e., /vagrant/.nodeenv.sh." >> $WORKSPACE_DIR/setenv.sh
echo "# IN_POD is reserved and used interally by PadoGrid to identify pod clusters." >> $WORKSPACE_DIR/setenv.sh
echo "#" >> $WORKSPACE_DIR/setenv.sh
echo "if [ \"\$IN_POD\" != \"true\" ]; then" >> $WORKSPACE_DIR/setenv.sh
echo "   export PADOGRID_HOME=\"$PARENT_DIR\"" >> $WORKSPACE_DIR/setenv.sh
echo "   #export PADO_HOME=\"\"" >> $WORKSPACE_DIR/setenv.sh
if [ "$JAVA_HOME" != "" ]; then
   echo "   export JAVA_HOME=\"$JAVA_HOME\"" >> $WORKSPACE_DIR/setenv.sh
else
   echo "   #export JAVA_HOME=" >> $WORKSPACE_DIR/setenv.sh
fi

if [ "$PRODUCT" == "geode" ]; then
   if [[ "$PRODUCT_HOME" == *"gemfire"* ]]; then
      echo "   export GEMFIRE_HOME=\"$PRODUCT_HOME\"" >> $WORKSPACE_DIR/setenv.sh
      echo "   #export GEODE_HOME=\"\"" >> $WORKSPACE_DIR/setenv.sh
   else
      echo "   export GEODE_HOME=\"$PRODUCT_HOME\"" >> $WORKSPACE_DIR/setenv.sh
      echo "   #export GEMFIRE_HOME=\"\"" >> $WORKSPACE_DIR/setenv.sh
   fi
elif [ "$PRODUCT" == "coherence" ]; then
   echo "   export COHERENCE_HOME=\"$PRODUCT_HOME\"" >> $WORKSPACE_DIR/setenv.sh
elif [ "$PRODUCT" == "redis" ]; then
   echo "   export REDIS_HOME=\"$PRODUCT_HOME\"" >> $WORKSPACE_DIR/setenv.sh
elif [ "$PRODUCT" == "snappydata" ]; then
   echo "   export SNAPPYDATA_HOME=\"$PRODUCT_HOME\"" >> $WORKSPACE_DIR/setenv.sh
elif [ "$PRODUCT" == "spark" ]; then
   echo "   export SPARK_HOME=\"$PRODUCT_HOME\"" >> $WORKSPACE_DIR/setenv.sh
elif [ "$PRODUCT" == "kafka" ]; then
   echo "   export KAFKA_HOME=\"$PRODUCT_HOME\"" >> $WORKSPACE_DIR/setenv.sh
elif [ "$PRODUCT" == "confluent" ]; then
   echo "   export CONFLUENT_HOME=\"$PRODUCT_HOME\"" >> $WORKSPACE_DIR/setenv.sh
elif [ "$PRODUCT" == "hadoop" ]; then
   echo "   export HADOOP_HOME=\"$PRODUCT_HOME\"" >> $WORKSPACE_DIR/setenv.sh
elif [ "$PRODUCT" == "hazelcast" ]; then
   if [ "$CLUSTER_TYPE" == "jet" ]; then
      echo "   export JET_HOME=\"$PRODUCT_HOME\"" >> $WORKSPACE_DIR/setenv.sh
      if [ "$JET_HOME" != "" ]; then
         if [ -d "$JET_HOME/hazelcast-jet-management-center" ]; then
            echo "   export HAZELCAST_MC_HOME=\"\$JET_HOME/hazelcast-jet-management-center\"" >> $WORKSPACE_DIR/setenv.sh
         else
            echo "   export JET_MC_HOME=\"$JET_MC_HOME\"" >> $WORKSPACE_DIR/setenv.sh
         fi
      else
         echo "   export JET_HOME=\"\"" >> $WORKSPACE_DIR/setenv.sh
         echo "   export JET_MC_HOME=\"$JET_MC_HOME\"" >> $WORKSPACE_DIR/setenv.sh
      fi
      echo "   #export HAZELCAST_HOME=\"\"" >> $WORKSPACE_DIR/setenv.sh
      echo "   #export HAZELCAST_MC_HOME=\"\"" >> $WORKSPACE_DIR/setenv.sh
   else
      echo "   export HAZELCAST_HOME=\"$PRODUCT_HOME\"" >> $WORKSPACE_DIR/setenv.sh
      if [ "$HAZELCAST_HOME" != "" ]; then
         if [ -d "$HAZELCAST_HOME/management-center" ]; then
            echo "   export HAZELCAST_MC_HOME=\"\$HAZELCAST_HOME/management-center\"" >> $WORKSPACE_DIR/setenv.sh
         else
            echo "   export HAZELCAST_MC_HOME=\"$HAZELCAST_MC_HOME\"" >> $WORKSPACE_DIR/setenv.sh
         fi
      else
         echo "   export HAZELCAST_HOME=\"\"" >> $WORKSPACE_DIR/setenv.sh
         echo "   export HAZELCAST_MC_HOME=\"$HAZELCAST_MC_HOME\"" >> $WORKSPACE_DIR/setenv.sh
      fi
      echo "   #export JET_HOME=\"\"" >> $WORKSPACE_DIR/setenv.sh
      echo "   #export JET_MC_HOME=\"\"" >> $WORKSPACE_DIR/setenv.sh
   fi
fi
if [ "$PRODUCT" != "coherence" ]; then
   echo "   #export COHERENCE_HOME=\"\"" >> $WORKSPACE_DIR/setenv.sh
fi
if [ "$PRODUCT" != "redis" ]; then
   echo "   #export REDIS_HOME=\"\"" >> $WORKSPACE_DIR/setenv.sh
fi
if [ "$PRODUCT" != "geode" ]; then
   echo "   #export GEMFIRE_HOME=\"\"" >> $WORKSPACE_DIR/setenv.sh
   echo "   #export GEODE_HOME=\"\"" >> $WORKSPACE_DIR/setenv.sh
fi
if [ "$PRODUCT" != "hazelcast" ]; then
   echo "   #export HAZELCAST_HOME=\"\"" >> $WORKSPACE_DIR/setenv.sh
   echo "   #export HAZELCAST_MC_HOME=\"\"" >> $WORKSPACE_DIR/setenv.sh
   echo "   #export JET_HOME=\"\"" >> $WORKSPACE_DIR/setenv.sh
   echo "   #export JET_MC_HOME=\"\"" >> $WORKSPACE_DIR/setenv.sh
fi
if [ "$PRODUCT" != "snappydata" ]; then
   echo "   #export SNAPPYDATA_HOME=\"\"" >> $WORKSPACE_DIR/setenv.sh
fi
if [ "$PRODUCT" != "spark" ]; then
   echo "   #export SPARK_HOME=\"\"" >> $WORKSPACE_DIR/setenv.sh
fi
if [ "$PRODUCT" != "kafka" ]; then
   echo "   #export KAFKA_HOME=\"\"" >> $WORKSPACE_DIR/setenv.sh
fi
if [ "$PRODUCT" != "confluent" ]; then
   echo "   #export CONFLUENT_HOME=\"\"" >> $WORKSPACE_DIR/setenv.sh
fi
if [ "$PRODUCT" != "hadoop" ]; then
   echo "   #export HADOOP_HOME=\"\"" >> $WORKSPACE_DIR/setenv.sh
fi
echo "fi" >> $WORKSPACE_DIR/setenv.sh
echo "" >> $WORKSPACE_DIR/setenv.sh
echo "#" >> $WORKSPACE_DIR/setenv.sh
echo "# Source in vmenv.sh if exists" >> $WORKSPACE_DIR/setenv.sh
echo "#" >> $WORKSPACE_DIR/setenv.sh
echo "if [ -f \"\$SCRIPT_DIR/vmenv.sh\" ]; then" >> $WORKSPACE_DIR/setenv.sh
echo "   . \"\$SCRIPT_DIR/vmenv.sh\"" >> $WORKSPACE_DIR/setenv.sh
echo "fi" >> $WORKSPACE_DIR/setenv.sh
echo "" >> $WORKSPACE_DIR/setenv.sh
echo "#" >> $WORKSPACE_DIR/setenv.sh
echo "# Add your workspace-wide environment variables in this file." >> $WORKSPACE_DIR/setenv.sh
echo "# The environment variables set in this file are used for all clusters running" >> $WORKSPACE_DIR/setenv.sh
echo "# in this workspace. Cluster specifics should be added in clusters/<cluster>/setenv.sh." >> $WORKSPACE_DIR/setenv.sh
echo "#" >> $WORKSPACE_DIR/setenv.sh
echo "" >> $WORKSPACE_DIR/setenv.sh
echo "# VM private key file path. If not set, then the first .pem file found in the workspace" >> $WORKSPACE_DIR/setenv.sh
echo "# directory is assigned." >> $WORKSPACE_DIR/setenv.sh
echo "VM_PRIVATE_KEY_FILE=\"$VM_PRIVATE_KEY_FILE\"" >> $WORKSPACE_DIR/setenv.sh
echo "" >> $WORKSPACE_DIR/setenv.sh
echo "# Set default pod name. This pod name is used if the '-pod' option is not specified" >> $WORKSPACE_DIR/setenv.sh
echo "# when running padogrid commands" >> $WORKSPACE_DIR/setenv.sh
echo "#export POD=" >> $WORKSPACE_DIR/setenv.sh
echo "" >> $WORKSPACE_DIR/setenv.sh
echo "# Set Java options. Your Java options are added to the padogrid Java options." >> $WORKSPACE_DIR/setenv.sh
echo "#JAVA_OPTS=" >> $WORKSPACE_DIR/setenv.sh
echo "" >> $WORKSPACE_DIR/setenv.sh
if [ "$PRODUCT" == "hazelcast" ]; then
   echo "# Set Management Center Java options, i.e., -Dhazelcast.mc.forceLogoutOnMultipleLogin=true" >> $WORKSPACE_DIR/setenv.sh
   echo "#MC_JAVA_OPTS=" >> $WORKSPACE_DIR/setenv.sh
   echo " " >> $WORKSPACE_DIR/setenv.sh
fi
echo "# Set your class path. This class path is prepended to the padogrid class path." >> $WORKSPACE_DIR/setenv.sh
echo "# The class path is defined in the following order:" >> $WORKSPACE_DIR/setenv.sh
echo "#    \$CLASSPATH" >> $WORKSPACE_DIR/setenv.sh >> $WORKSPACE_DIR/setenv.sh
echo "#    \$PADOGRID_WORKSPACE/clusters/<cluster>/plugins/*" >> $WORKSPACE_DIR/setenv.sh
echo "#    \$PADOGRID_WORKSPACE/clusters/<cluster>/lib/*" >> $WORKSPACE_DIR/setenv.sh
echo "#    \$PADOGRID_WORKSPACE/plugins/*" >> $WORKSPACE_DIR/setenv.sh
echo "#    \$PADOGRID_WORKSPACE/lib/*" >> $WORKSPACE_DIR/setenv.sh
echo "#    \$PADOGRID_HOME/plugins/*" >> $WORKSPACE_DIR/setenv.sh
echo "#    \$PADOGRID_HOME/lib/*" >> $WORKSPACE_DIR/setenv.sh
echo "#    \$PADOGRID_HOME/plugins/*" >> $WORKSPACE_DIR/setenv.sh
echo "#    \$PADOGRID_HOME/lib/*" >> $WORKSPACE_DIR/setenv.sh
echo "#    \$PRODUCT_HOME/<lib>/*" >> $WORKSPACE_DIR/setenv.sh
echo "#CLASSPATH=" >> $WORKSPACE_DIR/setenv.sh

#
# Create vmenv.sh
#
echo "#" > $WORKSPACE_DIR/vmenv.sh
echo "# Remote VM environment variables" >> $WORKSPACE_DIR/vmenv.sh
echo "#" >> $WORKSPACE_DIR/vmenv.sh
echo "# Set true to enable remote commands, false to disable remote commands." >> $WORKSPACE_DIR/vmenv.sh
echo "VM_ENABLED=\"$VM_ENABLED\"" >> $WORKSPACE_DIR/vmenv.sh
echo "# Enter a comma-separated VM host names with NO spaces. If VM_ENABLED is true then" >> $WORKSPACE_DIR/vmenv.sh
echo "# VM_HOSTS must be set, otherwise, VM_HOSTS and other VM_ variables are ignored." >> $WORKSPACE_DIR/vmenv.sh
echo "VM_HOSTS=\"$VM_HOSTS\"" >> $WORKSPACE_DIR/vmenv.sh
echo "# VM user name." >> $WORKSPACE_DIR/vmenv.sh
echo "VM_USER=\"$VM_USER\"" >> $WORKSPACE_DIR/vmenv.sh
echo "" >> $WORKSPACE_DIR/vmenv.sh
echo "# VM hosts may have installation paths dfferent from the local paths." >> $WORKSPACE_DIR/vmenv.sh
echo "" >> $WORKSPACE_DIR/vmenv.sh

echo "# VM PadoGrid base path." >> $WORKSPACE_DIR/vmenv.sh
echo "VM_PADOGRID_ENV_BASE_PATH=\"$VM_PADOGRID_ENV_BASE_PATH\"" >> $WORKSPACE_DIR/vmenv.sh
echo "# VM JDK home directory path." >> $WORKSPACE_DIR/vmenv.sh
echo "VM_JAVA_HOME=\"$VM_JAVA_HOME\"" >> $WORKSPACE_DIR/vmenv.sh
echo "# VM PadoGrid home path." >> $WORKSPACE_DIR/vmenv.sh
echo "VM_PADOGRID_HOME=\"$VM_PADOGRID_HOME\"" >> $WORKSPACE_DIR/vmenv.sh
echo "# VM RWE path." >> $WORKSPACE_DIR/vmenv.sh
echo "VM_PADOGRID_WORKSPACES_HOME=\"$VM_PADOGRID_WORKSPACES_HOME\"" >> $WORKSPACE_DIR/vmenv.sh
echo "# VM Workspace path." >> $WORKSPACE_DIR/vmenv.sh
echo "VM_PADOGRID_WORKSPACE=\"\$VM_PADOGRID_WORKSPACES_HOME/$WORKSPACE\"" >> $WORKSPACE_DIR/vmenv.sh

#
# Copy initenv.sh
#
cp $PADOGRID_HOME/etc/init/initenv.sh $WORKSPACE_DIR

#
# Create .addonenv.sh
#
echo "#!/usr/bin/env bash" > $WORKSPACE_DIR/.addonenv.sh
echo "SCRIPT_DIR=\"\$(cd -P -- \"\$(dirname -- \"\${BASH_SOURCE[0]}\")\" && pwd -P)\"" >> $WORKSPACE_DIR/.addonenv.sh
echo "" >> $WORKSPACE_DIR/.addonenv.sh
echo "export PADOGRID_WORKSPACE=\$SCRIPT_DIR" >> $WORKSPACE_DIR/.addonenv.sh
echo "export CLUSTERS_DIR=\$PADOGRID_WORKSPACE/clusters" >> $WORKSPACE_DIR/.addonenv.sh
echo "export PODS_DIR=\$PADOGRID_WORKSPACE/pods" >> $WORKSPACE_DIR/.addonenv.sh
echo "export APPS_DIR=\$PADOGRID_WORKSPACE/apps" >> $WORKSPACE_DIR/.addonenv.sh

#
# Copy README.md to the workspace dir
#
if [ "$HEADLESS_SPECIFIED" != "true" ]; then
   cp "$PADOGRID_HOME/workspace/README.md"  "$WORKSPACE_DIR/"
   cp -r "$PADOGRID_HOME/workspace/images"  "$WORKSPACE_DIR/"
fi

#
# Switch workspace and create cluster. This is done in sub-shell and hence
# the exported variables do not carry on to the parent shell.
#
export POD=""
export PADOGRID_WORKSPACE=$WORKSPACE_DIR
export CLUSTER
export PRODUCT
export CLUSTER_TYPE
#switch_workspace
if [ "$PRODUCT" != "" ] && [ "$PRODUCT" != "none" ]; then
   if [ "$VM_ENABLED" == "true" ]; then
      $PARENT_DIR/$PRODUCT/bin_sh/create_cluster -vm $VM_HOSTS -cluster $CLUSTER -cluster-type $CLUSTER_TYPE
   else
      $PARENT_DIR/$PRODUCT/bin_sh/create_cluster -cluster $CLUSTER -cluster-type $CLUSTER_TYPE
   fi
fi

# Create product env file
createProductEnvFile "$PRODUCT" "$PADOGRID_WORKSPACES_HOME"

#
# Display workspace information
#
echo ""
echo "Workspace created:"
echo "   $WORKSPACE_DIR"
echo ""
echo "The workspace directory also contains the following files."
echo ""
echo "   initenv.sh -  Workspace initialization file. This file is automatically sourced"
echo "                 in when you switch into the workspace."
echo ""
echo "   setenv.sh -  You can set your workspace-wide environment variables in"
echo "                this file."
echo ""
echo "   .addonenv.sh - A hidden file containing the workspace environment variables."
echo "                  You can overwrite them in setenv.sh as needed."
echo ""
echo "IMPORTANT:"
echo "----------"
echo "To use this workspace, execute the 'switch_workspace' command as follows:"
echo -e "   ${CLightGreen}switch_workspace $WORKSPACE${CNone}"
if [ "$VM_ENABLED" == "true" ]; then
   echo ""
   echo "You have created a VM workspace. To add or remove VM hosts, set VM_HOSTS in"
   echo "the workspace 'setenv.sh' file. Note that VM_HOSTS applies to the entire workspace"
   echo "whereas the 'vm.hosts' property in the cluster 'etc/cluster.properties' file applies"
   echo "only to the defining cluster. By default, 'vm.hosts' is initially set to VM_HOSTS."
   echo -e "   ${CLightGreen}$WORKSPACE_DIR/setenv.sh${CNone}"
fi
echo ""

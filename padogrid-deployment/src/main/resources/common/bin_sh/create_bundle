#!/usr/bin/env bash 

# ========================================================================
# Copyright (c) 2020-2022 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-cluster -workspace -pod -k8s -docker -app -all -quiet -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

#
# Set workspace and its path
#
if [ "$WORKSPACE_SPECIFIED" == "true" ] && [ "$WORKSPACE_ARG" != "default" ]; then
   WORKSPACE=$WORKSPACE_ARG
   WORKSPACE_PATH="$PADOGRID_WORKSPACES_HOME/$WORKSPACE_ARG"
else
   WORKSPACE=$(basename "$PADOGRID_WORKSPACE")
   WORKSPACE_PATH="$PADOGRID_WORKSPACE"
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $WORKSPACE_PATH

NAME
   $EXECUTABLE - Create a bundle tar ball that includes the files that may have been modified or added

SYNOPSIS
   $EXECUTABLE [-cluster cluster_name]
               [-pod pod_name] 
               [-k8s kubernetes_cluster_name] 
               [-docker docker_cluster_name] 
               [-app app_name] 
               [-workspace default | workspace_name]
               [-all] 
               [-quiet] [-?]

DESCRIPTION
   Creates a bundle tar ball that includes the files that may have been modified or added
   in the current or specified workspace. The created bundle can be used as a backup, 
   for a migration to a new version of padogrid, or for a distribution to another
   padogrid environment.

OPTIONS
   -cluster cluster_name
             Cluster name. Bundle the following files in the specified cluster.
EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
             Default: $CLUSTER
EOF
fi
cat <<EOF
        
             clusters/cluster_name/README.md
             clusters/cluster_name/bin_sh/setenv.sh
             clusters/cluster_name/etc/*
             clusters/cluster_name/lib
             clusters/cluster_name/plugins

   -pod pod_name
             Pod name. Bundle the following files in the specified pod.

             pods/pod_name/bin_sh/setenv.sh
             pods/pod_name/etc/pod.properties
             pods/pod_name/Vagrantfile

   -k8s kubernetes_cluster_name
             Kubernetes cluster name. Bundle the following files in the specified k8s cluster.

             k8s/kubernetes_cluster_name/README*
             k8s/kubernetes_cluster_name/bin_sh/*
             k8s/kubernetes_cluster_name/etc/*

   -docker docker_cluster_name
             Docker cluster name. Bundle the following files in the specified docker cluster.

             docker/docker_cluster_name/README*
             docker/docker_cluster_name/docker-compose.yaml
             docker/docker_cluster_name/padogrid/*

   -app app_name
             App name. Bundle the following files in the specified app.

             apps/app_name/bin_sh/setenv.sh
             apps/app_name/etc/*
             apps/app_name/lib
             apps/app_name/plugins
             apps/app_name/export

   -workspace default | workspace_name
             If specified, then the specified workspace's contents are bundled.  If the
             workspace name is 'default', then the current workspace is bundled.

   -all
             Bundle all files including all clusters, pods and apps.

             clusters/*/bin_sh/setenv.sh
             clusters/*/etc/*
             clusters/*/lib
             clusters/*/plugins
             pods/*/bin_sh/setenv.sh
             pods/*/etc/pod.properties
             pods/*/Vagrantfile
             k8s/README*
             k8s/bin_sh/*
             k8s/etc/*
             docker/README*
             docker/docker-compose.yaml
             docker/padogrid/*
             apps/*/bin_sh/setenv.sh
             apps/*/etc/*
             apps/*/lib
             apps/*/plugins
             apps/*/export

   -quiet
             Do not verbose.
 
EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
DEFAULT
   $EXECUTABLE -cluster $CLUSTER

FILES
   $WORKSPACE_PATH/bundles
             The current workspace bundles directory where locally generated bundles are stored.

EOF
fi
cat <<EOF
SEE ALSO
EOF
   printSeeAlsoList "*bundle*" $EXECUTABLE
   exit
fi

# 
# Exit if the specified workspace does not exist
#
if [ ! -d "$WORKSPACE_PATH" ]; then
  echo >&2 "ERROR: Specified workspace does not exist: [$WORKSPACE]. Command aborted."
  exit 1
fi

#
# Override the default cluster if -cluster is not specified.
#

#
# Bundle files
#
BUNDLE_DIR=$WORKSPACE_PATH/bundles
if [ ! -d $BUNDLE_DIR ]; then
   mkdir -p $BUNDLE_DIR
fi

# Create the temp bundle dir where all of the files will be temporarily placed.
TMP_BUNDLE_DIR="$WORKSPACE_PATH/tmp/bundles"
if [ -d $TMP_BUNDLE_DIR ]; then
   rm -rf $TMP_BUNDLE_DIR
fi
mkdir -p $TMP_BUNDLE_DIR

# 
# Collect files
#
 if [ "$PRODUCT" == "hazelcast" ]; then
    if [ "$CLUSTER_TYPE" == "jet" ]; then
       __PRODUCT="jet"
    else
       __PRODUCT="hazelcast"
    fi
 else
     __PRODUCT="$PRODUCT"
 fi

TIMESTAMP=`date +%y%m%d-%H%M%S`
DOCKER_CLUSTERS=""
K8S_CLUSTERS=""
if [ "$ALL" = "true" ]; then
   CLUSTERS=`ls -A $CLUSTERS_DIR`
   PODS=`ls -A $PODS_DIR`
   if [ -d "$DOCKER_DIR" ]; then
      DOCKER_CLUSTERS=`ls -A $DOCKER_DIR`
   fi
   if [ -d "$K8S_CLUSTERS" ]; then
      K8S_CLUSTERS=`ls -A $K8S_DIR`
   fi
   APPS=`ls -A $APPS_DIR`
   BUNDLE_TAR_FILE_PATH=$BUNDLE_DIR/bundle-${__PRODUCT}-${PRODUCT_VERSION}-workspace-all-${TIMESTAMP}.tar.gz
else
   FILE_PREFIX=""
   FILE_POSTFIX=""
   FILE_APP=""
   FILE_CLUSTER=""
   FILE_DOCKER=""
   FILE_K9S=""
   FILE_POD=""
   INCLUDE_CLUSTER="false"
   if ( [ "$APP_SPECIFIED" == "false" ] && [ "$POD_SPECIFIED" == "false" ] &&  [ "$DOCKER_SPECIFIED" == "false" ] &&  [ "$K8S_SPECIFIED" == "false" ]) ||
      ( [ "$CLUSTER_SPECIFIED" == "true" ] ); then
      INCLUDE_CLUSTER="true"
   fi
   if [ "$APP" != "" ]; then
      if  [ "`isAppExist $APP`" == "false" ]; then 
         echo "----------------------------------------------------------------"
         echo "WORKSPACE: $WORKSPACE_PATH"
         echo "    ERROR: Undefined app: [$APP]. Command aborted."
         echo "----------------------------------------------------------------"
         exit 1
      fi
      APPS="$APP"
      FILE_TRAIL="app-$APPS"
   fi
   if [ "$INCLUDE_CLUSTER" == "true" ]; then
      if [ "$CLUSTER" != "" ]; then
         if  [ "`isClusterExist $CLUSTER`" == "false" ]; then 
            echo "----------------------------------------------------------------"
            echo "WORKSPACE: $WORKSPACE_PATH"
            echo "    ERROR: Undefined cluster: [$CLUSTER]. Command aborted."
            echo "----------------------------------------------------------------"
            exit 1
         fi
         CLUSTERS="$CLUSTER"
         if [ "$FILE_TRAIL" != "" ]; then
            FILE_TRAIL="${FILE_TRAIL}-"
         fi
         FILE_TRAIL="${FILE_TRAIL}cluster-${CLUSTERS}"
      fi
   fi
   if [ "$DOCKER" != "" ]; then
      if  [ "`isDockerExist $DOCKER`" == "false" ]; then
         echo "----------------------------------------------------------------"
         echo "WORKSPACE: $WORKSPACE_PATH"
         echo "    ERROR: Undefined Docker: [$DOCKER]. Command aborted."
         echo "----------------------------------------------------------------"
         exit 1
      fi
      DOCKERS="$DOCKER"
      if [ "$FILE_TRAIL" != "" ]; then
         FILE_TRAIL="${FILE_TRAIL}-"
      fi
      FILE_TRAIL="${FILE_TRAIL}docker-${DOCERS}"
   fi
   if [ "$K8S" != "" ]; then
      if  [ "`isK8sExist $K8S`" == "false" ]; then
         echo "----------------------------------------------------------------"
         echo "WORKSPACE: $WORKSPACE_PATH"
         echo "    ERROR: Undefined Kubernetes: [$K8S]. Command aborted."
         echo "----------------------------------------------------------------"
         exit 1
      fi
      K8S_CLUSTERS="$K8S"
      if [ "$FILE_TRAIL" != "" ]; then
         FILE_TRAIL="${FILE_TRAIL}-"
      fi
      FILE_TRAIL="${FILE_TRAIL}k8s-${K8S}"
   fi
   if [ "$POD_SPECIFIED" == "false" ]; then
      POD=""
   fi
   if [ "$POD" != "" ]; then
      if  [ "`isPodExist $POD`" == "false" ]; then 
         echo "----------------------------------------------------------------"
         echo "WORKSPACE: $WORKSPACE_PATH"
         echo "    ERROR: Undefined pod: [$POD]. Command aborted."
         echo "----------------------------------------------------------------"
         exit 1
      fi
      PODS="$POD"
      if [ "$FILE_TRAIL" != "" ]; then
         FILE_TRAIL="${FILE_TRAIL}-"
      fi
      FILE_TRAIL="${FILE_TRAIL}pod-${PODS}"
   fi
      
   BUNDLE_TAR_FILE_PATH=$BUNDLE_DIR/bundle-${__PRODUCT}-${PRODUCT_VERSION}-${FILE_TRAIL}-${TIMESTAMP}.tar.gz
fi

# clusters
for CLUSTER in $CLUSTERS; do
   CLUSTER_DIR=$CLUSTERS_DIR/$CLUSTER
   mkdir -p $TMP_BUNDLE_DIR/clusters/$CLUSTER

   # Copy README.md if exists
   if [ -f "$CLUSTER_DIR/README.md" ]; then
      cp $CLUSTER_DIR/README.md $TMP_BUNDLE_DIR/clusters/$CLUSTER
   fi

   # Copy pom.xml if exists
   if [ -f "$CLUSTER_DIR/pom.xml" ]; then
      cp $CLUSTER_DIR/pom.xml $TMP_BUNDLE_DIR/clusters/$CLUSTER
   fi

   # Copy bin_sh
   cp -Rf $CLUSTER_DIR/bin_sh $TMP_BUNDLE_DIR/clusters/$CLUSTER

   # Copy etc
   cp -Rf $CLUSTER_DIR/etc $TMP_BUNDLE_DIR/clusters/$CLUSTER

   # Copy lib - all but addon jars
   if [ -d $CLUSTER_DIR/lib ]; then
      mkdir -p $TMP_BUNDLE_DIR/clusters/$CLUSTER/lib
      pushd $CLUSTER_DIR/lib > /dev/null 2>&1
      FILES=`ls -A | grep -v "padogrid-"`
      if [ "$FILES" != "" ]; then
         cp -Rf $FILES $TMP_BUNDLE_DIR/clusters/$CLUSTER/lib/
      fi
      popd > /dev/null 2>&1
   fi

   # Copy plugins - all but addon jars
   if [ -d $CLUSTER_DIR/plugins ]; then
      mkdir -p $TMP_BUNDLE_DIR/clusters/$CLUSTER/plugins
      pushd $CLUSTER_DIR/plugins > /dev/null 2>&1
      FILES=`ls -A | grep -v "padogrid-"`
      if [ "$FILES" != "" ]; then
         cp -Rf $FILES $TMP_BUNDLE_DIR/clusters/$CLUSTER/plugins/
      fi
   fi
   
   popd > /dev/null 2>&1
done

# pods
for POD in $PODS; do
   POD_DIR=$PODS_DIR/$POD
   mkdir -p $TMP_BUNDLE_DIR/pods/$POD
   cp -f $POD_DIR/Vagrantfile $TMP_BUNDLE_DIR/pods/$POD/ > /dev/null 2>&1
   if [ -f $POD_DIR/README.md ]; then
      # README.md
      cp $POD_DIR/README.md $TMP_BUNDLE_DIR/pods/$POD/ > /dev/null 2>&1
   fi
   if [ -d $POD_DIR/bin_sh ]; then
      # bin_sh
      cp -r $POD_DIR/bin_sh $TMP_BUNDLE_DIR/pods/$POD/ > /dev/null 2>&1
   fi
   if [ -d $POD_DIR/etc ]; then
      # etc
      cp -r $POD_DIR/etc $TMP_BUNDLE_DIR/pods/$POD/ > /dev/null 2>&1
   fi
done

# k8s clusters
for K8S in $K8S_CLUSTERS; do
   K8S_DIR=$K8S_DIR/$K8S
   mkdir -p $TMP_BUNDLE_DIR/k8s/$K8S
   cp -f $K8S_DIR/README* $TMP_BUNDLE_DIR/k8s/$K8S/ > /dev/null 2>&1
   if [ -d $K8S_DIR/bin_sh ]; then
      # bin_sh
      cp -r $K8S_DIR/bin_sh $TMP_BUNDLE_DIR/k8s/$K8S/ > /dev/null 2>&1
   fi
   if [ -d $K8S_DIR/etc ]; then
      # etc
      cp -r $K8S_DIR/etc $TMP_BUNDLE_DIR/k8s/$K8S/ > /dev/null 2>&1
   fi
done

# docker clusters
for DOCKER in $DOCKER_CLUSTERS; do
   DOCKER_DIR=$DOCKER_DIR/$DOCKER
   mkdir -p $TMP_BUNDLE_DIR/docker/$DOCKER
   cp -f $DOCKER_DIR/README* $TMP_BUNDLE_DIR/docker/$DOCKER/ > /dev/null 2>&1
   cp -f $DOCKER_DIR/docker-compose.yaml $TMP_BUNDLE_DIR/docker/$DOCKER/ > /dev/null 2>&1
   if [ -d $DOCKER_DIR/padogrid ]; then
      # padogrid
      cp -r $DOCKER_DIR/padogrid $TMP_BUNDLE_DIR/docker/$DOCKER/ > /dev/null 2>&1
   fi
done

# apps
for APP in $APPS; do
   APP_DIR=$APPS_DIR/$APP
   if [ -d $APP_DIR ]; then
      APP="`basename $APP_DIR`"
      mkdir -p $TMP_BUNDLE_DIR/apps/$APP

      # Copy README.md if exists
      if [ -f "$APP_DIR/README.md" ]; then
         cp $APP_DIR/README.md $TMP_BUNDLE_DIR/apps/$APP/
      fi

      # Copy pom.xml if exists
      if [ -f "$APP_DIR/pom.xml" ]; then
         cp $APP_DIR/pom.xml $TMP_BUNDLE_DIR/apps/$APP/
      fi

      if [ -d $APP_DIR/bin_sh ]; then
         cp -Rf $APP_DIR/bin_sh $TMP_BUNDLE_DIR/apps/$APP/
      fi
      if [ -d $APP_DIR/bin_win ]; then
         cp $APP_DIR/bin_win $TMP_BUNDLE_DIR/apps/$APP
      fi
      if [ -d $APP_DIR/etc ]; then
         cp -Rf $APP_DIR/etc $TMP_BUNDLE_DIR/apps/$APP
      fi
      if [ -d $APP_DIR/lib ]; then
         # Copy all but addon jars
         mkdir -p $TMP_BUNDLE_DIR/apps/$APP/lib
         pushd $APP_DIR/lib > /dev/null 2>&1
         FILES=`ls -A | grep -v "padogrid-"`
         if [ "$FILES" != "" ]; then
            cp -Rf $FILES $TMP_BUNDLE_DIR/apps/$APP/lib/
         fi
         popd > /dev/null 2>&1
      fi
      if [ -d $APP_DIR/plugins ]; then
         # Copy all but addon jars
         mkdir -p $TMP_BUNDLE_DIR/apps/$APP/plugins
         pushd $APP_DIR/plugins > /dev/null 2>&1
         FILES=`ls -A | grep -v "padogrid-"`
         if [ "$FILES" != "" ]; then
            cp -Rf FILES $TMP_BUNDLE_DIR/apps/$APP/plugins/
         fi
         popd > /dev/null 2>&1
      fi
      if [ -d $APP_DIR/export ]; then
         cp -Rf $APP_DIR/export $TMP_BUNDLE_DIR/apps/$APP
      fi
   fi
done

#
# Create tar ball
#
if [ "$QUIET" == "true" ]; then
   tar -C $TMP_BUNDLE_DIR -czf $BUNDLE_TAR_FILE_PATH `ls -A $TMP_BUNDLE_DIR`
else
   echo ""
   echo "Creating a tar ball with the following files..."
   tar -C $TMP_BUNDLE_DIR -czvf $BUNDLE_TAR_FILE_PATH `ls -A $TMP_BUNDLE_DIR`
fi

#
# Display bundle info
#
echo ""
echo "     WORKSPACE: $WORKSPACE_PATH"
echo "Bundle Created:"
echo "   $BUNDLE_TAR_FILE_PATH"
echo ""

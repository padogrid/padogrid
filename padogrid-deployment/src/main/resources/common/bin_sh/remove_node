#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020-2022 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-pod -count -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Remove one or more nodes from the specified pod in the current workspace

SYNOPSIS
   $EXECUTABLE [-pod pod_name] [-count number_of_nodes] [-?]

DESCRIPTION
   Removes one or more nodes from the specified pod.

OPTIONS
   -pod pod_name
             Pod name.

   -count number_of_nodes
             Number of nodes to remove. If not specified then it removes one node.

EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
DEFAULT
   $EXECUTABLE -pod $POD -count 1

EOF
fi
cat <<EOF
SEE ALSO
EOF
   printSeeAlsoList "*node*" $EXECUTABLE
   exit
fi

# Disallow users from removing nodes from guest OS
OS_ENV=`getOsEnv`
if [[ $OS_ENV == *g ]]; then
   echo "----------------------------------------------------------------"
   echo "WORKSPACE: $PADOGRID_WORKSPACE"
   echo "    ERROR: Guest OS is not allowed to remove nodes. Please run this command from the host OS."
   echo "           Command aborted."
   echo "----------------------------------------------------------------"
   exit 1
fi

if [ "$COUNT" == "" ]; then
   NODE_COUNT=1
else
   NODE_COUNT=$COUNT
fi

CLUSTER_TYPE=`getPodProperty "pod.type" $POD_TYPE`

POD_DIR=$PODS_DIR/$POD

if  [ ! -d $POD_DIR ]; then
   echo "----------------------------------------------------------------"
   echo "WORKSPACE: $PADOGRID_WORKSPACE"
   echo "      Pod: $POD"
   echo "    ERROR: This pod has not been created. Please run the create_pod command to"
   echo "           to create the pod before running this command. Command aborted."
   echo "----------------------------------------------------------------"
   exit 1
fi

OLD_NODE_COUNT=`getPodProperty "node.count" 0`
let NEW_NODE_COUNT=OLD_NODE_COUNT-NODE_COUNT
if [ $NEW_NODE_COUNT -lt 0 ]; then
   NEW_NODE_COUNT=0
fi
echo `setPodProperty "node.count" $NEW_NODE_COUNT`

echo "----------------------------------------------------------------"
echo "        WORKSPACE: $PADOGRID_WORKSPACE"
echo "              Pod: $POD"
echo "Node Count Before: $OLD_NODE_COUNT"
echo "   Node Count Now: $NEW_NODE_COUNT"
echo "          Pod Dir: $POD_DIR"
echo ""
echo "IMPORTANT: To apply the changes, the pod must be restarted."
echo "----------------------------------------------------------------"
popd > /dev/null 2>&1

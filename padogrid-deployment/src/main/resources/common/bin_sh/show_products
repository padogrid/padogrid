#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020-2022 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

# 
# Determine the PadoGrid environment base path. Default is "$HOME/Padogrid".
#
if [ "$PADOGRID_WORKSPACES_HOME" != "" ]; then
   PADOGRID_ENV_BASE_PATH="$(dirname $(dirname $PADOGRID_WORKSPACES_HOME))"
elif [ "$PADOGRID_ENV_BASE_PATH" == "" ]; then
   if [ "$PADOGRID_HOME" == "" ]; then
      PADOGRID_ENV_BASE_PATH="$HOME/Padogrid"
   fi
fi

__options()
{
   echo "-?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Display installed product versions

SYNOPSIS
   $EXECUTABLE [-?]

DESCRIPTION
   Displays installed product versions with the current workspace versions highlighted.

EOF
cat <<EOF
SEE ALSO
EOF
   printSeeAlsoList "change_version install_padogrid uninstall_product update_products" $EXECUTABLE
   exit
fi

function getCurrentProductVersions
{
   __PADOGRID_VERSION=${PADOGRID_HOME#*padogrid_}
   __PADO_VERSION=${PADO_HOME#*pado_}
   __PADODESKTOP_VERSION=${PADODESKTOP_HOME#*pado-desktop_}
   __PADOWEB_VERSION=${PADOWEB_HOME#*padoweb_}
   if [ -f "$COHERENCE_HOME/product.xml" ]; then
       __COHERENCE_VERSION=$(grep "version value" "$COHERENCE_HOME/product.xml" | sed -e 's/^.*="//' -e 's/".*//')
   fi
   __DERBY_VERSION=${DERBY_HOME#*db-derby-}
   __JAVA_VERSION=$JAVA_VERSION
   __GEMFIRE_VERSION=${GEMFIRE_HOME#*pivotal-gemfire-}
   __GEODE_VERSION=${GEODE_HOME##*apache-geode-}
   __GRAFANA_VERSION=${GRAFANA_HOME#*grafana-}
   __HAZELCAST_DESKTOP_VERSION=${HAZELCAST_DESKTOP_HOME##*hazelcast-desktop_}
   __HADOOP_VERSION=${HADOOP_HOME#*hadoop-}
   __HAZELCAST_ENTERPRISE_VERSION=${HAZELCAST_HOME#*hazelcast-enterprise-}
   if [[ "$HAZELCAST_MC_HOME" == *"management-center" ]] && [ -d "$HAZELCAST_MC_HOME" ]; then
      for i in $HAZELCAST_MC_HOME/*.jar; do
         if [[ "$i" == *"hazelcast-management-center"* ]]; then
            __HAZELCAST_MC_VERSION=${i#*hazelcast-management-center-}
            __HAZELCAST_MC_VERSION=${__HAZELCAST_MC_VERSION%.jar}
            break;
         fi
      done
   else
      __HAZELCAST_MC_VERSION=${HAZELCAST_MC_HOME#*hazelcast-management-center-}
   fi
   __HAZELCAST_OSS_VERSION=${HAZELCAST_HOME#*hazelcast-}
   __JET_ENTERPRISE_VERSION=${JET_HOME#*hazelcast-jet-enterprise-}
   __JET_OSS_VERSION=${JET_HOME#*hazelcast-jet-}
   if [[ "$JET_MC_HOME" == *"4.2021"* ]]; then
      __JET_MC_VERSION=${JET_MC_HOME#*hazelcast-management-center-}
   else
      __JET_MC_VERSION=${JET_MC_HOME#*hazelcast-jet-management-center-}
   fi
   __KAFKA_VERSION=${KAFKA_HOME#*kafka_}
   __CONFLUENT_VERSION=${CONFLUENT_HOME#*confluent-}
   __PROMETHEUS_VERSION=${PROMETHEUS_HOME#*prometheus-}
   __REDIS_VERSION=${REDIS_HOME#*redis-}
   __SNAPPYDATA_VERSION=${SNAPPYDATA_HOME#*snappydata-}
   __SPARK_VERSION=${SPARK_HOME#*spark-}
}

function printVersionTree
{
   local index=0
   local PRODUCT_NAME=$1
   local VERSIONS=($2)
   local CURRENT_PRODUCT_VERSION=$3

   local len=${#VERSIONS[@]}
   local last last_index
   let last_index=len-1
   echo $PRODUCT_NAME
   if [ $len -eq 0 ]; then
      echo "$TLel (not installed)"
   else
      local version
      for i in ${VERSIONS[@]}; do
         if [[ "$i" != *"none"* ]] && [ "${PRODUCT_NAME}" == "Kafka Confluent Platform" ]; then
            if [ -f "$PADOGRID_ENV_BASE_PATH/products/confluent-$i/bin/confluent-hub" ]; then
               version="$i (commercial)"
            else
               version="$i (community)"
            fi
         elif [[ "$i" != *"none"* ]] && [ "${PRODUCT_NAME}" == "Grafana" ]; then
            if [ "$(grep GNU "$PADOGRID_ENV_BASE_PATH/products/grafana-$i/LICENSE")" != "" ]; then
               version="$i (oss)"
            else
               version="$i (enterprise)"
            fi
         else
            version=$i
         fi
         if [ $index -lt $last_index ]; then
            if [ "$i" == "$CURRENT_PRODUCT_VERSION" ]; then
               echo -e "$TTee ${CLightGreen}$version${CNone}"
            else
               echo "$TTee $version"
            fi
         else
            if [ "$i" == "$CURRENT_PRODUCT_VERSION" ]; then
                echo -e "$TLel ${CLightGreen}$version${CNone}"
            else
               echo "$TLel $version"
            fi
         fi
         let index=index+1
      done
   fi
}

determineInstalledProductVersions
getCurrentProductVersions

echo ""
echo "Products Directoy:"
echo "   $PADOGRID_ENV_BASE_PATH/products"
echo ""
echo "The following product versions are found in the 'products' directory. The ones"
echo "highlighted are configured for the current workspace. (Coherence and Java lists"
echo "lists are not complete due to their independent installation locations.)"
echo ""
printVersionTree "PadoGrid" "$PADOGRID_VERSIONS" "$PADOGRID_VERSION"
echo ""
printVersionTree "Pado" "$PADO_VERSIONS" "$__PADO_VERSION"
echo ""
printVersionTree "PadoDesktop" "$PADODEKSTOP_VERSIONS" "$__PADODESKTOP_VERSION"
echo ""
printVersionTree "PadoWeb" "$PADOWEB_VERSIONS" "$__PADOWEB_VERSION"
echo ""
printVersionTree "Coherence" "$COHERENCE_VERSIONS" "$__COHERENCE_VERSION"
echo ""
printVersionTree "Derby" "$DERBY_VERSIONS" "$__DERBY_VERSION"
echo ""
printVersionTree "GemFire" "$GEMFIRE_VERSIONS" "$__GEMFIRE_VERSION"
echo ""
printVersionTree "Geode" "$GEODE_VERSIONS" "$__GEODE_VERSION"
echo ""
printVersionTree "Grafana" "$GRAFANA_VERSIONS" "$__GRAFANA_VERSION"
echo ""
printVersionTree "Hadoop" "$HADOOP_VERSIONS" "$__HADOOP_VERSION"
echo ""
printVersionTree "Hazelcast Desktop" "$HAZELCAST_DESKTOP_VERSIONS" "$__HAZELCAST_DESKTOP_VERSION"
echo ""
printVersionTree "Hazelcast Enterprise" "$HAZELCAST_ENTERPRISE_VERSIONS" "$__HAZELCAST_ENTERPRISE_VERSION"
echo ""
printVersionTree "Hazelcast OSS" "$HAZELCAST_OSS_VERSIONS" "$__HAZELCAST_OSS_VERSION"
echo ""
printVersionTree "Hazelcast Management Center" "$HAZELCAST_MANAGEMENT_CENTER_VERSIONS" "$__HAZELCAST_MC_VERSION"
echo ""
printVersionTree "Java" "$JAVA_VERSIONS" "$__JAVA_VERSION"
echo ""
printVersionTree "Jet Enterprise" "$JET_ENTERPRISE_VERSIONS" "$__JET_ENTERPRISE_VERSION"
echo ""
printVersionTree "Jet OSS" "$JET_OSS_VERSIONS" "$__JET_OSS_VERSION"
echo ""
printVersionTree "Jet Management Center" "$JET_MANAGEMENT_CENTER_VERSIONS" "$__JET_MC_VERSION"
echo ""
printVersionTree "Kafka" "$KAFKA_VERSIONS" "$__KAFKA_VERSION"
echo ""
printVersionTree "Kafka Confluent Platform" "$CONFLUENT_VERSIONS" "$__CONFLUENT_VERSION"
echo ""
printVersionTree "Prometheus" "$PROMETHEUS_VERSIONS" "$__PROMETHEUS_VERSION"
echo ""
printVersionTree "Redis" "$REDIS_VERSIONS" "$__REDIS_VERSION"
echo ""
printVersionTree "SnappyData" "$SNAPPYDATA_VERSIONS" "$__SNAPPYDATA_VERSION"
echo ""
printVersionTree "Spark" "$SPARK_VERSIONS" "$__SPARK_VERSION"
echo ""
echo -e "The ${CLightGreen}highlighted${CNone} ones are configured for the current workspace."
echo ""

#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020-2022 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-rwe -workspace -cluster -k8s -docker -vm -pod -app -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Find the specified installation in all RWEs

SYNOPSIS $EXECUTABLE [[-app | -cluster | -docker | -k8s | -pod | -rwe | -vw | -workspace | -workspace] file_name] [-?]

DESCRIPTION
   Finds the specified installations in all RWEs using the OS's 'find' command. Wild
   cards are allowed and the match is case insensitive. To perform a global search,
   i.e., search all RWEs regardless of component types, do not specify any options except
   the file name. To narrow down the search to a component type, specify the appropriate
   option followed by the file name.

OPTIONS
   -app
             Search the specified file only in all the  'apps' folders.

   -cluster
             Search the specified file only in all the 'clusters' folders

   -docker
             Search the specified file only in all the 'docker' folders.

   -k8s
             Search the specified file only in all the 'k8s' folders.

   -pod
             Search the specified file only in all the 'pods' folders.

   -rwe
             Search the specified file in all RWEs. This is analogous to a global search.
             If no option is specified then it defaults to this option.

   -vm
             Search the specified file in all clusters with VM enabled. This option is a place hoder
             for future inclusion. It is not supported in this version.

   -workspace
             Search the specified file in all workspaces.

   file_name
             File name. Wild card supported.

EXAMPLES
   To search MySQL jar installation on all RWEs:
      $EXECUTABLE mysql*.jar

   To search perf_test installation in all apps:
      $EXECUTABLE -app perf_test

   To search kafka in all k8s instalaltions
      $EXECUTABLE -k8s kafka*

EOF
cat <<EOF
SEE ALSO
EOF
   printSeeAlsoList "show* padogrid" $EXECUTABLE
   exit
fi

COMPONENT_TYE=""
COMPONENT=""
COMPONENT_DISPLAY=""
if [ "$CLUSTER_SPECIFIED" == "true" ]; then
  COMPONENT_TYPE="clusters"
  COMPONENT=$CLUSTER
  COMPONENT_DISPLAY="clusters"
elif [ "$K8S_SPECIFIED" == "true" ]; then
  COMPONENT_TYPE="k8s"
  COMPONENT=$K8S
  COMPONENT_DISPLAY="k8s"
elif [ "$DOCKER_SPECIFIED" == "true" ]; then
  COMPONENT_TYPE="docker"
  COMPONENT=$DOCKER
  COMPONENT_DISPLAY="docker"
elif [ "$POD_SPECIFIED" == "true" ]; then
  COMPONENT_TYPE="pods"
  COMPONENT=$POD
elif [ "$APP_SPECIFIED" == "true" ]; then
  COMPONENT_TYPE="apps"
  COMPONENT=$APP
  COMPONENT_DISPLAY="apps"
elif [ "$WORKSPACE_SPECIFIED" == "true" ]; then
  COMPONENT_TYPE="workspace"
  COMPONENT=$WORKSPACE_ARG
  COMPONENT_DISPLAY="workspaces"
elif [ "$RWE_SPECIFIED" == "true" ]; then
  COMPONENT_TYPE="rwe"
  COMPONENT=$RWE_ARG
  COMPONENT_DISPLAY="rwes"
elif [ "$VM_SPECIFIED" == "" ]; then
  COMPONENT_TYPE="vm"
  COMPONENT_DISPLAY="vms"
  echo >&2 "ERROR: The '-vm' option is not available in this version. Command aborted." 
  exit 1
else
  RWE_SPECIFIED=true
  COMPONENT_TYPE="rwe"
  COMPONENT=$1
  COMPONENT_DISPLAY="rwes"
fi

if [ "$COMPONENT" == "" ]; then
  echo >&2 "ERROR: Search name not specified. Command aborted." 
  exit 1
fi

CURRENT_RWE="$(basename "$PADOGRID_WORKSPACES_HOME")"
CURRENT_WORKSPACE="$(basename "$PADOGRID_WORKSPACE")"
RWE_HOME="$(dirname "$PADOGRID_WORKSPACES_HOME")"
ROOTS="$(getRweList)"
RWES=( $ROOTS )
echo "Searching '$COMPONENT' in all ${COMPONENT_DISPLAY}..."
echo "$RWE_HOME"
let RWES_LAST_INDEX=${#RWES[@]}-1

#
# Global Search, i.e., RWEs
#
if [ "$RWE_SPECIFIED" == "true" ]; then
   pushd $RWE_HOME > /dev/null 2>&1
   RESULTS=$(find . -iname $COMPONENT)
   if [ "$RESULTS" != "" ]; then
      COMPONENTS=( $RESULTS )
      let COMPONENTS_LAST_INDEX=${#COMPONENTS[@]}-1
      LEADING_BAR=""
      for ((k = 0; k < ${#COMPONENTS[@]}; k++)); do
         COMP=${COMPONENTS[$k]}
         if [ $k -lt $COMPONENTS_LAST_INDEX ]; then
            echo "${LEADING_BAR}$TTee ${COMP:2}" 
         else
            echo "${LEADING_BAR}$TLel ${COMP:2}"
         fi
       done
   fi
   popd > /dev/null 2>&1

#
# Workspace Search
#
elif [ "$WORKSPACE_SPECIFIED" == "true" ]; then
  for ((i = 0; i < ${#RWES[@]}; i++)); do
     RWE=${RWES[$i]}
     pushd $RWE_HOME/$RWE > /dev/null 2>&1
     RESULTS=$(find . -iname $COMPONENT)
     FOUND="false"
     if [ "$RESULTS" != "" ]; then
        COMPONENTS=( $RESULTS )
        let COMPONENTS_LAST_INDEX=${#COMPONENTS[@]}-1
        if [ "$FOUND" == "false" ]; then
           echo "$TTee $RWE"
           FOUND="true"
        fi
        LEADING_BAR="$TBar   "
        for ((k = 0; k < ${#COMPONENTS[@]}; k++)); do
           COMP=${COMPONENTS[$k]}
           if [ $k -lt $COMPONENTS_LAST_INDEX ]; then
              echo "${LEADING_BAR}$TTee ${COMP:2}" 
           else
              echo "${LEADING_BAR}$TLel ${COMP:2}"
           fi
         done
     fi
     popd > /dev/null 2>&1
  done

#
# Component Type Search
#
else
  for ((i = 0; i < ${#RWES[@]}; i++)); do
     RWE=${RWES[$i]}
     WORKSPACES=`ls $RWE_HOME/$RWE`
     WORKSPACES=$(removeTokens "$WORKSPACES" "initenv.sh setenv.sh setenv.sh0")
     WORKSPACES=( $WORKSPACES )
     let WORKSPACES_LAST_INDEX=${#WORKSPACES[@]}-1
     FOUND="false"
     for ((j = 0; j < ${#WORKSPACES[@]}; j++)); do
        WORKSPACE=${WORKSPACES[$j]}
        if [ "$COMPONENT_TYPE" != "" ]; then
           if [ ! -d $RWE_HOME/$RWE/$WORKSPACE/$COMPONENT_TYPE ]; then
              continue;
           fi
           pushd $RWE_HOME/$RWE/$WORKSPACE/$COMPONENT_TYPE > /dev/null 2>&1
           RESULTS=$(find . -iname $COMPONENT)
           if [ "$RESULTS" != "" ]; then
              COMPONENTS=( $RESULTS )
              let COMPONENTS_LAST_INDEX=${#COMPONENTS[@]}-1
              if [ "$FOUND" == "false" ]; then
                 echo "$TTee $RWE"
                 FOUND="true"
              fi
              LEADING_BAR="$TBar   "
              echo "${LEADING_BAR}$TTee $WORKSPACE"
              LEADING_BAR="$TBar   $TBar   "
              for ((k = 0; k < ${#COMPONENTS[@]}; k++)); do
                 COMP=${COMPONENTS[$k]}
                 if [ $k -lt $COMPONENTS_LAST_INDEX ]; then
                    echo "${LEADING_BAR}$TTee ${COMP:2}" 
                 else
                    echo "${LEADING_BAR}$TLel ${COMP:2}"
                 fi
               done
           fi
           popd > /dev/null 2>&1
        fi
      done
  done
fi

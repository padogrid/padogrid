#!/usr/bin/env bash 

# ========================================================================
# Copyright (c) 2020-2022 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-path -rwe -product -workspace -cluster -java -vm -quiet -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

PadoGrid Initialization

NAME
   $EXECUTABLE - Initialize a PadoGrid workspaces environment

SYNOPSIS
   $EXECUTABLE [-path rwe_home_path]
               [-rwe rwe_name]
               [-product product_home_path]
               [-java JAVA_HOME_path]
               [-workspace default_workspace]
               [-cluster default_cluster]
               [-vm]
               [-quiet] [-?]

DESCRIPTION
   Initializes a PadoGrid workspaces environment by setting the
   default paths to the required software installation directories.

OPTIONS
   -path rwe_home_path
             RWE home path where RWEs will be store. If not specified, then 
             then it defaults to the current RWE home path if exists.

   -rwe rwe_name
             A new RWE name.

   -product product_home_path
             Absolute path of the installed product directory.

   -java JAVA_HOME_path
             JDK home path.
EOF
if [ "$MAN_SPECIFIED" == "false" ] && [ "$JAVA_HOME" != "" ]; then
cat <<EOF
             Default: $JAVA_HOME
EOF
fi
cat <<EOF

   -workspace default_workspace
             Default workspace to be created.
             Default: $DEFAULT_WORKSPACE

   -cluster default_cluster
             Default cluster name.

   -vm
             Specify '-vm' to enable VM cluster.
 
   -quiet
             Quiet mode. Supresses the interactive prompt.

DEFAULT
   $EXECUTABLE -cluster $DEFAULT_CLUSTER

EOF
   exit
fi

# If -env file present, then source it in. This is already done in .argenv.sh
# but it is overwritten by .addonenv.sh which sources in the workspace setenv.sh
# file.
if [ "$ENV_ARG" != "" ]; then
   . $ENV_ARG
fi

# Set PADOGRID_HOME
PADOGRID_HOME="$(dirname "$BASE_DIR")"

RWE_HOME="$PATH_ARG"
if [ "$RWE_HOME" == "" ]; then
   RWE_HOME="$(dirname "$PADOGRID_WORKSPACES_HOME")"
fi
RWE_NAME="$RWE_ARG"

if [ "$WORKSPACE_ARG" == "" ]; then
   WORKSPACE="$DEFAULT_WORKSPACE"
else
   WORKSPACE="$WORKSPACE_ARG"
fi

# Remove trailing slashes ('/')
RWE_HOME="$(echo "$RWE_HOME" | sed 's:/*$::')"
if [ "$RWE_HOME" != "" ]; then
   WORKSPACES_HOME="$RWE_HOME/$RWE_NAME"
else
   WORKSPACES_HOME=""
fi
WORKSPACES_HOME="$(echo "$WORKSPACES_HOME" | sed 's:/*$::')"

if [ "$QUIET" == "true" ]; then
   if [ "$RWE_NAME" == "" ]; then
      echo >&2 "-------------------------------------------------------------------------"
      echo >&2 "ERROR: RWE name not specifed. Use '-rwe' to specify the new RWE name."
      echo >&2 "       Command aborted."
      echo >&2 "-------------------------------------------------------------------------"
      exit 1
   fi
   if [ "$RWE_HOME" == "" ]; then
      echo >&2 "-------------------------------------------------------------------------"
      echo >&2 "ERROR: RWE home path not specifed. Use '-path' to specify the RWE home path."
      echo >&2 "       Command aborted."
      echo >&2 "-------------------------------------------------------------------------"
      exit 1
   fi
   if [ -d "$WORKSPACES_HOME" ]; then
      echo >&2 "-------------------------------------------------------------------------"
      echo >&2 "ERROR: The specified RWE directory already exists. A new RWE name required."
      echo >&2 "          $WORKSPACES_HOME"
      echo >&2 "       Command aborted."
      echo >&2 "-------------------------------------------------------------------------"
      exit 1
   fi
fi
if [ -f "$WORKSPACES_HOME" ]; then
   if [ "$QUIET" == "true" ]; then
      echo >&2 "--------------------------------------------------------------------"
      echo >&2 "ERROR: The specified directory is an existing file."
      echo >&2 "          $WORKSPACES_HOME"
      echo >&2 "       Command aborted."
      echo >&2 "--------------------------------------------------------------------"
      exit 1
   fi
fi

# Set default values
if [ "$JAVA_HOME_ARG" == "" ]; then
   JAVA_HOME_ARG="$JAVA_HOME"
fi
PRODUCT_HOME="$PRODUCT_HOME_ARG"

# Default cluster
if [ $CLUSTER_SPECIFIED == "false" ]; then
   CLUSTER=""
   determineProduct
fi

# VM
VM_ENABLED="$VM_SPECIFIED"

if [ "$QUIET" == "true" ]; then
   if [ "$WORKSPACES_HOME" == "" ]; then 
       echo "ERROR: Workspaces directory path not specified. The '-quiet' option"
       echo "       requires the '-path' option to specified the directory path."
       echo "       Command aborted."
       exit 1
   fi
   if [ -d "$WORKSPACES_HOME" ] || [ -f "WORKSPACES_HOME" ]; then
       echo "Directory already exists. A new directory required."
       echo "ERROR: Workspaces directory path already exists. A new directory required."
       echo "       Command aborted."
       exit 1
   fi
   if [ "$JAVA_HOME_ARG" != "" ]; then
      JAVA_HOME="$JAVA_HOME_ARG"
   fi
   if [ "$WORKSPACE_ARG" != "" ]; then
      WORKSPACE="$WORKSPACE_ARG"
   fi
else
   echo ""
   __WORKSPACES_HOME="$WORKSPACES_HOME"
   __RWE_HOME="$RWE_HOME"
   __RWE_NAME="$RWE_NAME"
   __JAVA_HOME="$JAVA_HOME_ARG"
   __PRODUCT_HOME="$PRODUCT_HOME_ARG"
   __WORKSPACE="$WORKSPACE"
   REDO=true
   while [ "$REDO" == "true" ]; do

      # RWE_HOME
      __REDO=true
      while [ "$__REDO" == "true" ]; do
         echo "Enter the RWE home path where your RWEs will be stored."
         if [[ $OS_NAME == CYGWIN* ]]; then
            echo "Enter only Unix absolute path. Windows path not allowed."
         fi
         echo "[$__RWE_HOME]:"

         read -p "" INPUT
         # trim string
         INPUT=`echo "$INPUT" | xargs`
         if [ "$INPUT" != "" ]; then
            __RWE_HOME="$INPUT"
         fi
         if [[ $OS_NAME == CYGWIN* ]]; then
            __RWE_HOME="$(cygpath -au "$__RWE_HOME")"
         fi
         __RWE_HOME="$(trimString "$__RWE_HOME")"
         if [ "$__RWE_HOME" == "" ]; then
            __REDO=true
         elif [[ ! $__RWE_HOME == /* ]]; then
            echo "Absolute path required."
            __RWE_HOME="$RWE_HOME"
            __REDO=true
         elif [ ! -d "$__RWE_HOME" ] && [ -f "$__RWE_HOME" ]; then
            __REDO=true
            __RWE_HOME=""
            echo "The specified path is not a directory. Please enter a directory path."
         else
            __REDO=false
         fi
      done
      RWE_HOME="$__RWE_HOME"

      # RWE_NAME
      __REDO=true
      __RWE_NAME=$RWE_NAME
      RWE_LIST="$(getRweList "$RWE_HOME")"
      if [ "$RWE_LIST" != "" ]; then
         echo "The following RWEs already exists in the specified RWE home path."
         for i in $RWE_LIST; do
            echo "   $i"
         done
      fi
      while [ "$__REDO" == "true" ]; do
         read -p "Enter a new RWE name [$__RWE_NAME]: " INPUT
         # trim string
         INPUT=`echo "$INPUT" | xargs`
         if [ "$INPUT" != "" ]; then
            __RWE_NAME="$INPUT"
         fi
         __RWE_NAME="$(trimString "$__RWE_NAME")"
         if [ "$__RWE_NAME" == "" ]; then
            __REDO=true
         elif [ -d "$__RWE_HOME/$__RWE_NAME" ] || [ -f "$__RWE_HOME/$__RWE_NAME" ]; then
            __REDO=true
            __RWE_NAME=""
            echo "The specified RWE already exists. Please enter a new RWE name."
         else
            __REDO=false
         fi
      done
      RWE_NAME="$__RWE_NAME"
      WORKSPACES_HOME="$__RWE_HOME/$__RWE_NAME"

      # JAVA_HOME
      __REDO=true
      while [ "$__REDO" == "true" ]; do

         echo "Enter Java home path. Leave blank to skip."
         if [[ $OS_NAME == CYGWIN* ]]; then
            echo "Enter only Unix absolute path. Windows path not allowed."
         fi
         echo "[$__JAVA_HOME]:"

         read -p "" INPUT
         # trim string
         INPUT=`echo "$INPUT" | xargs`
         if [ "$INPUT" != "" ]; then
            __JAVA_HOME="$INPUT"
         fi
         if [[ $OS_NAME == CYGWIN* ]]; then
            __JAVA_HOME="$(cygpath -au "$__JAVA_HOME")"
         fi
         __JAVA_HOME="$(trimString "$__JAVA_HOME")"

         if [ "$__JAVA_HOME" == "" ]; then
            echo "Java home path not specified and will not be set."
            __REDO=false
         elif [[ ! -d "$__JAVA_HOME" ]]; then
            echo "Directory does not exist or not a directory."
            __JAVA_HOME="$JAVA_HOME_ARG"
            __REDO=true
         else
            __REDO=false
         fi
      done
      JAVA_HOME="$__JAVA_HOME"

      # PRODUCT_HOME
      __REDO=true
      while [ "$__REDO" == "true" ]; do

         echo "Enter product ($PRODUCT) home directory path. Leave blank to skip."
         if [[ $OS_NAME == CYGWIN* ]]; then
            echo "Enter only Unix absoulte path. Windows path not allowed."
         fi
         echo "[$__PRODUCT_HOME]:"

         read -p "" INPUT
         # trim string
         INPUT=`echo "$INPUT" | xargs`
         if [ "$INPUT" != "" ]; then
            __PRODUCT_HOME="$INPUT"
         fi
         if [ "$__PRODUCT_HOME" == "" ]; then
            echo "Product home path not specified and will not be set."
         fi
         if [[ $OS_NAME == CYGWIN* ]]; then
            __PRODUCT_HOME="$(cygpath -au $__PRODUCT_HOME)"
         fi
         if [ "$__PRODUCT_HOME" != "" ] && [[ ! -d "$__PRODUCT_HOME" ]]; then
            echo "Directory does not exist or not a directory. Do you want to skip?"
            __REDO=true
            INNER_LOOP=true
            while [ "$INNER_LOOP" == "true" ]; do
               read -p "Enter 'c' to skip this question and continue, 'r' to re-enter, 'q' to quit: " INPUT
               case $INPUT in
                  [Cc]* ) __REDO=false; INNER_LOOP=false; __PRODUCT_HOME="";;
                  [Rr]* ) __REDO=true; INNER_LOOP=false; __PRODUCT_HOME="$PRODUCT_HOME_ARG";;
                  [Qq]* ) echo "Command Aborted."; INNER_LOOP=false; exit;;
               esac
            done
         else
            __REDO=false
         fi
      done
      PRODUCT_HOME="$__PRODUCT_HOME"

      # Set the default cluster name for the selected product
      #CLUSTER=""
      #determineProduct

      # Default workspace
      __REDO=true
      while [ "$__REDO" == "true" ]; do
         read -p "Enter default workspace name [$__WORKSPACE]: " INPUT
         # trim string
         INPUT=`echo "$INPUT" | xargs`
         if [ "$INPUT" != "" ]; then
            __WORKSPACE="$INPUT"
         fi
         __WORKSPACE="$(trimString "$__WORKSPACE")"
         if [ "$__WORKSPACE" == "" ]; then
            __REDO=true
         else
            __REDO=false
         fi
      done
      WORKSPACE="$__WORKSPACE"

      # CLUSTER
      if [ "$PRODUCT_HOME" == "" ]; then
         CLUSTER=""
      else
         read -p "Enter default cluster name [$CLUSTER]: " INPUT
         # trim string
         INPUT=`echo "$INPUT" | xargs`
         if [ "$INPUT" != "" ]; then
            CLUSTER="$INPUT"
         fi
         if [ "$CLUSTER" == "" ]; then
            echo "Cluster not specified and will not be set."
         fi
      fi

      # VM
      INNER_LOOP=true
      while [ "$INNER_LOOP" == "true" ]; do
         read -p "Enable VM? Enter 'true' or 'false' [$VM_ENABLED]: " INPUT 
         # trim string
         INPUT=`echo "$INPUT" | xargs`
         if [ "$INPUT" == "" ]; then
            INPUT="$VM_ENABLED"
         fi
         if [ "$INPUT" == "true" ] || [ "$INPUT" == "false" ]; then
            VM_ENABLED="$INPUT"
            REDO=false;
            INNER_LOOP=false;
         fi
      done

      echo ""
      echo "Creating an RWE as follows..."
      echo "            RWE Home: $RWE_HOME"
      echo "            RWE Name: $RWE_NAME"
      echo "           JAVA_HOME: $JAVA_HOME"
      echo "        Product Home: $PRODUCT_HOME"
      echo "   Default Workspace: $WORKSPACE"
      echo "     Default Cluster: $CLUSTER"
      echo "          VM Enabled: $VM_ENABLED"

      REDO=true
      INNER_LOOP=true
      while [ "$INNER_LOOP" == "true" ]; do
         read -p "Enter 'c' to continue, 'r' to re-enter, 'q' to quit: " INPUT
         case $INPUT in
            [Cc]* ) REDO=false; INNER_LOOP=false;;
            [Rr]* ) REDO=true; INNER_LOOP=false;;
            [Qq]* ) echo "Command Aborted."; INNER_LOOP=false; exit;;
         esac
      done
   done
fi

#
# Create the workspaces dir and the default workspace.
#
mkdir -p $WORKSPACES_HOME
pushd $WORKSPACES_HOME > /dev/null 2>&1
export PADOGRID_WORKSPACES_HOME="$(pwd)"
popd > /dev/null 2>&1

# Create env file for 'create_workspace' to source in.
TMP_ENV_FILE=/tmp/$EXECUTABLE-$(date "+%m%d%y%H%M%S").sh
if [ "$CLUSTER" == "" ]; then
   CLUSTER_SPECIFIED="false"
else
   CLUSTER_SPECIFIED="true"
fi
echo "PADOGRID_WORKSPACES_HOME=\"$PADOGRID_WORKSPACES_HOME\"" > $TMP_ENV_FILE
echo "CLUSTER_SPECIFIED=\"$CLUSTER_SPECIFIED\"" >> $TMP_ENV_FILE
echo "CLUSTER=\"$CLUSTER\"" >> $TMP_ENV_FILE
if [ "$WORKSPACE" != "" ]; then
   echo "NAME_ARG=\"$WORKSPACE\"" >> $TMP_ENV_FILE
   PADOGRID_WORKSPACE="$PADOGRID_WORKSPACES_HOME"/"$WORKSPACE"
fi
determineProduct
echo "PRODUCT_HOME_ARG=\"$PRODUCT_HOME\"" >> $TMP_ENV_FILE
echo "PRODUCT_ARG=\"$PRODUCT_HOME\"" >> $TMP_ENV_FILE
if [ "$JAVA_HOME" != "" ]; then
   echo "JAVA_HOME_ARG=\"$JAVA_HOME\"" >> $TMP_ENV_FILE
fi
echo "VM_SPECIFIED=\"$VM_ENABLED\"" >> $TMP_ENV_FILE

# Create the default workspace.
$SCRIPT_DIR/create_workspace -env $TMP_ENV_FILE -quiet
rm $TMP_ENV_FILE

#
# Create setenv.sh
#
if [ ! -f $WORKSPACES_HOME/setenv.sh ]; then
   case "$PRODUCT" in
   hazelcast)
   	  if [ "$CLUSTER_TYPE" == "jet" ]; then
         JET_HOME=$PRODUCT_HOME
         TEMPLATE_PRODUCT_HOME="\$JET_HOME"
      else
         HAZELCAST_HOME=$PRODUCT_HOME
         TEMPLATE_PRODUCT_HOME="\$HAZELCAST_HOME"
      fi
      ;;
   geode)
      if [ "$CLUSTER_TYPE" == "gemfire" ]; then
         GEMFIRE_HOME=$PRODUCT_HOME
         TEMPLATE_PRODUCT_HOME="\$GEMFIRE_HOME"
      else
         GEODE_HOME=$PRODUCT_HOME
         TEMPLATE_PRODUCT_HOME="\$GEODE_HOME"
      fi
      ;;
   snappydata)
      TEMPLATE_PRODUCT_HOME="\$SNAPPYDATA_HOME"
      ;;
   coherence)
      TEMPLATE_PRODUCT_HOME="\$COHERENCE_HOME"
      ;;
   redis)
      TEMPLATE_PRODUCT_HOME="\$REDIS_HOME"
      ;;
   hadoop)
      TEMPLATE_PRODUCT_HOME="\$HADOOP_HOME"
      ;;
   kafka)
      TEMPLATE_PRODUCT_HOME="\$KAFKA_HOME"
      ;;
   spark)
      TEMPLATE_PRODUCT_HOME="\$SPARK_HOME"
      ;;
   none|*)
      TEMPLATE_PRODUCT_HOME=""
      ;;
   esac
   
   # PadoGrid product dir
   PARENT_DIR="$(dirname "$BASE_DIR")"

   # Replace '/' to avoid expansion for the subsequent use.
   TEMPLATE_JAVA_HOME=$(echo $JAVA_HOME | sed 's/\//\\\//g')
   TEMPLATE_PADOGRID_HOME=$(echo $PARENT_DIR | sed 's/\//\\\//g')
   TEMPLATE_PADO_HOME=$(echo $PADO_HOME | sed 's/\//\\\//g')
   TEMPLATE_GEMFIRE_HOME=$(echo $GEMFIRE_HOME | sed 's/\//\\\//g')
   TEMPLATE_GEODE_HOME=$(echo $GEODE_HOME | sed 's/\//\\\//g')
   TEMPLATE_HAZELCAST_HOME=$(echo $HAZELCAST_HOME | sed 's/\//\\\//g')
   TEMPLATE_HAZELCAST_MC_HOME=$(echo $HAZELCAST_MC_HOME | sed 's/\//\\\//g')
   TEMPLATE_JET_HOME=$(echo $JET_HOME | sed 's/\//\\\//g')
   TEMPLATE_JET_MC_HOME=$(echo $JET_MC_HOME | sed 's/\//\\\//g')
   TEMPLATE_SNAPPYDATA_HOME=$(echo $SNAPPYDATA_HOME | sed 's/\//\\\//g')
   TEMPLATE_COHERENCE_HOME=$(echo $COHERENCE_HOME | sed 's/\//\\\//g')
   TEMPLATE_REDIS_HOME=$(echo $REDIS_HOME | sed 's/\//\\\//g')
   TEMPLATE_HADOOP_HOME=$(echo $HADOOP_HOME | sed 's/\//\\\//g')
   TEMPLATE_KAFKA_HOME=$(echo $KAFKA_HOME | sed 's/\//\\\//g')
   TEMPLATE_SPARK_HOME=$(echo $SPARK_HOME | sed 's/\//\\\//g')

   sed -e "s/\${TEMPLATE_JAVA_HOME}/$TEMPLATE_JAVA_HOME/" \
       -e "s/\${TEMPLATE_PADOGRID_HOME}/$TEMPLATE_PADOGRID_HOME/" \
       -e "s/\${TEMPLATE_PADO_HOME}/$TEMPLATE_PADO_HOME/" \
       -e "s/\${TEMPLATE_GEMFIRE_HOME}/$TEMPLATE_GEMFIRE_HOME/" \
       -e "s/\${TEMPLATE_GEODE_HOME}/$TEMPLATE_GEODE_HOME/" \
       -e "s/\${TEMPLATE_HAZELCAST_HOME}/$TEMPLATE_HAZELCAST_HOME/" \
       -e "s/\${TEMPLATE_HAZELCAST_MC_HOME}/$TEMPLATE_HAZELCAST_MC_HOME/" \
       -e "s/\${TEMPLATE_JET_HOME}/$TEMPLATE_JET_HOME/" \
       -e "s/\${TEMPLATE_JET_MC_HOME}/$TEMPLATE_JET_MC_HOME/" \
       -e "s/\${TEMPLATE_SNAPPYDATA_HOME}/$TEMPLATE_SNAPPYDATA_HOME/" \
       -e "s/\${TEMPLATE_COHERENCE_HOME}/$TEMPLATE_COHERENCE_HOME/" \
       -e "s/\${TEMPLATE_REDIS_HOME}/$TEMPLATE_REDIS_HOME/" \
       -e "s/\${TEMPLATE_HADOOP_HOME}/$TEMPLATE_HADOOP_HOME/" \
       -e "s/\${TEMPLATE_KAFKA_HOME}/$TEMPLATE_KAFKA_HOME/" \
       -e "s/\${TEMPLATE_SPARK_HOME}/$TEMPLATE_SPARK_HOME/" \
       -e "s/\${TEMPLATE_PRODUCT_HOME}/$TEMPLATE_PRODUCT_HOME/" \
       -e "s/\${TEMPLATE_DEFAULT_PRODUCT}/$PRODUCT/" \
       "$PARENT_DIR/etc/init/template-rwe_setenv.sh" \
       > "$WORKSPACES_HOME/setenv.sh"
fi

# Create .${PRODUCT}env.sh (gemfire->.geodeenv.sh, jet->.hazelcastenv.sh)
createProductEnvFile "$PRODUCT" "$WORKSPACES_HOME"

#
# Copy initenv.sh
#
if [ ! -f $WORKSPACES_HOME/initenv.sh ]; then
   cp $PADOGRID_HOME/etc/init/rwe_initenv.sh $WORKSPACES_HOME/initenv.sh
fi

#
# Create .addonenv.sh
#
if [ ! -f $WORKSPACES_HOME/.addonenv.sh ]; then
   echo "#!/usr/bin/env bash" > $WORKSPACES_HOME/.addonenv.sh
   echo "SCRIPT_DIR=\"\$(cd -P -- \"\$(dirname -- \"\${BASH_SOURCE[0]}\")\" && pwd -P)\"" >> $WORKSPACES_HOME/.addonenv.sh
   echo "" >> $WORKSPACES_HOME/.addonenv.sh
   echo "export PADOGRID_VERSION=$PADOGRID_VERSION" >> $WORKSPACES_HOME/.addonenv.sh
   echo "export PADOGRID_WORKSPACES_HOME_CREATION_DATE=\"`date "+%m/%d/%y %H:%M:%S %Z"`\"" >> $WORKSPACES_HOME/.addonenv.sh
   echo "export PADOGRID_WORKSPACES_HOME=\"\$SCRIPT_DIR\"" >> $WORKSPACES_HOME/.addonenv.sh
fi

#
# Create ~/.padogrid/setenv.sh if it does not exist
#
HOME_PADOGRID_DIR="$HOME/.padogrid"

if [ ! -d "$HOME_PADOGRID_DIR" ]; then
   mkdir "$HOME_PADOGRID_DIR"
fi
if [ ! -f "$HOME_PADOGRID_DIR/setenv.sh" ]; then
   echo "#!/usr/bin/env bash" > "$HOME_PADOGRID_DIR/setenv.sh"
   echo "" >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "#" >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "# Enter a space separated list of GitHub user names. These users' repos" >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "# will be searched by the bundle commands." >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "#" >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "GITHUB_USERS=\"\"" >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "" >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "#" >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "# Enter "true" to use ssh to clone GitHub repos, "false" to use https." >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "#" >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "GITHUB_PRIVATE_REPO_ENABLED=\"false\"" >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "" >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "#" >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "# Enter Gitea URL. Example: https://foo.com" >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "#" >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "GITEA_HTTPS_URL=\"\"" >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "" >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "#" >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "# Enter Gitea ssh URL. Example: git@foo.com" >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "#" >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "GITEA_SSH_URL=\"\"" >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "" >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "#" >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "# Enter a space separated list of users of the alternate Gitea URL. In addition" >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "# to the GitHub repos, these users' repos will be searched by the bundle commands." >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "#" >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "GITEA_USERS=\"\"" >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "" >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "#" >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "# Enter Gitea repo access token. For private repos, the repo access token is required." >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "#" >>  "$HOME_PADOGRID_DIR/setenv.sh"
   echo "GITEA_ACCESS_TOKEN=\"\"" >>  "$HOME_PADOGRID_DIR/setenv.sh"
fi

#
# Report Workspaces Summary
#
echo "PadoGrid workspaces initialized:"
echo "   $WORKSPACES_HOME"
echo ""
echo "The workspaces directory contains the following files."
echo ""
echo "   setenv.sh -  Sets the default rwe environment variables. You can set your"
echo "                rwe-wide environment variables in this file. All workspaces and"
echo "                their components inherit the rwe environment variables."
echo ""
echo "   .addonenv.sh - A hidden file containing the workspaces metadata information."
echo ""
if [ "$JAVA_HOME" == "" ] || [ "$PRODUCT_HOME" == "" ]; then
   echo ""
   echo "The following environment variable(s) are not set. Although they are not"
   echo "required, you should set them in the 'setenv.sh' file so that you don't"
   echo "need to manually enter them when you create workspaces."
   echo ""
   if [ "$JAVA_HOME" == "" ]; then
      echo "   JAVA_HOME"
   fi
   case $PRODUCT in
   hazelcast)
      if  [ "$HAZELCAST_HOME" == "" ]; then
         echo "   HAZELCAST_HOME"
      fi
      ;;
   jet)
      if  [ "$JET_HOME" == "" ]; then
         echo "   JET_HOME"
      fi
      ;;
   geode)
      if  [ "$GEODE_HOME" == "" ]; then
         echo "   GEODE_HOME"
      fi
      ;;
   gemfire)
      if  [ "$GEMFIRE_HOME" == "" ]; then
         echo "   GEMFIRE_HOME"
      fi
      ;;
   snappydata)
      if  [ "$SNAPPYDATA_HOME" == "" ]; then
         echo "   SNAPPYDATA_HOME"
      fi
      ;;
   coherence)
      if  [ "$COHERENCE_HOME" == "" ]; then
         echo "   COHERENCE_HOME"
      fi
      ;;
   redis)
      if  [ "$REDIS_HOME" == "" ]; then
         echo "   REDIS_HOME"
      fi
      ;;
   hadoop)
      if  [ "$HADOOP_HOME" == "" ]; then
         echo "   HADOOP_HOME"
      fi
      ;;
   kafka)
      if  [ "$KAFKA_HOME" == "" ]; then
         echo "   KAFKA_HOME"
      fi
      ;;
   spark)
      if  [ "$SPARK_HOME" == "" ]; then
         echo "   SPARK_HOME"
      fi
      ;;
   esac
fi

# Display workspace and cluster info.
echo ""
echo "Summary:"
echo "--------"
echo "       Workspaces: $WORKSPACES_HOME"
echo "Default Workspace: $WORKSPACE"
echo "  Default Cluster: $CLUSTER"
echo "       VM Cluster: $VM_ENABLED"
echo ""
echo "PADOGRID_WORKSPACES_HOME: $PADOGRID_WORKSPACES_HOME"
echo "      PADOGRID_WORKSPACE: $PADOGRID_WORKSPACE"
echo "     Default Cluster Dir: $PADOGRID_WORKSPACE/clusters/$CLUSTER"
echo ""
case $PRODUCT in
hazelcast|jet)
   if [ "$IS_HAZELCAST_ENTERPRISE" == "true" ]; then
      echo "License Keys:"
      echo "-------------"
      echo "Make sure to set your enterprise license keys (IMDG and/or Jet) in the following file:"
      echo -e "   ${CLightRed}$PADOGRID_WORKSPACES_HOME/.hazelcastenv.sh${CNone}"
      echo ""
   fi
   ;;
esac

echo "IMPORTANT:"
echo "----------"
echo "To use this root workspaces environment (rwe), if you haven't done so already with"
echo "another rwe, you must first source in the initenv.sh file as shown below. It is"
echo "recommended that you add this line in your ~/.bashrc (~/.bash_profile, etc) file."
echo "If you are adding it in ~/.bashrc, then make sure to include the '-quiet' option,"
echo "otherwise, the VM commands may not work properly."
echo -e "   ${CLightGreen}. $WORKSPACES_HOME/initenv.sh -quiet${CNone}"
echo ""
echo "To switch to the new workspace you just created, run the following:"
echo -e "   ${CLightGreen}switch_rwe ${RWE_NAME}; switch_workspace ${WORKSPACE}${CNone}"
echo ""

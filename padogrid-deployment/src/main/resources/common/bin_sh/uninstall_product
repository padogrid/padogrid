#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020-2022 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

# 
# Determine the PadoGrid environment base path. Default is "$HOME/Padogrid".
#
if [ "$PADOGRID_ENV_BASE_PATH" == "" ]; then
   if [ "$PADOGRID_HOME" == "" ]; then
      PADOGRID_ENV_BASE_PATH="$HOME/Padogrid"
   else
      PADOGRID_ENV_BASE_PATH="$(dirname $(dirname $PADOGRID_WORKSPACES_HOME))"
   fi
fi      

__options()
{
   echo "-product -version -force -quiet -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Uninstall the specified product version

SYNOPSIS
   $EXECUTABLE -product product_name -version product_version [-force] [-quiet] [-?]

DESCRIPTION
   Uninstalls the specified product version. By default, if the specified product version
   is in use by workspaces, then this command aborts with an error message. To override
   this, specify the '-force' option, which uninstalls the product regardless of whether
   it is being used.

   If forced (-force), then you will not be able to run the workspaces that depend on
   the product version that you uninstalled. You will need to update them with another
   product version by executing the 'update_products -product' command.

OPTIONS
   -product
             Product name. Required.
   -version
             Product version. Required.

   -force
             Force uninstallation. If not specified, then this command aborts if the
             specified product version is in use by any of the workspaces. Optional.

   -quiet
             If specified, then it runs in the non-interactive mode. It wil not prompt for
             confirmation before continue uninstalling the specified product. Optional.

IMPORTANT
   You should always shutdown all the running processes that depend on the specified product
   version before executing this command. Otherwise, the running processes may become unstable
   and may needlessly drain the system resources.

EOF
cat <<EOF
SEE ALSO
EOF
   printSeeAlsoList "change_version install_padogrid show_products update_products" $EXECUTABLE
   exit
fi

if [ "$PRODUCT_ARG" == "" ]; then
   echo -e "${CLightRed}ERROR:${CNone} Product name unspecified. Use the '-product' option to specify the product to uninstall."
   echo "       Command aborted."
   exit 1
fi
if [ "$VERSION_ARG" == "" ]; then
   echo -e "${CLightRed}ERROR:${CNone} Product version unspecified. Use the '-version' option to specify the product version to uninstall."
   echo "       Command aborted."
   exit 1
fi

#
# Sets product version env variables based on the exported *_HOME env variables.
# The product version env varialbles begin with the prefix "__" (2 underscores).
# 
function getProductVersions
{
   __PADOGRID_VERSION=${PADOGRID_HOME#*padogrid_}
   __PADO_VERSION=${PADO_HOME#*pado_}
   __PADODESKTOP_VERSION=${PADODESKTOP_HOME#*pado-desktop_}
   __PADOWEB_VERSION=${PADO_HOME#*padoweb_}
   __GEMFIRE_VERSION=${GEMFIRE_HOME#*pivotal-gemfire-}
   __GEODE_VERSION=${GEODE_HOME##*apache-geode-}
   __HAZELCAST_ENTERPRISE_VERSION=${HAZELCAST_HOME#*hazelcast-enterprise-}
   if [[ ! $__HAZELCAST_ENTERPRISE_VERSION =~ ^[0-9] ]]; then
      __HAZELCAST_ENTERPRISE_VERSION=""
   fi
   if [[ "$HAZELCAST_MC_HOME" == *"management-center" ]] && [ -d "$HAZELCAST_MC_HOME" ]; then
      for i in $HAZELCAST_MC_HOME/*.jar; do
         if [[ "$i" == *"hazelcast-management-center"* ]]; then
            __HAZELCAST_MC_VERSION=${i#*hazelcast-management-center-}
            __HAZELCAST_MC_VERSION=${__HAZELCAST_MC_VERSION%.jar}
            break;
         fi
      done
   else
      __HAZELCAST_MC_VERSION=${HAZELCAST_MC_HOME#*hazelcast-management-center-}
   fi
   __HAZELCAST_DESKTOP_VERSION=${HAZELCAST_DESKTOP_HOME#*hazelcast-desktop_}
   __JET_ENTERPRISE_VERSION=${JET_HOME#*hazelcast-jet-enterprise-}
   __JET_OSS_VERSION=${JET_HOME#*hazelcast-jet-}
   __HAZELCAST_OSS_VERSION=${HAZELCAST_HOME#*hazelcast-}
   if [[ ! $__HAZELCAST_OSS_VERSION =~ ^[0-9] ]]; then
      __HAZELCAST_OSS_VERSION=""
   fi
   if [[ "$JET_MC_HOME" == *"4.2021"* ]]; then
      __JET_MC_VERSION=${JET_MC_HOME#*hazelcast-management-center-}
   else
      __JET_MC_VERSION=${JET_MC_HOME#*hazelcast-jet-management-center-}
   fi
   __SNAPPYDATA_VERSION=${SNAPPYDATA_HOME#*snappydata-}
   __SPARK_VERSION=${SPARK_HOME#*spark-}
   __HADOOP_VERSION=${HADOOP_HOME#*hadoop-}
}

#
# Returns the product version
#
# @param productName Product name.
#
function getProductVersion
{
   local __PRODUCT_NAME="$1"
   local __PRODUCT_VERSION=""

   case "$__PRODUCT_NAME" in
   padogrid)
     __PRODUCT_VERSION="$__PADOGRID_VERSION"
     ;;
   pado)
     __PRODUCT_VERSION="$__PADO_VERSION"
     ;;
   padodekstop)
     __PRODUCT_VERSION="$__PADODESKTOP_VERSION"
     ;;
   padoweb)
     __PRODUCT_VERSION="$__PADOWEB_VERSION"
     ;;
   geode)
     __PRODUCT_VERSION="$__GEODE_VERSION"
     ;;
   hazelcast-enterprise)
     __PRODUCT_VERSION="$__HAZELCAST_ENTERPRISE_VERSION"
     ;;
   hazelcast-oss)
     __PRODUCT_VERSION="$__HAZELCAST_OSS_VERSION"
     ;;
   hazelcast-mc)
     __PRODUCT_VERSION="$__HAZELCAST_MC_VERSION"
     ;;
   hazelcast-desktop)
     __PRODUCT_VERSION="$__HAZELCAST_DESKTOP_VERSION"
     ;;
   jet-enterprise)
     __PRODUCT_VERSION="$__JET_VERSION"
     ;;
   jet-oss)
     __PRODUCT_VERSION="$__JET_OSS_VERSION"
     ;;
   snappydata)
     __PRODUCT_VERSION="$__SNAPPYDATA_VERSION"
     ;;
   spark)
     __PRODUCT_VERSION="$__SPARK_VERSION"
     ;;
   kafka)
     __PRODUCT_VERSION="$__KAFKA_VERSION"
     ;;
   hadoop)
     __PRODUCT_VERSION="$__HADOOP_VERSION"
     ;;
   *)
     ;;
   esac

   echo "$__PRODUCT_VERSION"
}

#
# Returns a list of product versions configured for the entire workspaces
# in the specified RWE for the specified product.
#
# @param productName Product name. If unspecified, then returns an empty string. Required.
# @param rweName     RWE name. If unspecified, then the current RWE is assigned. Optional.
function getRweVersions
{
   local __PRODUCT_NAME="$1"
   local __RWE_NAME="$2"
   if [ "$__PRODUCT_NAME" == "" ]; then
      echo ""
      return
   fi
   if [ "$__RWE_NAME" == "" ]; then
      __RWE_NAME=$(basename "$PADOGRID_WORKSPACES_HOME")
   fi
   if [ "$__RWE_NAME" == "" ]; then
      echo ""
      return
   fi
   
   local __RWE_PATH="$PADOGRID_ENV_BASE_PATH/workspaces/$__RWE_NAME"
   if [ ! -f "$__RWE_PATH/setenv.sh" ]; then
      echo ""
      return
   fi
   . "$__RWE_PATH/setenv.sh"
   getProductVersions
   local __PRODUCT_VERSION_LIST=$(getProductVersion $__PRODUCT_NAME)

   local __PRODUCT_VERSIONS=""
   for __WORKSPACE in $(list_workspaces -rwe $__RWE_NAME); do
      __WORKSPACE_PATH="$__RWE_PATH/$__WORKSPACE"
      if [ ! -f "$__WORKSPACE_PATH/setenv.sh" ]; then
         continue;
      fi
      . $__WORKSPACE_PATH/setenv.sh
      getProductVersions
      __PRODUCT_VERSION_LIST="$__PRODUCT_VERSION_LIST $(getProductVersion $__PRODUCT_NAME)"
      __PRODUCT_VERSION_LIST=$(unique_words "$__PRODUCT_VERSION_LIST")
   done
   echo "$__PRODUCT_VERSION_LIST"
}

#
# Returns the specified product path
#
# @param productName   Product name.
# @param producVersion Product version.
#
function getProductPath
{
   local __PRODUCT_NAME="$1"
   local __PRODUCT_VERSION="$2"
   if [ "$__PRODUCT_NAME" == "" ] || [ "$__PRODUCT_VERSION" == "" ]; then
      echo ""
      return
   fi

   local __PRODUCT_PATH=""
   case "$__PRODUCT_NAME" in
   padogrid|pado|padoweb)
     __PRODUCT_PATH="$PADOGRID_ENV_BASE_PATH/products/${__PRODUCT_NAME}_$__PRODUCT_VERSION"
     ;;
   padodesktop)
     __PRODUCT_PATH="$PADOGRID_ENV_BASE_PATH/products/pado-desktop_$__PRODUCT_VERSION"
     ;;
   geode)
     __PRODUCT_PATH="$PADOGRID_ENV_BASE_PATH/products/apache-geode-$__PRODUCT_VERSION"
     ;;
   gemfire)
     __PRODUCT_PATH="$PADOGRID_ENV_BASE_PATH/products/pivotal-gemfire-$__PRODUCT_VERSION"
     ;;
   hazelcast-enterprise)
     __PRODUCT_PATH="$PADOGRID_ENV_BASE_PATH/products/hazelcast-enterprise-$__PRODUCT_VERSION"
     ;;
   hazelcast-oss)
     __PRODUCT_PATH="$PADOGRID_ENV_BASE_PATH/products/hazelcast-$__PRODUCT_VERSION"
     ;;
   hazelcast-mc)
     __PRODUCT_PATH="$PADOGRID_ENV_BASE_PATH/products/hazelcast-management-center-$__PRODUCT_VERSION"
     ;;
   hazelcast-desktop)
     __PRODUCT_PATH="$PADOGRID_ENV_BASE_PATH/products/hazelcast-desktop_$__PRODUCT_VERSION"
     ;;
   jet-enterprise)
     __PRODUCT_PATH="$PADOGRID_ENV_BASE_PATH/products/hazelcast-enterprise-jet-$__PRODUCT_VERSION"
     ;;
   jet-oss)
     __PRODUCT_PATH="$PADOGRID_ENV_BASE_PATH/products/hazelcast-jet-$__PRODUCT_VERSION"
     ;;
   snappydata)
     __PRODUCT_PATH="$PADOGRID_ENV_BASE_PATH/products/snappydata-$__PRODUCT_VERSION"
     ;;
   spark)
     __PRODUCT_PATH="$PADOGRID_ENV_BASE_PATH/products/spark-$__PRODUCT_VERSION"
     ;;
   kafka)
     __PRODUCT_PATH="$PADOGRID_ENV_BASE_PATH/products/kafka_$__PRODUCT_VERSION"
     ;;
   hadoop)
     __PRODUCT_VERSION="$__HADOOP_VERSION"
     __PRODUCT_PATH="$PADOGRID_ENV_BASE_PATH/products/hadoop-$__PRODUCT_VERSION"
     ;;
   *)
     ;;
   esac
   echo "$__PRODUCT_PATH"
}

determineInstalledProductVersions

PRODUCT_VERSION_LIST=""
for rwe in $(list_rwes); do
   PRODUCT_VERSION_LIST="$PRODUCT_VERSION_LIST $(getRweVersions $PRODUCT_ARG $rwe)"
done
PRODUCT_VERSION_LIST=$(unique_words "$PRODUCT_VERSION_LIST")

if [[ $PRODUCT_VERSION_LIST == *"$VERSION_ARG"* ]]; then
   if [ "$FORCE_SPECIFIED" != "true" ]; then
      echo "The specified version is in use: [$VERSION_ARG]. To unstall, specify '-force'. Command aborted."
      exit
   fi
fi

# Uninstall
PRODUCT_PATH=$(getProductPath $PRODUCT_ARG $VERSION_ARG)
if [ ! -d "$PRODUCT_PATH" ]; then
   echo -e "${CLightRed}ERROR:${CNone} Unable to determine the product path for the specified product. Command aborted."
   echo "     Product: $PRODUCT_ARG"
   echo "     Version: $VERSION_ARG"
   echo "Product Path: $PRODUCT_PATH"
   exit 1
else
   # Prompt for confirmation
   if [ "$QUIET" == "false" ]; then
      echo ""
      echo "The following product will be permanently uninstalled."
      echo ""
      echo "        Product: $PRODUCT_ARG"
      echo "        Version: $VERSION_ARG"
      echo "   Product Path: $PRODUCT_PATH"
      echo ""
      echo "Do you want to continue?"
      echo "(Enter 'continue' + Enter to continue to uninstall the product, other keys to abort.)"
      read INPUT
      if [ "$INPUT" != "continue" ]; then
         echo "Product uninstallation aborted."
         echo ""
         exit
      fi
   fi
   echo ""
   echo "Uninstalling $PRODUCT_PATH..."
   rm -rf $PRODUCT_PATH
   echo "Product uninstalled. Make sure to update the workspaces using the unstalled product by"
   echo "running the update_products command as follows."
   echo ""
   echo "   update_products -product $PRODUCT_ARG"
   echo ""
fi

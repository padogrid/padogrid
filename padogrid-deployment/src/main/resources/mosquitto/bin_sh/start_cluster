#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020-2024 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-cluster -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Start all inactive members in the specified cluster

SYNOPSIS
   $EXECUTABLE [-cluster cluster_name]

DESCRIPTION
   Starts all inactive (or stopped) members in the specified cluster.

OPTIONS
   -cluster cluster_name
             Cluster name.

EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
DEFAULT
   $EXECUTABLE -cluster $CLUSTER

EOF
fi
cat <<EOF
SEE ALSO
EOF
   printSeeAlsoList "*cluster*" $EXECUTABLE
   exit
fi

retrieveClusterEnvFile $PADOGRID_WORKSPACE/clusters/$CLUSTER

#
# Run the target cluster command if the product is different.
#
if [ "$PRODUCT_CLUSTER_SPECIFIED" == "false" ]; then
   THIS_PRODUCT="$(basename $(dirname $SCRIPT_DIR))"
   if [ "$THIS_PRODUCT" != "$PRODUCT" ]; then
      $PADOGRID_HOME/$PRODUCT/bin_sh/$EXECUTABLE -product-cluster $CLUSTER "$@"
      exit
   fi
fi

POD=`getClusterProperty "pod.name" "local"`

#
# VM cluster
#
VM_ENABLED=`getClusterProperty "vm.enabled" "false"`
if [ "$VM_ENABLED" == "true" ]; then
   VM_HOSTS=$(getClusterProperty "vm.hosts")
   if [ "$VM_HOSTS" == "" ]; then
      echo "----------------------------------------------------------------"
      echo "WORKSPACE: $PADOGRID_WORKSPACE"
      echo "    ERROR: VM hosts undefined. Set 'vm.hosts' in the following cluster.properties file."  
      echo "           $ETC_DIR/cluster.properties"
      echo "           Command aborted."
      echo "----------------------------------------------------------------"
      exit 1
   fi

   # If pod cluster, then source in the pod env vars to set the VM specific variables
   OS_ENV=`getOsEnv`
   if [ "$OS_ENV" == "gh" ] && [ "$POD" != "local" ]; then
      if [ -f "$PODS_DIR/$POD/.nodeenv.sh" ]; then
         . "$PODS_DIR/$POD/.nodeenv.sh"
      fi
   fi

   VM_USER=`getVmUser`
   VM_KEY=`getVmKeyArg`
   if [ "$(isVmPrivateHostReachable "$VM_USER" "$VM_KEY")" == "true" ]; then
      # If private hosts are reachable then execute from here.
      # Replace , with space
      __VM_HOSTS=$(echo "$VM_HOSTS" | sed "s/,/ /g")
      MEMBER_NUM=1
      for VM_HOST in $__VM_HOSTS; do
         ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$COMMAND_PREFIX $VM_PADOGRID_HOME/$PRODUCT/bin_sh/start_member -cluster $CLUSTER -vm $VM_HOSTS  $@ -remote $VM_HOST -workspace $VM_PADOGRID_WORKSPACE -num $MEMBER_NUM" &
         if [ "$POD" != "local" ]; then
            let MEMBER_NUM=MEMBER_NUM+1
         fi
      done
   else
      # If private hosts are not reachable then use a public host as a proxy to execute this command.
      #RWE_NAME=$(basename $PADOGRID_WORKSPACES_HOME)
      #WORKSPACE=$(basename $PADOGRID_WORKSPACE)
      RWE_NAME=$(basename $VM_PADOGRID_WORKSPACES_HOME)
      WORKSPACE=$(basename $VM_PADOGRID_WORKSPACE)

      VM_PUBLIC_HOSTS=`getClusterProperty "vm.public.hosts"`
      if [ "$VM_PUBLIC_HOSTS" == "" ]; then
         echo -e "${CLightRed}ERROR:${CNone} Unable to connect to VM hosts. Please set 'vm.public.hosts' in 'etc/cluster.properties."
         echo "       Command aborted."
         exit 1
      fi

      # Replace , with space
      __VM_HOSTS=$(echo "$VM_PUBLIC_HOSTS" | sed "s/,/ /g")
      for VM_HOST in $__VM_HOSTS; do
         ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "switch_rwe $RWE_NAME/$WORKSPACE && $COMMAND_PREFIX $VM_PADOGRID_HOME/$PRODUCT/bin_sh/$EXECUTABLE -cluster $CLUSTER $@"
         break;
      done
   fi
   exit
fi

#
# Local cluster
#
NODE_NAME_PREFIX=`getPodProperty "node.name.prefix" $NODE_NAME_PREFIX`

MEMBER_PREFIX=`getMemberPrefix`
MEMBER_PREFIX_LEN=${#MEMBER_PREFIX}

NODE_COUNT=`getPodProperty "node.count" 0`
MEMBER_COUNT=`getMemberCount`

# Show warning message if the member count is greater than the pod size.
if [ "$POD" != "local" ]; then
   if [ "$MEMBER_COUNT" -gt "$NODE_COUNT" ]; then
       echo "WARNING: The cluster member count ($MEMBER_COUNT) exceeds the data node count ($NODE_COUNT) in the pod."
       echo "         Only $NODE_COUNT members will be started."
   fi
fi

if [ "$(isClusterExist $CLUSTER)" == "false" ]; then
   echo "----------------------------------------------------------------"
   echo "WORKSPACE: $PADOGRID_WORKSPACE"
   echo "  Cluster: $CLUSTER"
   echo "    ERROR: This cluster has not been created. Please run the create_cluster command"
   echo "           to create the cluster before running this command. Command aborted."
   echo "----------------------------------------------------------------"
   exit 1
fi

# TODO: The following assumes that the member numbers exist consecutively.
#       Need a way to pass the node number to start_member.
# Start members
HOST_NAME=`hostname`
BIND_ADDRESS=`getClusterProperty "cluster.bindAddress" "$HOST_NAME"`
pushd $RUN_DIR > /dev/null 2>&1
COUNT=0
for i in ${MEMBER_PREFIX}*; do
   if [ -d "$i" ]; then
      let COUNT=COUNT+1
      pushd $i > /dev/null 2>&1
      MEMBER_NUMBER=${i:$MEMBER_PREFIX_LEN}
      MEMBER_NUM_NO_LEADING_ZERO=$((10#$MEMBER_NUMBER))
      start_member -cluster $CLUSTER -num $MEMBER_NUM_NO_LEADING_ZERO $@
      popd > /dev/null 2>&1
   fi
   if [ "$POD" != "local" ]; then
      if [ "$COUNT" -ge "$NODE_COUNT" ]; then
         break;
       fi
   fi
done
popd > /dev/null 2>&1

if [ "$MEMBER_NUMBER" == "" ]; then
   echo "----------------------------------------------------------------"
   echo "WORKSPACE: $PADOGRID_WORKSPACE"
   echo "     INFO: Cluster has no members defined: [$CLUSTER]. Please add members by executing the 'add_member' command."
   echo "----------------------------------------------------------------"
fi

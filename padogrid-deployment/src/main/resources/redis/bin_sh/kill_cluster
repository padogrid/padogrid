#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020-2022 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-cluster -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Kill all running members in the specified cluster

SYNOPSIS
   $EXECUTABLE [-cluster cluster_name] [-?]

DESCRIPTION
   Kills all running Redis members by executing 'kill_member' which kills
   members individually. This command provides a quick way to stop the cluster
   but may cause data corruption if the members have persistence enabled. To
   gracefully stop the cluster, use the 'stop_cluster' or 'shutdown_cluster'.

OPTIONS
   -cluster cluster_name
             Cluster name.

EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat << EOF
DEFAULT
   $EXECUTABLE -cluster $CLUSTER

EOF
fi
cat << EOF
SEE ALSO
EOF
   printSeeAlsoList "*cluster*" $EXECUTABLE
   exit
fi

#
# Run the target cluster command if the product is different.
#
if [ "$PRODUCT_CLUSTER_SPECIFIED" == "false" ]; then
   THIS_PRODUCT="$(basename $(dirname $SCRIPT_DIR))"
   if [ "$THIS_PRODUCT" != "$PRODUCT" ]; then
      $PADOGRID_HOME/$PRODUCT/bin_sh/$EXECUTABLE -product-cluster $CLUSTER "$@"
      exit
   fi
fi

# 
# VM cluster
#
VM_ENABLED=`getClusterProperty "vm.enabled" "false"`
if [ "$VM_ENABLED" == "true" ]; then
   VM_HOSTS=`getClusterProperty "vm.hosts"`
   if [ "$VM_HOSTS" == "" ]; then
      echo "WORKSPACE: $PADOGRID_WORKSPACE"
      echo "    ERROR: VM hosts undefined. Set 'vm.hosts' in the following cluster.properties file."  
      echo "           $ETC_DIR/cluster.properties"
      echo "           Command aborted."
      exit 1
   fi

   DEFAULT_USER=$(whoami)
   VM_USER=`getClusterProperty "vm.user" "$DEFAULT_USER"`
   VM_KEY=`getClusterProperty "vm.privateKeyFile"`
   if [ "$VM_KEY" != "" ]; then 
      VM_KEY="-i $VM_KEY"
   fi

   # Members
   # Replace , with space
   __VM_HOSTS=$(echo "$VM_HOSTS" | sed "s/,/ /g")
   MEMBER_NUM=1
   for VM_HOST in $__VM_HOSTS; do
      ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no "$COMMAND_PREFIX $VM_PADOGRID_HOME/$PRODUCT/bin_sh/kill_member -cluster $CLUSTER -remote $VM_HOST -workspace $VM_PADOGRID_WORKSPACE -num $MEMBER_NUM"
      if [ "$POD" != "local" ]; then
         let MEMBER_NUM=MEMBER_NUM+1
      fi
   done
   exit
fi

#
# Local cluster
#
POD=`getClusterProperty "pod.name" "local"`
NODE_NAME_PREFIX=`getPodProperty "node.name.prefix" $NODE_NAME_PREFIX`

# For pod clusters. If non-pod, the following variables are ignored.
#PRIMARY_NODE_NAME=`getPodProperty "node.name.primary" "$DEFAULT_NODE_NAME_PRIMARY"`
#NODE_NAME_PREFIX=$PRIMARY_NODE_NAME
#NODE_LOCAL="${PRIMARY_NODE_NAME}.local"

MEMBER_PREFIX=`getMemberPrefix`
MEMBER_PREFIX_LEN=${#MEMBER_PREFIX}
RUN_DIR=$CLUSTERS_DIR/$CLUSTER/run

pushd $RUN_DIR > /dev/null 2>&1
# Kill members
for i in ${MEMBER_PREFIX}*; do
   if [ -d "$i" ]; then
      pushd $i > /dev/null 2>&1
      MEMBER_NUMBER=${i:$MEMBER_PREFIX_LEN}
      kill_member -cluster $CLUSTER -num $MEMBER_NUMBER
      popd > /dev/null 2>&1
   fi
done
popd > /dev/null 2>&1

#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020-2022 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

# Set PRODUCT here. This is necessary due to the default product read from
# the RWE setenv.sh by the above .addonenv.sh
PRODUCT="redis"

EXECUTABLE="`basename $0`"

__options()
{
   echo "-cluster -pod -vm -port -replicas -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Create a new cluster in the current padogrid workspace

SYNOPSIS
   $EXECUTABLE [-cluster cluster_name]
               [-pod pod_name]
               [-vm [comma_separated_hosts]]
               [-port first_port_number]
               [-replicas replicas] [-?]

DESCRIPTION
   Creates a new cluster in the current workspace. Once the cluster is created,
   you can change the settings in the following file:

   etc/cluster.properties

OPTIONS
   -cluster cluster_name
             Unique cluster name. The cluster name is prepended
             to all member names.

   -pod pod_name
             Pod name. The 'local' pod is the local machine. This option overrides the '-vm'
             option. 
             Default: local

   -vm [comma_separated_hosts]
             A list of VM hosts or addresses separated by comma. If the list
             contains spaces then enclosed it in quotes. If this option is not
             specified, then the host list defined by VM_HOSTS in the workspace
             'setenv.sh' file is applied.

   -port first_port_number
             First member's port number. Port number is incremented
             starting from this port number for the subsquent members.
             
             This option applies only for a cluster running locally. It is ignored
             for creating non-local pod and VM clusters.
             
             Default: $DEFAULT_MEMBER_START_PORT

   -replicas node_replicas
             Number of node replicas. Redis requires at least three (3) master servers
             to enable 1 or more replicas. That means for replicas of 1, the cluster must have at
             least six (6) nodes, 3 master nodes and 3 slave nodes. For replicas of 2, the cluster
             must have at least 9 nodes. Node is equivalent to member.

             PadoGrid automatically adds the miminum number of members based on this value.

             Default: $REPLICAS

EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
DEFAULT
   $EXECUTABLE -cluster $CLUSTER -pod $POD -port $DEFAULT_MEMBER_START_PORT

FILES
   $PADOGRID_WORKSPACE/setenv.sh
             The current workspace configuration file.

EOF
fi
cat <<EOF
SEE ALSO
EOF
   printSeeAlsoList "*cluster*" $EXECUTABLE
   exit
fi

if [ -z $CLUSTER ]; then
   echo >&2 "----------------------------------------------------------------"
   echo >&2 "WORKSPACE: $PADOGRID_WORKSPACE"
   echo >&2 "    ${CLightRed}ERROR:${CNone} Cluster name is not specified. Command aborted." 
   echo >&2 "----------------------------------------------------------------"
   exit 1
fi

# Abort if the cluster exists
CLUSTER_DIR=$CLUSTERS_DIR/$CLUSTER
if [ -d $CLUSTER_DIR ]; then
   echo >&2 "----------------------------------------------------------------"
   echo >&2 "WORKSPACE: $PADOGRID_WORKSPACE"
   echo -e >&2 "    ${CLightRed}ERROR:${CNone} Cluster already exists: [$CLUSTER]. Command aborted."
   echo >&2 "----------------------------------------------------------------"
   exit 1
fi

# Suppress pod if VM specified
#if [ "$VM_SPECIFIED" == "true" ]; then
#   POD="local"
#fi

if [ "$POD_SPECIFIED" == "false" ]; then
   POD="local"
fi
if [ "`isPodExist $POD`" == "false" ]; then
   echo >&2 "----------------------------------------------------------------"
   echo >&2 "WORKSPACE: $PADOGRID_WORKSPACE"
   echo -e >&2 "    ${CLightRed}ERROR:${CNone} This pod does not exist [$POD]. Command aborted."
   echo >&2 "----------------------------------------------------------------"
   exit 1
fi

if [ "$(isNumber $REPLICAS)" == "false" ] || [ $REPLICAS -lt 0 ] || [ $REPLICAS -gt $MAX_REPLICAS ]; then
   echo >&2 "----------------------------------------------------------------"
   echo >&2 "WORKSPACE: $PADOGRID_WORKSPACE"
   echo -e >&2 "    ${CLightRed}ERROR:${CNone} Replicas must be in [0, 3]. Command aborted."
   echo >&2 "----------------------------------------------------------------"
   exit 1
fi

# If -product (hidden option) is specified then make it default. This effectively
# provides a way to create any product clusters in the same workspace.
if [ "$PRODUCT_ARG" != "" ]; then
   PRODUCT=$PRODUCT_ARG
fi

function writeCluster() 
{
   # Update cluster env file with PRODUCT and CLUSTER_TYPE
   CLUSTER_TYPE="redis"
   updateClusterEnvFile

   # Copy the template-redis.conf file
   cp $BASE_DIR/etc/template-redis.conf $ETC_DIR/

   # Create bin_sh/setenv.sh
   mkdir -p $CLUSTER_DIR/bin_sh
   echo "#" > $CLUSTER_DIR/bin_sh/setenv.sh
   echo "# Add cluster specific environment variables in this file." >> $CLUSTER_DIR/bin_sh/setenv.sh
   echo "#" >> $CLUSTER_DIR/bin_sh/setenv.sh
   echo ""  >> $CLUSTER_DIR/bin_sh/setenv.sh
   echo "#"  >> $CLUSTER_DIR/bin_sh/setenv.sh
   echo "# Set RUN_SCRIPT. Absolute path required." >> $CLUSTER_DIR/bin_sh/setenv.sh
   echo "# If set, the 'start_member' command will run this script instead of redis-server'." >> $CLUSTER_DIR/bin_sh/setenv.sh
   echo "# Your run script will inherit the following:" >> $CLUSTER_DIR/bin_sh/setenv.sh
   echo "#    CLUSTER_DIR - This cluster's top directory path, i.e., $PADOGRID_WORKSPACE/clusters/$CLUSTER" >> $CLUSTER_DIR/bin_sh/setenv.sh
   echo "#" >> $CLUSTER_DIR/bin_sh/setenv.sh
   echo "# Run Script Example:" >> $CLUSTER_DIR/bin_sh/setenv.sh
   echo "#     " >> $CLUSTER_DIR/bin_sh/setenv.sh
   echo "#" >> $CLUSTER_DIR/bin_sh/setenv.sh
   echo "# Although it is not required, your script should be placed in the bin_sh directory." >> $CLUSTER_DIR/bin_sh/setenv.sh
   echo "#"  >> $CLUSTER_DIR/bin_sh/setenv.sh
   echo "#RUN_SCRIPT=\$CLUSTER_DIR/bin_sh/your-script" >> $CLUSTER_DIR/bin_sh/setenv.sh

   
   # Create $ETC_DIR/cluster.properties
   echo "# padogrid cluster properties." > $ETC_DIR/cluster.properties
   echo "# These properties pertain to all of the members belonging to the named cluster below." >> $ETC_DIR/cluster.properties
   echo "# Cluster Creation Date: `date`" >> $ETC_DIR/cluster.properties
   echo "" >> $ETC_DIR/cluster.properties
   
   # Cluster name
   echo "# Cluster name" >> $ETC_DIR/cluster.properties
   echo "cluster.name=$CLUSTER" >> $ETC_DIR/cluster.properties
   echo "" >> $ETC_DIR/cluster.properties

   # hostname-for-clients
   echo "# The following properties are used only if the cluster is running on the" >> $ETC_DIR/cluster.properties
   echo "# local machine. For VM clusters, each member must include their own properties." >> $ETC_DIR/cluster.properties
   echo "cluster.bindAddress=$BIND_ADDRESS" >> $ETC_DIR/cluster.properties
   echo "cluster.hostnameForClients=$HOSTNAME_FOR_CLIENTS" >> $ETC_DIR/cluster.properties
   echo "" >> $ETC_DIR/cluster.properties

   # Pod
   echo "# Pod properties" >> $ETC_DIR/cluster.properties
   echo "pod.name=$POD" >> $ETC_DIR/cluster.properties
   echo "pod.type=$POD_TYPE" >> $ETC_DIR/cluster.properties
   echo "" >> $ETC_DIR/cluster.properties

   # Member server TCP port
   echo "# Member TCP start port number. The port number is incremented starting from this number." >> $ETC_DIR/cluster.properties
   echo "tcp.startPort=$NEW_MEMBER_START_PORT" >> $ETC_DIR/cluster.properties
   echo "" >> $ETC_DIR/cluster.properties

   # Redis specifics
   echo "# Redis node replicas" >> $ETC_DIR/cluster.properties
   echo "redis.replicas=$REPLICAS" >> $ETC_DIR/cluster.properties
   echo "" >> $ETC_DIR/cluster.properties

   # VM
   echo "# Enable/disable VM cluster" >> $ETC_DIR/cluster.properties
   echo "vm.enabled=$VM_ENABLED" >> $ETC_DIR/cluster.properties
   echo "# A comma separated list of host names or addresses. IMPORTANT: No spaces allowed." >> $ETC_DIR/cluster.properties

   # Replace all spaces from host lists
   VM_HOSTS=$(echo "$VM_HOSTS" | sed "s/ //g")
   echo "vm.hosts=$VM_HOSTS" >> $ETC_DIR/cluster.properties
   echo "# SSH user name. If not specified then defaults to the shell login session user name." >> $ETC_DIR/cluster.properties
   echo "vm.user=$VM_USER" >> $ETC_DIR/cluster.properties
   echo "# Optional private key file path. You may use the private key file for AWS EC2, for example. " >> $ETC_DIR/cluster.properties
   if [ "$VM_PRIVATE_KEY_FILE" == "" ]; then
      echo "#vm.privateKeyFile=$VM_KEY_FILE" >> $ETC_DIR/cluster.properties
   else
      echo "vm.privateKeyFile=$VM_PRIVATE_KEY_FILE" >> $ETC_DIR/cluster.properties
   fi

   echo "" >> $ETC_DIR/cluster.properties

   if [ "$VM_ENABLED" == "true" ]; then
      echo "# Individual VM host settings: vm.<host>.*" >> $ETC_DIR/cluster.properties
      __VM_HOSTS=$(echo "$VM_HOSTS" | sed "s/,/ /g")
      for VM_HOST in $__VM_HOSTS; do
         echo "#vm.${VM_HOST}.bindAddress=${VM_HOST}" >> $ETC_DIR/cluster.properties
         echo "vm.${VM_HOST}.hostnameForClients=${VM_HOST}" >> $ETC_DIR/cluster.properties
         echo "vm.${VM_HOST}.redundancyZone=" >> $ETC_DIR/cluster.properties
      done
   fi
}

# 
# VM cluster
#
if [ "$VM_SPECIFIED" == "true" ] && [ "$POD" == "local" ]; then
   VM_ENABLED="true"
fi
if [ "$VM_USER" == "" ]; then
   VM_USER=$(whoami)
fi
VM_KEY_FILE="/your/private/keyfile.pem"
if [ "$VM_ENABLED" == "true" ]; then
   if [ "$VM_HOSTS_ARG" != "" ]; then
      VM_HOSTS="$VM_HOSTS_ARG"
   fi
   if [ "$VM_HOSTS" == "" ]; then
      echo "WARNING: VM hosts undefined. Configuring with this host."
      VM_HOSTS=`hostname`
   fi
else
   VM_HOSTS=`hostname`
fi

# Collect all clusters
pushd $CLUSTERS_DIR > /dev/null 2>&1
CLUSTERS=""
COUNT=0
for i in *; do
   if [ -d "$i" ]; then
      let COUNT=COUNT+1
      if [ $COUNT -eq 1 ]; then
         CLUSTERS="$i"
      else
         CLUSTERS="$CLUSTERS $i"
      fi
   fi
done
popd > /dev/null 2>&1

# If the port number is not specified, or if there aren't any existing clusters
# or the pod name is not "local" then use the default ports. For non-local pods,
# we can ignore the port number conflicts.
if [ "$PORT_ARG" == "" ] || [ "$CLUSTER" == "" ] || [ "$POD" != "local" ] || [ "$VM_ENABLED" == "true" ]; then
   NEW_MEMBER_START_PORT=$DEFAULT_MEMBER_START_PORT
else
   NEW_MEMBER_START_PORT=$PORT_ARG
fi

# Create the cluster sub-directories and files.
LOG_DIR=$CLUSTERS_DIR/$CLUSTER/log
ETC_DIR=$CLUSTERS_DIR/$CLUSTER/etc
LIB_DIR=$CLUSTERS_DIR/$CLUSTER/lib
PLUGINS_DIR=$CLUSTERS_DIR/$CLUSTER/plugins
mkdir -p $ETC_DIR
mkdir -p $LOG_DIR
mkdir -p $LIB_DIR
mkdir -p $PLUGINS_DIR

# Add one (1) member if VM is enabled.
# Add 3*(REPLICAS+1) members if the pod name is "local".
# For non-local clusters with remote members, we start with an empty cluster and
# allow the user to identify the VMs to run the members.
BIND_ADDRESS="localhost"
HOSTNAME_FOR_CLIENTS="localhost"
if [ "$VM_ENABLED" == "true" ]; then
   MEMBER_1=`getMemberName 1`
   MEMBER_1_DIR=$CLUSTER_DIR/run/$MEMBER_1
   mkdir -p $MEMBER_1_DIR
   if [ "POD" == "local" ]; then
      POD_TYPE="local"
   fi
elif [ "$POD" == "local" ]; then
   let MEMBER_COUNT=3*$((REPLICAS+1))
   for i in $(seq 1 $MEMBER_COUNT); do
      MEMBER_NUM=$i
      MEMBER=`getMemberName $i`
      MEMBER_DIR=$CLUSTER_DIR/run/$MEMBER
      mkdir -p $MEMBER_DIR
   done
   POD_TYPE="local"
fi

if [ "$POD" != "local" ]; then

   # TODO: Pod VM_ENABLED is currently for workspace-wide only. To support individual clusters,
   #       VM_* parameters must be set for each cluster. Significant overhauling may required.
   # VM_ENABLED="true"

   AVAHI_ENABLED=`getPodProperty "pod.avahi.enabled" false`
   NODE_COUNT=`getPodProperty "node.count" "0"`
   VM_USER="vagrant"
   POD_TYPE="vagrant"
   VM_HOSTS=""
   
   # Create member run directories
   NODE_NAME_PREFIX=`getPodProperty "node.name.prefix" $NODE_NAME_PREFIX`
   for i in $(seq 1 $NODE_COUNT); do
       MEMBER=`getMemberName $i`
       MEMBER_DIR=$CLUSTER_DIR/run/$MEMBER
       mkdir -p $MEMBER_DIR
   done
      
   if [ "$AVAHI_ENABLED" == "true" ]; then
      PRIMARY_NODE_NAME=`getPodProperty "node.name.primary" "$DEFAULT_NODE_NAME_PRIMARY"`
      PRIMARY_NODE_LOCAL="${PRIMARY_NODE_NAME}.local"
      BIND_ADDRESS=$PRIMARY_NODE_LOCAL
      HOSTNAME_FOR_CLIENTS=$PRIMARY_NODE_LOCAL
      
      NODE_NAME_PRIMARY=`getPodProperty "node.name.primary"`
      if [ "$NODE_NAME_PRIMARY" != "" ]; then
         NODE_NAME_PRIMARY=${NODE_NAME_PRIMARY}.local
      else
         NODE_NAME_PRIMARY="localhost"
      fi
   
      # Vagrant pod VMs
      for i in $(seq 1 $NODE_COUNT); do
        __MEMBER_NUM=`getMemberNumWithLeadingZero $i`
        NODE_LOCAL="${NODE_NAME_PREFIX}-${__MEMBER_NUM}.local"
        if [ $i -eq 1 ]; then
           VM_HOSTS="$NODE_LOCAL"
        else
           VM_HOSTS="$VM_HOSTS,$NODE_LOCAL"
        fi
      done
   else
      POD_DIR="$PADOGRID_WORKSPACE/pods/$POD"
      POD_SETENV="$POD_DIR/bin_sh/setenv.sh"
      HOST_PRIVATE_IP=""
      if [ -f "$POD_SETENV" ]; then
         . $POD_SETENV
      fi
      if [ "$HOST_PRIVATE_IP" == "" ]; then
         AVAILABLE_IP_ADDRESSES=`getPrivateNetworkAddresses`
         if [ "$AVAILABLE_IP_ADDRESSES" == "" ]; then
            echo >&2 "ERROR: Private IP address not specified and unable to determine. Please add"
            echo >&2 "       a host-only ethernet adapter to VirtualBox. Command aborted."
            exit 1
         fi
         # Pick the first one in the list
         for i in $AVAILABLE_IP_ADDRESSES; do
            HOST_PRIVATE_IP=$i
            break;
         done
      fi
      IP_LAST_OCTET=`getPodProperty "node.ip.lastOctet" $IP_LAST_OCTET`
      # Extract the first three octets from the primary IP.
      BASE_PRIVATE_IP_FIRST_THREE_OCTETS=${HOST_PRIVATE_IP%.*}
      BASE_PRIVATE_IP_LAST_OCTET=$IP_LAST_OCTET
      BASE_PRIVATE_IP=${BASE_PRIVATE_IP_FIRST_THREE_OCTETS}.${BASE_PRIVATE_IP_LAST_OCTET}
      NODE_NAME_PRIMARY=${BASE_PRIVATE_IP}
      BIND_ADDRESS=$NODE_NAME_PRIMARY
      HOSTNAME_FOR_CLIENTS=$NODE_NAME_PRIMARY
      for i in $(seq 1 $NODE_COUNT); do
         let NODE_OCTET=i+BASE_PRIVATE_IP_LAST_OCTET
         NODE_IP=${BASE_PRIVATE_IP_FIRST_THREE_OCTETS}.${NODE_OCTET}
         if [ $i -eq 1 ]; then
            VM_HOSTS="$NODE_IP"
         else
            VM_HOSTS="$VM_HOSTS,$NODE_IP"
         fi
      done
   fi

fi

# Write cluster files
writeCluster

# Display cluster information
echo "----------------------------------------------------------------"
echo "                  WORKSPACE: $PADOGRID_WORKSPACE"
echo "            Cluster Created: $CLUSTER"
echo "               CLUSTER_TYPE: $CLUSTER_TYPE"
if [ "$VM_ENABLED" == "true" ]; then
echo "                 Deployment: VM"
else
echo "                        POD: $POD"
fi
echo "                CLUSTER_DIR: $CLUSTER_DIR"
echo "                 CONFIG_DIR: $ETC_DIR"
echo "                    LOG_DIR: $LOG_DIR"
echo "          MEMBER_START_PORT: $NEW_MEMBER_START_PORT"
echo ""
echo "The default config.xml file has been placed in the CONFIG_DIR directory."
echo "Modify or replace it with the appropriate file."
echo ""
if [ "$VM_ENABLED" == "true" ]; then
   echo "One (1) member has been configured (added) to run in this cluster as follows:"
   echo ""
   echo "      Member: $MEMBER_1"
   echo " Working Dir: $MEMBER_1_DIR"
   echo ""
elif [ "$POD" == "local" ]; then
   MEMBER_COUNT=$(getMemberCount)
   echo "$MEMBER_COUNT members have been configured (added) to run in this cluster as follows:"
   echo ""
   for MEMBER in $(getMemberDirNameList); do
      echo "      Member: $MEMBER"
      echo " Working Dir: $RUN_DIR/$MEMBER"
   done
   echo ""
else
   echo "$NODE_COUNT members have been configured (added) to run in this cluster as follows:"
   echo ""
   for i in $(seq 1 $NODE_COUNT); do
       MEMBER=`getMemberName $i`
       MEMBER_DIR=$CLUSTER_DIR/run/$MEMBER
      echo "      Member: $MEMBER"
      echo " Working Dir: $MEMBER"
   done
   echo ""
fi
echo "1. Update Redis configuration in template-redis.conf as needed:"
echo "      ${ETC_DIR}/template-redis.conf"
echo "2. Place your application jar files in one of the 'plugins' directories:"
echo "      $PADOGRID_WORKSPACE/plugins/"
echo "      $CLUSTER_DIR/plugins/"
echo "3. Configure cluster properties in:"
echo "      $ETC_DIR/cluster.properties"
if [ "$VM_ENABLED" == "true" ]; then
   echo "4. You must configure password-less ssh login to all VMs. On AWS, this"
   echo "   is already configured but you will need to enter the correct private key"
   echo "   file path in the cluster.properties file."
   echo "5. To change VM host names, list the VM host names in the cluster.properties file"
   echo "   for members."
   echo "      vm.hosts=host1,host2,..."
   echo "6. Deploy the cluster configuration changes you made to all the VM hosts listed in the"
   echo "   previous step by running 'vm_copy' or 'vm_sync'."
   echo "      vm_copy $CLUSTER_DIR"
   echo "7. To start the cluster:"
   echo "      start_cluster -cluster $CLUSTER"
   echo "8. To verify the cluster state:"
   echo "      show_cluster -cluster $CLUSTER"
   echo "9. To view log file:"
   echo "      show_log -cluster $CLUSTER" 
elif [ "$POD" == "local" ]; then 
   echo "4. To configure additional members:"
   echo "      add_member -cluster $CLUSTER"
   echo "5. To start the cluster: "
   echo "      start_cluster -cluster $CLUSTER"
   echo "6. To verify the cluster state:"
   echo "      show_cluster -cluster $CLUSTER"
   echo "7. To view log file:"
   echo "      show_log -cluster $CLUSTER" 
else
   echo "4. The specified pod ($POD) contains $NODE_COUNT data nodes and the same number of members"
   echo "   have been added to the cluster. You can add or remove members by runnng 'add_member' or"
   echo "   'remove_member', respectively."
   echo "    IMPORTANT: The number of members cannot exceed the number of data nodes in the pod."
   echo "5. Once you have added or removed members, execute the following to configure and start the"
   echo "   Vagrant pod environment:"
   echo "      build_pod -pod $POD"
   echo "6. To get the pod details, run the following:"
   echo "      show_pod -pod $POD"
   echo "7. To use this pod, attach it to a cluster. For example,"
   echo "      create_cluster -cluster mycluster -pod $POD"
   echo "      start_cluster -cluster mycluster"
   echo "8. You can login to the primary node as follows."
   echo "      ssh vagrant@$NODE_NAME_PRIMARY"
fi
echo "----------------------------------------------------------------"

# -------------------------------------------------------------------------
# Overview:
#
# Group test cases allow you to create and test groups of Redisson operations.
# You can think of a group as a function invoking one or more Redisson operations.
# As an example, a group could contain set, get, put, get calls making a total
# of four (4) Redisson Map calls. You can designate threads to invoke this
# group and measure the average latency of each group (function) call.
# -------------------------------------------------------------------------

#
# This template creates one-to-many ER between Customer and Order objects by setting
# Customer.customerId to Order.customerId.
#

# The number of test runs. Each group has the member size set by the 
# 'memberSetSize' property. This means the total number of valid 
# legitimate transactions that return summary would be limited to
# the number of groups. Use this property to increase the number of
# transactions.
# Default: 1
testCount=1

# Interval between test runs in msec.
# Default: 0
testIntervalInMsec=0

# Print status interval in sec. The application prints status in this interval
# to the console.
# Default: 10 sec
printStatusIntervalInSec=10

# Turn off logging (recommended)
redisson-adon.logging.type=none

# Group names separated by ',' or '&'. If ',', then the next group executes after
# the current group completes. If '&', then the current group and the next group
# execute concurrently. Note that testCount applies per group. For example, if
# testCount=2 and groupName=g1&g2,g3 then g1 and g2 execute concurrently twice
# before g3 executes twice.
groupNames=g1

# -------------------------------------------------------------------------
# Group:
#
# A group represents a function that invokes one or more Redisson operations.
#
# name         Group name.
#
# threadCount  The number of threads per group test.
#
#              Default: (processor count * 1.5).
#
# operations  Comma separated list of operations to perform. Operations are
#             individually defined. See the "Operations" section for details.
#             The listed operations are invoked sequentially per group invocation.
#             For example, if totalInvocationCount=1000 then the operations listed
#             will be invoked 1000 times in the order they are listed.
#
# totalInvocationCount Total number of group invocations.
# 
# comment     Any text describing the group. 
# -------------------------------------------------------------------------

# g1 sets 100 Customer objects into customers defined by the 'set1' operation
# and up to 5 (set1.factory.er.maxKeys) child Order objects per customer into orders
# defined by the 'set2' operation.
# Note that you can list more than one operation separated by commas.
g1.name=Customer Set Test
g1.threadCount=8
g1.operations=set1
g1.comment=Stores Customer objects into customers and Order objects to orders with up to 5 customers \
ER-mapped per order object.
g1.totalInvocationCount=100

# -------------------------------------------------------------------------
# Operations:
#
# map | mcache | topic | rtopic | stopic | list | queue | sleep
#                 Data structure name. This parameter specifies the name of the
#                 data structure pertaining to the specified test case.
#
#                 The 'sleep' operation sleeps for the specified amount of time
#                 in milliseconds. It has no other attributes. For example, 
#                 'sleep10.sleep=10', sleeps for 10 milliseconds before executing
#                 the next operation in the group.
#
# ref             The test case reference name. The defining test case inherits
#                 all values set by the referenced test case. Referenced properties
#                 are overwritten if defined.
#
# testCase        Test case.
#                 If invalid values are entered then the default value is assigned.
#
#                 Valid Test Cases: 
#                   - map (Map): set, get, getall, put, putall    - Default: putall
#                   - mcache (MapCache): get, getall, put, putall  - Default: putall
#                   - list (List): add, addall ,remove            - Default: add
#                   - queue (Queue): offer, peek, poll, take      - Default: offer
#                   - topic/rtopic/stopic (Topic/ReliableTopic/ShardedTopic):
#                                     publish, publishall         - Default: publishall
#
# payloadSize     The value object size in bytes. The value object is a blob
#                 object containing the specified payload size in the form of
#                 byte array. Note that the key objects are String objects with
#                 the prefix defined by the key.prefix property. This property is
#                 used by the following test cases only.
#
#                 Used By: put, putall, offer, publish, publishall, add, remove
#                 Default: 1024
#
# batchSize       The number of objects per putAll(), getAll(), publishAll call per thread.
#
#                 Used By: getall, putall, publishall
#                 Default: 100
#
# totalEntryCount The total number of entries. 
#
#                 - For putall and getall, this value dictates the upper bound
#                   of the entry count. The number of objects inserted will be less
#                   than or equal to this value. To keep the upper bound, the keys are generated
#                   in a round-robin fashion to perform updates instead of inserts if the entry
#                   count reaches the upper limit. To insert the exact number of entries
#                   defined by totalEntryCount, the following must hold true:
#
#                      totalEntryCount = totalInvocationCount * batchSize
#
#                 - For get, totalEntryCount defines the range in selecting
#                   keys randomly. This value is always greater than or equal
#                   to key number.
#
#                       totalEntryCount >= key-number
#
#                 *Used By: putall, getall, get
#                 Default: 10000
#
#                 * Note that totalEntryCount is not used by publishall since unlike Map, and MapCache
#                   Topic (and IQueue) cannot update data. It can only append data and therefore
#                   the entry count cannot be a fixed number.
#
# key.prefix      Key names begin with this value. This parameter is optional and used by Map and MapCache.
#
#                 Used By: get, getall, put, putall
#                 Default: k
#
# key.startNum    Key start number. Each key name stars with the prefix defined by
#                 the key.prefix property followed by a number that is increased
#                 incrementally starting from this value. For example, 
#                 key.prefix=a and key.startNum=10 produces the first key name, "a10". This parameter is
#                 used by Map and MapCache
#
#                 Used By: get, getall, put, putall
#                 Default: 1
#
# factory.class                Factory class that creates custom data objects. This class must implement 
#                              org.redisson.addon.test.perf.data.DataObjectFactory or extend
#                              org.redisson.demo.nw.impl.AbstractDataObjectFactory.
#
# factory.key.length           The fixed length of key value. If -1 or 0, then the key value is not formatted
#                              to a fixed length.
#                              Default: -1
#
# factory.key.isLeadingZeros  If true, zeroes are prepended to key values to create a fixed length. This
#                             property has no effect if factory.key.length is <= 0.
#                             Default: false
#
# factory.key.isRandom        If true, then the specified er.maxKeys value is used as the upper bound
#                             to generate a random number in the the range of [1, maxKeys]. If false,
#                             then the specified maxKeys value is used.
#                             Default: true
#
# factory.er.maxKeys          The maxKeys value is sets the upper bound of the ER key value.
#                             Default: 1
#
# factory.er.operation        ER operation. The specified operation is recursively executed.
# -------------------------------------------------------------------------

# set1
set1.map=nw/customers
set1.testCase=set
set1.key.startNum=0
set1.key.prefix=000000-
set1.factory.class=org.redis.demo.nw.impl.CustomerFactoryImpl
# If isRandom is true then key.length and key.isLeadingZeros have no effect
set1.factory.key.isRandom=false
# key.length is ignored if isLeadingZeros is false
# If key.length is <= 0 then it defaults to the the key number length
# and key.isLeadingZeros has no effect.
set1.factory.key.length=11
set1.factory.key.isLeadingZeros=true

# ER - set2, i.e., Order objects as child objects to Customer
set1.factory.er.operation=set2
# If true, then the specified maxKeys value is used as the upper bound
# to generate a random number in the the range of [1, maxKeys].
# If false, then the specified maxKeys value is used.
set1.factory.er.isRandom=true
set1.factory.er.maxKeys=5

# set2
set2.map=nw/orders
set2.ref=set1
set2.factory.class=org.redis.demo.nw.impl.OrderFactoryImpl
# If isRandom is true then key.length and key.isLeadingZeros have no effect
set2.factory.key.isRandom=false
# key.length is ignored if isLeadingZeros is false
# If key.length is <= 0 then it defaults to the the key number length
# and key.isLeadingZeros has no effect.
set2.factory.key.length=11
set2.factory.key.isLeadingZeros=true

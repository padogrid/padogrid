#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020-2023 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-cluster -num -all -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Add a new locator to the specified cluster in the current workspace

SYNOPSIS
   $EXECUTABLE [-cluster cluster_name] [-num locator_number] [-all] [-?]

DESCRIPTION
   Adds a new SnappyData locator to the specified cluster. If locators already exist,
   then it adds a locator with the next available locator number.

   If the cluster is a VM cluster, then only one (1) locator is allowed per VM.
   Please note that this is a padogrid restriction, not a SnappyData product
   limitation.
 
   For VM clusters, the locator number reflects the host in the order it is
   defined by the cluster property, 'vm.hosts', in the 'etc/cluster.properties' file.
   (Run 'show_cluster -long' to see the VM locator numbers that map to hosts.)

OPTIONS
   -cluster cluster_name
             If the -cluster option is present, it starts the locator in the specified
             cluster; otherwise, it starts the locator in the default cluster.

   -num locator_number
             Locator number starting from 1.

   -all      
             This option applies to VM clusters only. If specified, it adds a locator
             to all locator VMs in the cluster. locator_number is ignored.

NOTES
   For Vagrant, the locator number is assigned to the node (VM) number. This
   means you can create multiple clusters, each with their own set of nodes
   identified by the locator numbers.

EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
DEFAULT
   $EXECUTABLE -cluster $CLUSTER

FILES
   $CLUSTER_DIR/etc/cluster.properties
             The current cluster configuration file.

EOF
fi
cat <<EOF
SEE ALSO
EOF
   printSeeAlsoList "*locator*" $EXECUTABLE
   exit
fi

POD=`getClusterProperty "pod.name" "local"`

#
# VM cluster
#
if [ "$REMOTE_SPECIFIED" == "false" ]; then
   VM_ENABLED=`getClusterProperty "vm.enabled" "false"`
   if [ "$VM_ENABLED" == "true" ]; then
      VM_HOSTS=`getClusterProperty "vm.locator.hosts"`
      if [ "$VM_HOSTS" == "" ]; then
         echo "ERROR: VM locator hosts undefined. Set 'vm.locator.hosts' in the following cluster.properties file."  
         echo "       $ETC_DIR/cluster.properties"
         echo "       Command aborted."
         exit 1
      fi

      # If pod cluster, then source in the pod env vars to set the VM specific variables
      OS_ENV=`getOsEnv`
      if [ "$OS_ENV" == "gh" ] && [ "$POD" != "local" ]; then
         if [ -f "$PODS_DIR/$POD/.nodeenv.sh" ]; then
            . "$PODS_DIR/$POD/.nodeenv.sh"
         fi
      fi

      # Replace , with space
      __VM_HOSTS=$(echo "$VM_HOSTS" | sed "s/,/ /g")
      VM_USER=`getVmUser`
      VM_KEY=`getVmKeyArg`
      if [ "$ALL" == "true" ]; then
         for VM_HOST in $__VM_HOSTS; do
            ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$COMMAND_PREFIX $SCRIPT_DIR/add_locator -cluster $CLUSTER -remote $VM_HOST -workspace $PADOGRID_WORKSPACE -num 1"
         done
      else
         # Determine the host
         __LOCATOR_NUMBER=0
         __FOUND="false"
         
         for VM_HOST in $__VM_HOSTS; do
            let __LOCATOR_NUMBER=__LOCATOR_NUMBER+1
            if [ $__LOCATOR_NUMBER -eq $LOCATOR_NUM_NO_LEADING_ZERO ]; then
               __FOUND="true"
               if [ "$POD" == "local" ]; then
                  NUM=1
               else
                  let NUM=__LOCATOR_NUMBER
               fi
               ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$COMMAND_PREFIX $VM_PADOGRID_HOME/$PRODUCT/bin_sh/add_locator -cluster $CLUSTER -remote $VM_HOST -wor      kspace $PADOGRID_WORKSPACE -num $NUM"
               break;
            fi
         done
         FIRST_NUMBER=1
         LAST_NUMBER=$__LOCATOR_NUMBER
         if [ "$__FOUND" == "false" ]; then
            echo "ERROR: Invalid locator number. Valid range is [$FIRST_NUMBER, $LAST_NUMBER]. Command aborted." 
         fi
      fi
      exit
   fi
fi

#
# Local cluster
#
PRIMARY_NODE_NAME=`getPodProperty "node.name.primary" "$DEFAULT_NODE_NAME_PRIMARY"`
NODE_NAME_PREFIX=$PRIMARY_NODE_NAME
NODE_LOCAL="${PRIMARY_NODE_NAME}.local"

LOCATOR_PREFIX=`getLocatorPrefix`
LOCATOR_PREFIX_LEN=${#LOCATOR_PREFIX}
CLUSTER_DIR=$CLUSTERS_DIR/$CLUSTER
RUN_DIR=$CLUSTER_DIR/run

if  [ ! -d $CLUSTER_DIR ]; then
   echo "----------------------------------------------------------------"
   echo "WORKSPACE: $PADOGRID_WORKSPACE"
   echo "  Cluster: $CLUSTER"
   echo "    ERROR: This cluster has not been created. Please run the create_cluster command"
   echo "           to create the cluster before running this command. Command aborted."
   echo "----------------------------------------------------------------"
   exit 1
fi

if [ "$REMOTE_SPECIFIED" == "true" ]; then
   NEW_LOCATOR_NUMBER=1
else
   pushd $RUN_DIR > /dev/null 2>&1
   PREV_LOCATOR_NUMBER=0
   for i in ${LOCATOR_PREFIX}*; do
      if [ -d "$i" ]; then
        LOCATOR_NUMBER=${i:$LOCATOR_PREFIX_LEN}
        LOCATOR_NUMBER=$(trimLeadingZero $LOCATOR_NUMBER)
        let __NUM=PREV_LOCATOR_NUMBER+1
        if [ $LOCATOR_NUMBER -gt $__NUM ]; then
           LOCATOR_NUMBER=$PREV_LOCATOR_NUMBER
           break;
        else
           PREV_LOCATOR_NUMBER=$LOCATOR_NUMBER
        fi
      fi
   done
   popd > /dev/null 2>&1
   if [ "$LOCATOR_NUM_SPECIFIED" == "true" ]; then
      let NEW_LOCATOR_NUMBER=$LOCATOR_NUM_NO_LEADING_ZERO
   else
      let NEW_LOCATOR_NUMBER=LOCATOR_NUMBER+1
   fi
fi
NEW_LOCATOR=`getLocatorName $NEW_LOCATOR_NUMBER`
NEW_LOCATOR_DIR=$RUN_DIR/$NEW_LOCATOR

LOCATOR_EXISTS="false"
if [ -d $NEW_LOCATOR_DIR ]; then
   LOCATOR_EXISTS="true"
else
   mkdir -p $NEW_LOCATOR_DIR
fi

# Copy the template properties file into the cluster etc directory if the
# cluster is missing the gemfirexd.properties file. This may occur for those
# clusters that are bundled in the padogrid distribution.
if [ ! -f $ETC_DIR/gemfirexd.properties ]; then
   cp $BASE_DIR/etc/template-gemfirexd.properties $ETC_DIR/gemfirexd.properties
fi

echo "----------------------------------------------------------------"
echo "     WORKSPACE: $PADOGRID_WORKSPACE"
echo "       Cluster: $CLUSTER"
if [ "$LOCATOR_EXISTS" == "true" ]; then
echo "Locator Exists: $NEW_LOCATOR"
else
echo " Locator Added: $NEW_LOCATOR"
fi
echo "   Working Dir: $NEW_LOCATOR_DIR"
echo "----------------------------------------------------------------"

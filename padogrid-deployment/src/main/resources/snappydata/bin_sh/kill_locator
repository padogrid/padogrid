#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020-2023 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-num -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Kill the specified locator in the current cluster

SYNOPSIS
   $EXECUTABLE -num locator_number [-?]

DESCRIPTION
   Kills the specified Geode locator.

   For VM clusters, the locator number reflects the host in the order it is
   defined by the cluster property, 'vm.hosts', in the 'etc/cluster.properties' file.
   (Run 'show_cluster -long' to see the VM locator numbers that map to hosts.)

OPTIONS
   -num locator_number
             Locator number 1-$LAST_LOCATOR_NUM

DEFAULT
   $EXECUTABLE -num 1

EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
FILES
   $CLUSTER_DIR/etc/cluster.properties
             The current cluster configuration file.

EOF
fi
cat <<EOF
SEE ALSO
EOF
   printSeeAlsoList "*locator*" $EXECUTABLE
   exit
fi

if  [ ! -d $CLUSTER_DIR ]; then
   echo "----------------------------------------------------------------"
   echo "WORKSPACE: $PADOGRID_WORKSPACE"
   echo "  Cluster: $CLUSTER"
   echo "   Status: This cluster has not been created. Please run the create_cluster command to"
   echo "           to create the cluster before running this command."
   echo "----------------------------------------------------------------"
   exit 1
fi

if [ "$LOCATOR_NUM_SPECIFIED" == "false" ]; then
   echo "----------------------------------------------------------------"
   echo "WORKSPACE: $PADOGRID_WORKSPACE"
   echo "    ERROR: Locator number not specified. Run 'kill_locator -?' to see usage. Command aborted."
   echo "----------------------------------------------------------------"
   exit
fi

POD=`getClusterProperty "pod.name" "local"`

#
# VM cluster
#
if [ "$REMOTE_SPECIFIED" == "false" ]; then
   VM_ENABLED=`getClusterProperty "vm.enabled" "false"`
   if [ "$VM_ENABLED" == "true" ]; then
      VM_LOCATOR_HOSTS=`getClusterProperty "vm.locator.hosts"`
      if [ "$VM_LOCATOR_HOSTS" == "" ]; then
         echo "ERROR: VM locator hosts undefined. Set 'vm.locator.hosts' in the following cluster.properties file."  
         echo "       $ETC_DIR/cluster.properties"
         echo "       Command aborted."
         exit 1
      fi

      # If pod cluster, then source in the pod env vars to set the VM specific variables
      OS_ENV=`getOsEnv`
      if [ "$OS_ENV" == "gh" ] && [ "$POD" != "local" ]; then
         if [ -f "$PODS_DIR/$POD/.nodeenv.sh" ]; then
            . "$PODS_DIR/$POD/.nodeenv.sh"
         fi
      fi

      # Replace , with space
      __VM_HOSTS=$(echo "$VM_LOCATOR_HOSTS" | sed "s/,/ /g")
      VM_USER=`getVmUser`
      VM_KEY=`getVmKeyArg`

      # Determine the host
      __LOCATOR_NUMBER=0
      __FOUND="false"
      
      for VM_HOST in $__VM_HOSTS; do
         let __LOCATOR_NUMBER=__LOCATOR_NUMBER+1
         if [ $__LOCATOR_NUMBER -eq $LOCATOR_NUM_NO_LEADING_ZERO ]; then
            __FOUND="true"
            ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$COMMAND_PREFIX $VM_PADOGRID_HOME/$PRODUCT/bin_sh/kill_locator -cluster $CLUSTER -remote $VM_HOST -workspace $VM_PADOGRID_WORKSPACE -num 1"
            break;
         fi
      done
      FIRST_NUMBER=1
      LAST_NUMBER=$__LOCATOR_NUMBER
      if [ "$__FOUND" == "false" ]; then
         echo "ERROR: Invalid locator number. Valid range is [$FIRST_NUMBER, $LAST_NUMBER]. Command aborted." 
      fi
      exit
   fi
fi

#
# Local cluster
#
NODE_NAME_PRIMARY=`getPodProperty "node.name.primary" "$DEFAULT_NODE_NAME_PRIMARY"`
NODE_NAME_PREFIX=$NODE_NAME_PRIMARY

if [ "$POD" != "local" ]; then
   PRIMARY_NODE_NAME=`getPodProperty "node.name.primary" "$DEFAULT_NODE_NAME_PRIMARY"`
   NODE_LOCAL="${PRIMARY_NODE_NAME}.local"
   if [ "$REMOTE_SPECIFIED" == "false" ]; then
      ssh -n $SSH_USER@$NODE_LOCAL -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "cd $REMOTE_BASE_DIR/$PRODUCT/bin_sh; $COMMAND_PREFIX ./kill_locator -cluster $CLUSTER -remote $VM_HOST -workspace $PADOGRID_WORKSPACE $*;"
      exit
   fi
fi

LOCATOR_NUMBER=$MEMBER_NUM
LOCATOR=`getLocatorName $LOCATOR_NUMBER`
LOCATOR_DIR=$RUN_DIR/$LOCATOR

PID=`getLocatorPid $LOCATOR $WORKSPACE $RWE`
if [ -z $PID ]; then
   echo "Locator not running [$LOCATOR]. Command aborted."
   exit
else
   if [[ ${OS_NAME} == CYGWIN* ]]; then
      taskkill /f /pid "${PID}"
   else
      kill -9 "${PID}"
   fi
   echo "----------------------------------------------------------------"
   echo "     WORKSPACE: $PADOGRID_WORKSPACE"
   echo "Locator Killed: $LOCATOR"
   if [ "$VM_ENABLED" == "true" ]; then
   echo "          Type: VM"
   else
   echo "           Pod: $POD"
   fi
   echo "           PID: $PID"
   echo "   Working Dir: $LOCATOR_DIR"
   echo "----------------------------------------------------------------"
fi

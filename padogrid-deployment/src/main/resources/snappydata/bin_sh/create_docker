#!/usr/bin/env bash 

# ========================================================================
# Copyright (c) 2020-2024 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-product -docker -host -port -network -cluster -count -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

# Get the host IP. Last IPv4 in the list.
for i in $(getHostIPv4List); do
   HOST_IP=$i
done

PRODUCT_OPTIONS=$(echo "$DOCKER_PRODUCT_LIST" | sed 's/ /|/g')
PRODUCTS_SUPPORTED=$(echo "$DOCKER_PRODUCT_LIST" | sed 's/ /, /g')
THIS_PRODUCT="$(basename $(dirname $SCRIPT_DIR))"

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Create a Docker environment in the current workspace

SYNOPSIS
   $EXECUTABLE [-product $PRODUCT_OPTIONS]
                 [-docker compose] [-host host_ip] [-port first_port_number]
                 [-network network_name] [-count member_count] -cluster cluster_name [-?]

DESCRIPTION
   Creates a Docker environment that includes SnappyData cluster configuration files for
   one of the following Docker tools:
 
   compose  docker-compose Dockfile based cluster orchestration

   To use the created environment, you must have the specified Docker tool installed.

OPTIONS
   -product $PRODUCT_OPTIONS
             Docker cluster product name. Supported products are $PRODUCTS_SUPPORTED.

   -docker compose
             Docker compose driven SnappyData cluster.

   -host host_ip
             Host IP address that is acccessible from the Docker containers. If this option
             is not specified then the IP address of the host name is assigned. If the host
             is running Docker Desktop, then you may specify the the host name, host.docker.internal,
             which resolves to the internal IP address used by the host. Note that host.docker.internal
             is for development only and not for production.

   -port first_port_number
             If the '-product' option is 'geode', 'snappydata', or unspecified, then the first
             port number is the first locator port number. Otherwise, it represents the respective
             product's first port number. Port number is incremented starting from this port number
             for the subsquent locators. For 'geode' and 'snappydata', the port number difference
             between the default locator port number and the specified port number is added to the
             default port numbers of other components. For example, if the port number 10336 is
             specified then the difference of 2 (10336-$DEFAULT_LOCATOR_START_PORT) is added to the member's default
             port number of $DEFAULT_MEMBER_START_PORT to obtain the port number 40406 for the member's first port
             number. Similarly, the JMX Manager's first HTTP port number would be 7072 ($DEFAULT_JMX_MANAGER_HTTP_START_PORT+2).
             Default: $DEFAULT_LOCATOR_START_PORT 

   -network network_name
            A pre-exising Docker network for the Geode containers to join. You can create
            a new network and have any containers to join the network. For example, the following
            creates the default 'bridge' driver for the network names 'my_network'.

            docker network create my_network

   -count member_count
             Number of members (servers) in the cluster. Default: 2

   -cluster cluster_name
             Required SnappyData cluster name. This name is used to create a Docker compose project,
             for example.

EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
DEFAULT
   $EXECUTABLE -product $THIS_PRODUCT -docker $DEFAULT_DOCKER -host $HOST_IP -port $DEFAULT_LOCATOR_START_PORT -cluster cluster_name

EXAMPLES
   To create 'mydocker' cluster with the host IP 'host.docker.internal':
      $EXECUTABLE -host host.docker.internal -cluster mydocker

   To create 'mydocker' cluster with the host IP '$HOST_IP' and member (server) count of 4:
      $EXECUTABLE -host $HOST_IP -cluster mydocker -count 4

   To create 'mydocker' cluster with the host IP '$HOST_IP':
      $EXECUTABLE -host $HOST_IP -cluster mydocker

   To create 'mydocker' cluster that joins the external network, my_network:
      $EXECUTABLE -network my_network -cluster mydocker

FILES
   $PADOGRID_WORKSPACE/docker
             The current workspace Docker directory.

EOF
fi
   exit
fi

#
# Run the target docker command if the product is different.
#
if [ "$PRODUCT_ARG" != "" ]; then
   if [ "$(containsWord "$DOCKER_PRODUCT_LIST" "$PRODUCT_ARG")" == "false" ]; then
      >&2 echo -e "${CLightRed}ERROR:${CNone} Specified product is not supported: [$PRODUCT_ARG]. Command aborted."
      exit 1
   fi
   if [ "$THIS_PRODUCT" != "$PRODUCT_ARG" ]; then
      if [ "$PRODUCT_ARG" == "jet" ]; then
         PRODUCT_ARG="hazelcast"
      fi
      $PADOGRID_HOME/$PRODUCT_ARG/bin_sh/$EXECUTABLE "$@"
      exit
   fi
fi

if [ "$CLUSTER_SPECIFIED" == "false" ]; then
   >&2 echo "ERROR: The -cluster option is not specified. Command aborted."
   exit 1
fi

if [ "$DOCKER" == "" ]; then
   DOCKER=$DEFAULT_DOCKER
fi
if [ "$DOCKER" != "compose" ]; then
   >&2 echo "ERROR: Unsupported Docker tool [$DOCKER]. Please use the '-?' option to see the usage. Command aborted."
   exit 1
fi
if [ "$COUNT" == "" ]; then
   COUNT=2
fi
if [ $COUNT -lt 1 ]; then
   >&2 echo "ERROR: Inalid count [$COUNT]. Member (server) count cannot be less than 1. Command aborted."
   exit 1
fi

if [ "$HOST" != "" ]; then
   HOST_IP=$HOST
fi

#
# docker directory
#
DOCKER_DIR=$PADOGRID_WORKSPACE/docker
CLUSTER_DIR=$DOCKER_DIR/$CLUSTER

if [ -d $CLUSTER_DIR ]; then
   >&2 echo "ERROR: The specified Docker cluster exists. Command aborted."
   exit
fi
   
if [ ! -d $CLUSTER_DIR ]; then
   mkdir -p $CLUSTER_DIR
fi

if [ "$SNAPPYDATA_VERSION" == "" ]; then
   SNAPPYDATA_VERSION="latest"
fi

if [ "$DOCKER" == "compose" ]; then

   RUN_DIR=$CLUSTER_DIR/padogrid/run
   ETC_DIR=$CLUSTER_DIR/padogrid/etc
   LIB_DIR=$CLUSTER_DIR/padogrid/lib
   LOG_DIR=$CLUSTER_DIR/padogrid/log
   STATS_DIR=$CLUSTER_DIR/padogrid/stats
   PLUGINS_DIR=$CLUSTER_DIR/padogrid/plugins
   DOCKER_DOC="README.md"

   mkdir -p $ETC_DIR
   mkdir -p $RUN_DIR
   mkdir -p $STATS_DIR
   mkdir -p $LOG_DIR

   # Copy Docker doc
   cp $BASE_DIR/docker/compose/$DOCKER_DOC $CLUSTER_DIR
   # Copy the template gemfirexd.properties file
   cp $BASE_DIR/etc/template-gemfirexd.properties $ETC_DIR/gemfirexd.properties
   # Copy the template log4j2.properties file
   cp $BASE_DIR/etc/template-log4j2.properties $ETC_DIR/log4j2.properties
   # Copy the template prometheus config file
   cp $BASE_DIR/etc/template-prometheus.yml $ETC_DIR/prometheus.yml

   # Copy binary files
   cp -r $PADOGRID_HOME/lib $LIB_DIR
   cp -r $BASE_DIR/lib/* $LIB_DIR
   cp -r $BASE_DIR/plugins $PLUGINS_DIR

   # Update .env file
   if [ "$PORT_ARG" != "" ]; then
      START_PORT=$PORT_ARG
   else
      START_PORT=$DEFAULT_LOCATOR_START_PORT
   fi
   
   # Update docker-compose.yaml
   CLIENT_PORT=$DEFAULT_CLIENT_PORT
   LOCATOR_PORT=$START_PORT
   HOST_LOCATOR_JMX_PORT=$DEFAULT_LOCATOR_JMX_START_PORT
   HOST_LOCATOR_PROMETHEUS_PORT=$DEFAULT_LOCATOR_PROMETHEUS_START_PORT
   sed -e "s/\${HOSTNAME_FOR_CLIENTS}/$HOST_IP/g" \
       -e "s/\${CLUSTER_NAME}/$CLUSTER/g" \
       $BASE_DIR/docker/compose/template-env > $CLUSTER_DIR/.env

   # Update docker-compose.yaml
   sed -e "s/\${VERSION}/$SNAPPYDATA_VERSION/g" \
       -e "s/\${CLIENT_PORT}/$CLIENT_PORT/g" \
       -e "s/\${LOCATOR_PORT}/$LOCATOR_PORT/g" \
       -e "s/\${HOST_LOCATOR_JMX_PORT}/$HOST_LOCATOR_JMX_PORT/g" \
       -e "s/\${HOST_LOCATOR_PROMETHEUS_PORT}/$HOST_LOCATOR_PROMETHEUS_PORT/g" \
       $BASE_DIR/docker/compose/template-docker-compose.yaml > $CLUSTER_DIR/docker-compose.yaml

   # Append server services to docker-compose.yaml
   let HOST_CLIENT_PORT=CLIENT_PORT+1
   HOST_JMX_PORT=$DEFAULT_JMX_START_PORT
   HOST_DEBUG_PORT=$DEFAULT_DEBUG_START_PORT
   HOST_PROMETHEUS_PORT=$DEFAULT_PROMETHEUS_START_PORT
   PROMETHEUS_JAR_PATH=`find $PADOGRID_HOME/lib -name jmx_prometheus_javaagent*.jar`
   PROMETHEUS_JAR=$(basename $PROMETHEUS_JAR_PATH)
   for i in $(seq 1 $COUNT); do   
      SERVER_NAME="server$i"
      sed -e "s/\${VERSION}/$SNAPPYDATA_VERSION/g" \
          -e "s/\${SERVER_NAME}/$SERVER_NAME/g" \
	  -e "s/\${HOST_CLIENT_PORT}/$HOST_CLIENT_PORT/g" \
	  -e "s/\${HOST_JMX_PORT}/$HOST_JMX_PORT/g" \
          -e "s/\${HOST_DEBUG_PORT}/$HOST_DEBUG_PORT/g" \
          -e "s/\${HOST_PROMETHEUS_PORT}/$HOST_PROMETHEUS_PORT/g" \
          -e "s/\${PROMETHEUS_JAR}/$PROMETHEUS_JAR/g" \
	  $BASE_DIR/docker/compose/template-server-docker-compose.yaml >> $CLUSTER_DIR/docker-compose.yaml
      let HOST_CLIENT_PORT=HOST_CLIENT_PORT+1
      let HOST_JMX_PORT=HOST_JMX_PORT+1
      let HOST_DEBUG_PORT=HOST_DEBUG_PORT+1
      let HOST_PROMETHEUS_PORT=HOST_PROMETHEUS_PORT+1
   done

   # Append leader services to docker-compose.yaml
   let DIFF_PORT=LOCATOR_PORT-DEFAULT_LOCATOR_START_PORT
   let HOST_CLIENT_PORT=CLIENT_PORT+1
   HOST_SPARK_UI_PORT=$DEFAULT_SPARK_UI_PORT
   HOST_SPARK_JOBSERVER_PORT=$DEFAULT_SPARK_JOBSERVER_PORT
   HOST_JMX_PORT=$DEFAULT_LEADER_JMX_START_PORT
   HOST_DEBUG_PORT=$DEFAULT_LEADER_DEBUG_START_PORT
   HOST_PROMETHEUS_PORT=$DEFAULT_LEADER_PROMETHEUS_START_PORT
   PROMETHEUS_JAR_PATH=`find $PADOGRID_HOME/lib -name jmx_prometheus_javaagent*.jar`
   PROMETHEUS_JAR=$(basename $PROMETHEUS_JAR_PATH)
   LEADER_COUNT=1
   for i in $(seq 1 $LEADER_COUNT); do   
      LEADER_NAME="leader$i"
      sed -e "s/\${VERSION}/$SNAPPYDATA_VERSION/g" \
          -e "s/\${LEADER_NAME}/$LEADER_NAME/g" \
          -e "s/\${HOST_SPARK_UI_PORT}/$HOST_SPARK_UI_PORT/g" \
          -e "s/\${HOST_SPARK_JOBSERVER_PORT}/$HOST_SPARK_JOBSERVER_PORT/g" \
	  -e "s/\${HOST_JMX_PORT}/$HOST_JMX_PORT/g" \
          -e "s/\${HOST_DEBUG_PORT}/$HOST_DEBUG_PORT/g" \
          -e "s/\${HOST_PROMETHEUS_PORT}/$HOST_PROMETHEUS_PORT/g" \
          -e "s/\${PROMETHEUS_JAR}/$PROMETHEUS_JAR/g" \
	  $BASE_DIR/docker/compose/template-leader-docker-compose.yaml >> $CLUSTER_DIR/docker-compose.yaml
      let HOST_CLIENT_PORT=HOST_CLIENT_PORT+1
      let HOST_JMX_PORT=HOST_JMX_PORT+1
      let HOST_DEBUG_PORT=HOST_DEBUG_PORT+1
      let HOST_PROMETHEUS_PORT=HOST_PROMETHEUS_PORT+1
   done
   if [ "$NETWORK_SPECIFIED" == "true" ] && [ "$NETWORK" != "" ]; then
      echo "" >> $CLUSTER_DIR/docker-compose.yaml
      echo "networks:" >> $CLUSTER_DIR/docker-compose.yaml
      echo "  default:" >> $CLUSTER_DIR/docker-compose.yaml
      echo "    name: $NETWORK" >> $CLUSTER_DIR/docker-compose.yaml
      echo "    external: true" >> $CLUSTER_DIR/docker-compose.yaml
   fi
fi

# Set group permissions for workspace owner
if [ "$GROUP_PERMISSIONS_ENABLED" == "true" ]; then
   chmod -R g+rw,o-rwx $CLUSTER_DIR
fi

#
# Display DOCKER Environment
#
echo ""
echo "         WORKSPACE: $PADOGRID_WORKSPACE"
echo -e "           Product: ${CLightGreen}snappydata${CNone}"
echo "            Docker: $DOCKER"
echo "Docker Environment:"
echo "   $CLUSTER_DIR"

cat <<EOF

$CLUSTER
$TTee .env
$TTee README.md
$TTee docker-compose.yaml
$TLel padogrid
    $TTee etc
    $TTee lib
    $TLel plugins

EOF
echo -e "Please follow the instructions in the ${CLightGreen}$DOCKER_DOC${CNone} document."
echo -e "  - Change environment variables in the ${CLightGreen}.env${CNone} file as needed."
echo -e "  - Configure locator(s) and servers (members) as needed in the ${CLightGreen}docker-compose.yaml${CNone} file as needed."
echo "To start Docker cluster:"
echo -e "   ${CLightGreen}cd_docker $CLUSTER${CNone}"
echo -e "   ${CLightGreen}docker-compose up${CNone}"
echo ""


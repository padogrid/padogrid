# -------------------------------------------------------------------------
# Overview:
#
# Group test cases allow you to create and test groups of Coherence operations.
# You can think of a group as a function invoking one or more Coherence operations.
# As an example, a group could contain put, get, put, get calls making a total
# of four (4) Coherence NamedCache (Map) calls. You can designate threads to invoke this
# group and measure the average latency of each group (function) call.
# -------------------------------------------------------------------------

# The number of test runs. Each group has the member size set by the 
# 'memberSetSize' property. This means the total number of valid 
# legitimate transactions that return summary would be limited to
# the number of groups. Use this property to increase the number of
# transactions.
# Default: 1
testCount=1

# Interval between test runs in msec.
# Default: 0
testIntervalInMsec=0

# Print status interval in sec. The application prints status in this interval
# to the console.
# Default: 10 sec
printStatusIntervalInSec=10

# Turn off logging (recommended)
geode.logging.type=none

# Group names separated by ',' or '&'. If ',', then the next group executes after
# the current group completes. If '&', then the current group and the next group
# execute concurrently. Note that testCount applies per group. For example, if
# testCount=2 and groupName=g1&g2,g3 then g1 and g2 execute concurrently twice
# before g3 executes twice.
groupNames=g1,g2,g3,g4

# -------------------------------------------------------------------------
# Group:
#
# A group represents a function that invokes one or more Coherence NamedCache (Map) methods.
#
# name         Group name.
#
# threadCount  The number of threads per group test.
#
#              Default: (processor count * 1.5).
#
# operations  Comma separated list of operations to perform. Operations are
#             individually defined. See the "Operations" section for details.
#             The listed operations are invoked sequentially per group invocation.
#             For example, if totalInvocationCount=1000 then the operations listed
#             will be invoked 1000 times in the order they are listed.
#
# totalInvocationCount Total number of group invocations.
# 
# comment     Any text describing the group. 
# -------------------------------------------------------------------------

# g1 puts 1000 Customer objects into /nw/customers defined by the 'put1' operation.
# Note that you can list more than one operations separated by commas.
g1.name=Customer Set Test
g1.threadCount=8
g1.operations=put1
g1.comment=Stores Customer objects into /nw/customers. This test should be carried out with \
CacheWriterLoaderPkDbImpl enabled in the cluster to write to the database of your choice.
g1.totalInvocationCount=1000

# g2 reads back the Customer objects written by g1
g2.name=Customer Get Test
g2.threadCount=8
g2.operations=get1
g2.comment=Reads all Customer objects stored by g1.
g2.totalInvocationCount=1000

# g3 puts 1000 Order objects into /nw/orders defined by the 'put1' operation.
# Note that you can list more than one operations separated by commas.
g3.name=Order Set Test
g3.threadCount=8
g3.operations=put2
g3.comment=Stores Order objects into /nw/orders. This test should be carried out with \
CacheWriterLoaderPkDbImpl enabled in the cluster to write to the database of your choice.
g3.totalInvocationCount=1000

# g4 reads back the Order objects written by g3
g4.name=Order Get Test
g4.threadCount=8
g4.operations=get2
g4.comment=Reads all Order objects stored by g3.
g4.totalInvocationCount=1000

# -------------------------------------------------------------------------
# Operations:
#
# ref             The test case reference name. The defining test case inherits
#                 all non-factory values set by the referenced test case. The
#                 properties that begin with 'factory.' are not inherited.
#                 Referenced properties are overwritten if defined.
#
# testCase        Test case.
#                 If invalid values are entered then the default value is assigned.
#
#                 Valid Test Cases: put, get, putall, getall.                 
#                 Default: getall                
#
# payloadSize     The value object size in bytes. The value object is a blob
#                 object containing the specified payload size in the form of
#                 byte array. Note that the key objects are String objects with
#                 the prefix defined by the key.prefix property. This property is
#                 used by the following test cases only.
#
#                 Used By: put, putall
#                 Default: 1024
#
# batchSize       The number of objects per putAll() or getAll() call per thread.
#
#                 Used By: putall, getall
#                 Default: 100
#
# totalEntryCount The total number of entries is used by putall, getall, and get.
#
#                 - For putall and getall, this value dictates the upper bound of
#                   the entry count. The number of objects inserted will be less
#                   than or equal to this value. To insert the exact number of entries
#                   defined by totalEntryCount, the following must hold true:
#
#                      totalEntryCount = totalInvocationCount * batchSize
#
#                 - For get, totalEntryCount defines the range in selecting
#                   keys randomly. This value is always greater than or equal
#                   to key number.
#
#                       totalEntryCount >= key-number
#
#                 Used By: putall, getall, get
#                 Default: 10000
#
# key.prefix      Key names begin with this value.
#
#                 Default: k
#
# key.startNum    Key start number. Each key name stars with the prefix defined by
#                 the key.prefix property followed by a number that is increased
#                 incrementally starting from this value. For example, 
#                 key.prefix=a and key.startNum=10 produces the first key name, "a10".
#
#                 Default: 1
# -------------------------------------------------------------------------

# put1
put1.map=/nw/customers
put1.testCase=put
put1.key.startNum=0
put1.key.prefix=000000-
put1.factory.class=org.oracle.coherence.addon.demo.nw.impl.CustomerFactoryImpl
# If isRandom is true then key.length and key.isLeadingZeros have no effect
put1.factory.key.isRandom=false
# key.length is ignored if isLeadingZeros is false
# If key.length is <= 0 then it defaults to the the key number length
# and key.isLeadingZeros has no effect.
put1.factory.key.length=11
put1.factory.key.isLeadingZeros=true

# get1
get1.map=/nw/customers
get1.testCase=get
get1.key.prefix=000000-
get1.key.startNum=0
# totalEntryCount for get must be less than or equal to the entry count in the map.
# This value provides the key range when selecting keys randomly.
get1.totalEntryCount=1000
get1.randomSeed=1
get1.factory.class=org.oracle.coherence.addon.demo.nw.impl.CustomerFactoryImpl
# If isRandom is true then key.length and key.isLeadingZeros have no effect
get1.factory.key.isRandom=false
# key.length is ignored if isLeadingZeros is false
# If key.length is <= 0 then it defaults to the the key number length
# and key.isLeadingZeros has no effect.
get1.factory.key.length=11
get1.factory.key.isLeadingZeros=true

# put2
put2.map=/nw/orders
put2.ref=put1
put2.factory.class=org.oracle.coherence.addon.demo.nw.impl.OrderFactoryImpl
# If isRandom is true then key.length and key.isLeadingZeros have no effect
put2.factory.key.isRandom=false
# key.length is ignored if isLeadingZeros is false
# If key.length is <= 0 then it defaults to the the key number length
# and key.isLeadingZeros has no effect.
put2.factory.key.length=11
put2.factory.key.isLeadingZeros=true
# customerId to co-locate order with customer data
put2.factory.customerId.prefix=000000-
put2.factory.customerId.max=100

# get2
get2.map=/nw/orders
get2.ref=get1
get2.factory.class=org.oracle.coherence.addon.demo.nw.impl.OrderFactoryImpl
# If isRandom is true then key.length and key.isLeadingZeros have no effect
get2.factory.key.isRandom=false
# key.length is ignored if isLeadingZeros is false
# If key.length is <= 0 then it defaults to the the key number length
# and key.isLeadingZeros has no effect.
get2.factory.key.length=11
get2.factory.key.isLeadingZeros=true

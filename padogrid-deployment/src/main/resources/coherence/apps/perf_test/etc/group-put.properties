# -------------------------------------------------------------------------
# Overview:
#
# Group test cases allow you to create and test groups of Coherence operations.
# You can think of a group as a function invoking one or more Coherence operations.
# As an example, a group could contain set, get, put, get calls making a total
# of four (4) Coherence NamedCache (Map) calls. You can designate threads to invoke this
# group and measure the average latency of each group (function) call.
# -------------------------------------------------------------------------

# The number of test runs. Each group has the member size set by the 
# 'memberSetSize' property. This means the total number of valid 
# legitimate transactions that return summary would be limited to
# the number of groups. Use this property to increase the number of
# transactions.
# Default: 1
testCount=1

# Interval between test runs in msec.
# Default: 0
testIntervalInMsec=0

# Print status interval in sec. The application prints status in this interval
# to the console.
# Default: 10 sec
printStatusIntervalInSec=10

# Turn off logging (recommended)
geode.logging.type=none

# Group names separated by commas. The listed groups are executed concurrently.
groupNames=g1

# -------------------------------------------------------------------------
# Group:
#
# A group represents a function that invokes one or more Coherence NamedCache (Map) methods.
#
# name         Group name.
#
# threadCount  The number of threads per group test.
#
#              Default: (processor count * 1.5).
#
# operations  Comma separated list of operations to perform. Operations are
#             individually defined. See the "Operations" section for details.
#             The listed operations are invoked sequentially per group invocation.
#             For example, if totalInvocationCount=1000 then the operations listed
#             will be invoked 1000 times in the order they are listed.
#
# totalInvocationCount Total number of group invocations.
# 
# comment     Any text describing the group. 
# -------------------------------------------------------------------------

# Invoke 22 operations that ingest data into Coherence using putAll() 
g1.name=Multi-PutAll
g1.threadCount=10
g1.operations=put1,put2,put3,put4,put5,put6,put7,put8,put9,put10,put11,put12,put13,put14,put15,put16,put17,put18,put19,put20,put21,put22
g1.comment=Populates 22 maps in preparation for multi-get tests. Cluster size should be >20 GiB.
g1.totalInvocationCount=1000

# -------------------------------------------------------------------------
# Operations:
#
# ref             The test case reference name. The defining test case inherits
#                 all values set by the referenced test case. Referenced properties
#                 are overwritten if defined.
#
# testCase        Test case.
#                 If invalid values are entered then the default value is assigned.
#
#                 Valid Test Cases: set, get, getall, get, getall.                 
#                 Default: getall                
#
# payloadSize     The value object size in bytes. The value object is a blob
#                 object containing the specified payload size in the form of
#                 byte array. Note that the key objects are String objects with
#                 the prefix defined by the key.prefix property. This property is
#                 used by the following test cases only.
#
#                 Used By: set, put, putall
#                 Default: 1024
#
# batchSize       The number of objects per putAll() or getAll() call per thread.
#
#                 Used By: putall, getall
#                 Default: 100
#
# totalEntryCount The total number of entries is used by putall, getall, and get.
#
#                 - For putall and getall, this value dictates the upper bound of
#                   the entry count. The number of objects inserted will be less
#                   than or equal to this value. To insert the exact number of entries
#                   defined by totalEntryCount, the following must hold true:
#
#                      totalEntryCount = totalInvocationCount * batchSize
#
#                 - For get, totalEntryCount defines the range in selecting
#                   keys randomly. This value is always greater than or equal
#                   to key number.
#
#                       totalEntryCount >= key-number
#
#                 Used By: putall, getall, get
#                 Default: 10000
#
# key.prefix      Key names begin with this value.
#
#                 Default: k
#
# key.startNum    Key start number. Each key name stars with the prefix defined by
#                 the key.prefix property followed by a number that is increased
#                 incrementally starting from this value. For example, 
#                 key.prefix=a and key.startNum=10 produces the first key name, "a10".
#
#                 Default: 1
# -------------------------------------------------------------------------

# HINT: putall
# To make put totalEntryCount objects,  totalInvocationCount * batchSize must equal
# to totalEntryCount. See above for details.

# -------------------------------------------------------------------------
# Data Ingestion Breakdown:
#
#       Maps   Count     Payload(B)  Size(GiB)
#       ----  ---------  ----------  ---------
#         10  1,000,000        1024      10
#          5    500,000        1024       2.5
#          4    100,000        1024       0.4
#          3     10,000        1024       0.03
#      -----  ---------  ----------  ---------
# Total:  22  1,610,000         N/A      12.93
# -------------------------------------------------------------------------
 
put1.map=map1
put1.testCase=putall
put1.totalEntryCount=1000000
put1.payloadSize=1024
put1.batchSize=1000                                                                                
put1.key.prefix=a                                                                                  
put1.key.startNum=1                                                                                
                                                                                                   
put2.ref=put1
put2.map=map2

put3.ref=put1
put3.map=map3

put4.ref=put1
put4.map=map4

put5.ref=put1
put5.map=map5

put6.ref=put1
put6.map=map6

put7.ref=put1
put7.map=map7

put8.ref=put1
put8.map=map8

put9.ref=put1
put9.map=map9                                                                                      

put10.ref=put1
put10.map=map10                                                                                    

put11.map=map11
put11.testCase=putall
put11.totalEntryCount=500000
put11.payloadSize=1024
put11.batchSize=1000
put11.key.prefix=a
put11.key.startNum=1

put12.ref=put11
put12.map=map12

put13.ref=put11
put13.map=map13

put14.ref=put11
put14.map=map14

put15.ref=put11
put15.map=map15

put16.map=map16
put16.testCase=putall
put16.totalEntryCount=100000
put16.payloadSize=1024
put16.batchSize=1000
put16.key.prefix=a
put16.key.startNum=1

put17.ref=put16
put17.map=map17

put18.ref=put16
put18.map=map18

put19.ref=put16
put19.map=map19

put20.map=map20
put20.testCase=putall
put20.totalEntryCount=10000
put20.payloadSize=1024
put20.batchSize=1000
put20.key.prefix=a
put20.key.startNum=1

put21.ref=put20
put21.map=map21

put22.ref=put20
put22.map=map22


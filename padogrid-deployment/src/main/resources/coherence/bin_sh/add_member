#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-cluster -num -all -count -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Add a new member to the specified cluster in the current
                 padogrid workspace

SYNOPSIS
   $EXECUTABLE [-cluster cluster_name] [-num member_number] [-count member_count] [-all] [-?]

DESCRIPTION
   Adds a new Coherence member to the specified cluster. If members already exist,
   then it adds a member with the next available member number.

   If the cluster is a VM cluster, then only one (1) member is allowed per VM.
   Please note that this is a padogrid restriction, not a Coherence
   product limitation.

OPTIONS
   -cluster cluster_name
             If the -cluster option is present, it starts the member in the specified
             cluster; otherwise, it starts the member in the default cluster.

   -num member_number
             Member number starting from 1.

   -count member_count
             Number of new menbers to add. If not specified, it adds one (1) member.

   -all      
             This option applies to VM clusters only. If specified, it adds a member
             to all VMs in the cluster. member_number is ignored.

NOTES
   For Vagrant, the member number is assigned to the node (VM) number. This
   means you can create multiple clusters, each with their own set of nodes
   identified by the member numbers.

EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF

DEFAULT
   $EXECUTABLE -cluster $CLUSTER

FILES
   $CLUSTER_DIR/etc/cluster.properties
             The current cluster configuration file.

EOF
fi
cat <<EOF
SEE ALSO
EOF
   printSeeAlsoList "*member*" $EXECUTABLE
   exit
fi

#
# If '-count' specified then recursively execute this command
#
if [ "$COUNT" != "" ]; then
   if [ "$(isNumber $COUNT)" == "false" ]; then
      echo -e "${CLightRed}ERROR:${CNone} Invalid number [$COUNT]. Command aborted."
      exit 1
   fi
   if [ $COUNT -eq 0 ]; then
     exit
   elif [ $COUNT -gt 1 ]; then
      for i in $(seq $COUNT); do
         $EXECUTABLE
      done
      exit
   fi
fi

#
# Run the target cluster command if the product is different.
#
if [ "$PRODUCT_CLUSTER_SPECIFIED" == "false" ]; then
   if [ "$THIS_PRODUCT" != "$PRODUCT" ]; then
      $PADOGRID_HOME/$PRODUCT/bin_sh/$EXECUTABLE -product-cluster $CLUSTER "$@"
      exit
   fi
fi

POD=`getClusterProperty "pod.name" $POD`

#
# VM cluster
#
if [ "$REMOTE_SPECIFIED" == "false" ]; then
   VM_ENABLED=`getClusterProperty "vm.enabled" "false"`
   if [ "$VM_ENABLED" == "true" ]; then
      VM_HOSTS=`getClusterProperty "vm.hosts"`
      if [ "$VM_HOSTS" == "" ]; then
         echo "ERROR: VM hosts undefined. Set 'vm.hosts' in the following cluster.properties file."  
         echo "       $ETC_DIR/cluster.properties"
         echo "       Command aborted."
         exit 1
      fi

      # If pod cluster, then source in the pod env vars to set the VM specific variables
      OS_ENV=`getOsEnv`
      if [ "$OS_ENV" == "gh" ] && [ "$POD" != "local" ]; then
         if [ -f "$PODS_DIR/$POD/.nodeenv.sh" ]; then
            . "$PODS_DIR/$POD/.nodeenv.sh"
         fi
      fi

      # Replace , with space
      __VM_HOSTS=$(echo "$VM_HOSTS" | sed "s/,/ /g")
      DEFAULT_USER=$(whoami)
      VM_USER=`getClusterProperty "vm.user" "$DEFAULT_USER"`
      VM_KEY=`getClusterProperty "vm.privateKeyFile"`
      if [ "$VM_KEY" != "" ]; then 
         VM_KEY="-i $VM_KEY"
      fi
      if [ "$ALL" == "true" ]; then
         for VM_HOST in $__VM_HOSTS; do
            ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no "$COMMAND_PREFIX $VM_PADOGRID_HOME/$PRODUCT/bin_sh/add_member -cluster $CLUSTER -remote $VM_HOST -workspace $VM_PADOGRID_WORKSPACE -num 1"
         done
      else
         # Determine the host
         __MEMBER_NUMBER=0
         __FOUND="false"
         
         for VM_HOST in $__VM_HOSTS; do
            let __MEMBER_NUMBER=__MEMBER_NUMBER+1
            if [ $__MEMBER_NUMBER -eq $MEMBER_NUM_NO_LEADING_ZERO ]; then
               __FOUND="true"
               if [ "$POD" == "local" ]; then
                  NUM=1
               else
                  let NUM=__MEMBER_NUMBER
               fi
               ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no "$COMMAND_PREFIX $VM_PADOGRID_HOME/$PRODUCT/bin_sh/add_member -cluster $CLUSTER -remote $VM_HOST -workspace $VM_PADOGRID_WORKSPACE -num $NUM"
               break;
            fi
         done
         FIRST_NUMBER=1
         LAST_NUMBER=$__MEMBER_NUMBER
         if [ "$__FOUND" == "false" ]; then
            echo "ERROR: Invalid member number. Valid range is [$FIRST_NUMBER, $LAST_NUMBER]. Command aborted." 
         fi
      fi
      exit
   fi
fi

#
# Local cluster
#
NODE_NAME_PREFIX=`getPodProperty "node.name.prefix" $NODE_NAME_PREFIX`

MEMBER_PREFIX=`getMemberPrefix`
MEMBER_PREFIX_LEN=${#MEMBER_PREFIX}
CLUSTER_DIR=$CLUSTERS_DIR/$CLUSTER
RUN_DIR=$CLUSTER_DIR/run

if  [ ! -d $CLUSTER_DIR ]; then
   echo "----------------------------------------------------------------"
   echo "WORKSPACE: $PADOGRID_WORKSPACE"
   echo "  Cluster: $CLUSTER"
   echo "    ERROR: This cluster has not been created. Please run the create_cluster command"
   echo "           to create the cluster before running this command. Command aborted."
   echo "----------------------------------------------------------------"
   exit 1
fi

if [ "$MEMBER_NUM_SPECIFIED" == "true" ]; then
   NEW_MEMBER_NUMBER=$MEMBER_NUM
else
   if [ "$REMOTE_SPECIFIED" == "true" ]; then
      NEW_MEMBER_NUMBER=1
   else
      # Find the next available number
      pushd $RUN_DIR > /dev/null 2>&1
      PREV_MEMBER_NUMBER=0
      for i in ${MEMBER_PREFIX}*; do
         if [ -d "$i" ]; then
           MEMBER_NUMBER=${i:$MEMBER_PREFIX_LEN}
           MEMBER_NUMBER=$(trimLeadingZero $MEMBER_NUMBER)
           let __NUM=PREV_MEMBER_NUMBER+1
           if [ $MEMBER_NUMBER -gt $__NUM ]; then
              MEMBER_NUMBER=$PREV_MEMBER_NUMBER
              break;
           else
              PREV_MEMBER_NUMBER=$MEMBER_NUMBER
           fi
         fi
      done
      let NEW_MEMBER_NUMBER=MEMBER_NUMBER+1
      popd > /dev/null 2>&1
   fi
fi
NEW_MEMBER=`getMemberName $NEW_MEMBER_NUMBER`
NEW_MEMBER_DIR=$RUN_DIR/$NEW_MEMBER

MEMBER_EXISTS="false"
if [ -d $NEW_MEMBER_DIR ]; then
   MEMBER_EXISTS="true"
else
   mkdir -p $NEW_MEMBER_DIR
fi

# Copy the template xml file into the cluster etc directory if the
# cluster is missing the cache-config.xml file. This may occur for those
# clusters that are bundled in the padogrid distribution.
if [ ! -f $ETC_DIR/cache-config.xml ]; then
   cp $BASE_DIR/etc/template-cache-config.xml $ETC_DIR/cache-config.xml
fi

echo "----------------------------------------------------------------"
echo "    WORKSPACE: $PADOGRID_WORKSPACE"
echo "      Cluster: $CLUSTER"
if [ "$MEMBER_EXISTS" == "true" ]; then
echo "Member Exists: $NEW_MEMBER"
else
echo " Member Added: $NEW_MEMBER"
fi
echo "  Working Dir: $NEW_MEMBER_DIR"
echo "----------------------------------------------------------------"

#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-java -product -cluster -vm -simulate -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

#
# Determeint $TAR_BALL_PATH
#
ROOT_DIR_NAME=$(basename $BASE_DIR)
TOP_DIR="$(dirname "$BASE_DIR")"
TAR_BALL_GZ_NAME=$ROOT_DIR_NAME.tar.gz
TAR_BALL_GZ_PATH=$BASE_DIR/bundles/$TAR_BALL_GZ_NAME

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Install Coherence and/or Java remotely on the workspace VMs

SYNOPSIS
   $EXECUTABLE [-vm comma_separated_hosts]
               [-cluster cluster_name]
               [-java jdk_distribution_file]
               [-product coherence_distribution_file]
               [-simulate] [-?]

DESCRIPTION
   Installs the local versions of Coherence and Java remotely on all the VMs defined by the
   VM_HOSTS environment variable in the workspace 'setenv.sh' file. To install different versions,
   specify their distribution file paths using the '-java' and '-product' options.
   
   To install only on the cluster VMs, specify the cluster with the '-cluster' option.
   
   To install on a select list of VMs, specify the VM list with the '-vm' option.

   Note that this command and all other commands that begin with the "vm_" prefix are
   available only on VM workspaces.

   The '-vm' option overrides both the '-cluster' option and VM_HOSTS. The '-cluster' option
   overrides VM_HOSTS. 

OPTIONS
   -cluster cluster_name
             Cluster name. If specified, then installations are done on the cluster's VMs
             defined by the property 'vm.hosts' in the cluster 'etc/cluster.properties' file.

   -vm comma_separated_hosts
              A comma separated list of VM hosts or addresses. If the list contains spaces
              then enclosed it in quotes.

   -java java_distribution_file
              JDK distribution file, e.g. jdk-8u212-linux-x64.tar.gz.

   -product coherence_distribution_file
              Coherence distribution file path. If this option is not specified then 'vm_install'
              automatically deploys the locally installed Coherence to the VMs. To use this
              option, you will need to manually create a distribution file from the already
              installed Coherence base. Coherence does not provide a distribution file. The tarball
              should include 'coherence' as the top directory. For example, give the coherence
              installation directory of ~/products/Oracle/Middleware/Oracle_Home/coherence, the
              following creates a distribution tarball that excludes documents and examples.
              
              export BASE_NAME=coherence
              export PARENT_DIR=~/products/Oracle/Middleware/Oracle_Home
              tar --exclude $BASE_NAME/doc --exclude $BASE_NAME/examples -C $PARENT_DIR -czf $BASE_NAME.tar.gz $BASE_NAME            

   -simulate
             Print the remote commands but do not execute.

EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
DEFAULT
   $EXECUTABLE -cluster $CLUSTER file_path

FILES
   $PADOGRID_WORKSPACE/setenv.sh
             The current workspace configuration file.
EOF
fi
cat <<EOF

SEE ALSO
EOF
   printSeeAlsoList "vm_*" $EXECUTABLE
   exit
fi

# Available only on VM workspaces
if [ "$VM_ENABLED" != "true" ]; then
   echo "----------------------------------------------------------------"
   echo "WORKSPACE: $PADOGRID_WORKSPACE"
   echo "    ERROR: The workspace is not a VM workspace. Command aborted."
   echo "----------------------------------------------------------------"
   exit 1 
fi

# If the -vm option is specified then it overrides all other options
if [ "$VM_SPECIFIED" == "true" ]; then
   if [ "$VM_HOSTS_ARG" != "" ] && [[ "$VM_HOSTS_ARG" != *"-"* ]]; then
      VM_HOSTS=$VM_HOSTS_ARG
   else
      echo "----------------------------------------------------------------"
      echo "WORKSPACE: $PADOGRID_WORKSPACE"
      echo >&2 "ERROR: Invalid value for -vm [$VM_HOSTS_ARG]. Command aborted."
      echo "----------------------------------------------------------------"
      exit 1
   fi
else
   # The -cluster option overrides VM_HOSTS
   if [ "$CLUSTER_SPECIFIED" == "true" ]; then
      if [ "`isClusterExist "$CLUSTER"`" == "false" ]; then 
         echo "----------------------------------------------------------------"
         echo "WORKSPACE: $PADOGRID_WORKSPACE"
         echo >&2 "ERROR: Cluster does not exist [$CLUSTER]. Command aborted."
         echo "----------------------------------------------------------------"
         exit 1
      fi
      VM_ENABLED=`getClusterProperty "vm.enabled" "false"`
      if [ "$VM_ENABLED" == "false" ]; then
         echo "----------------------------------------------------------------"
         echo "WORKSPACE: $PADOGRID_WORKSPACE"
         echo >&2 "ERROR: Not a VM cluster [$CLUSTER]. To enable VMs, set the 'vm.enabled' property"
         echo >&2 "       in the 'etc/cluster.properties' file."
         echo "----------------------------------------------------------------"
         exit 1
      fi
      VM_HOSTS=`getClusterProperty "vm.hosts"`
      if [ "$VM_HOSTS" == "" ]; then
         if [ "$VM_HOSTS" == "" ]; then
            echo "----------------------------------------------------------------"
            echo "WORKSPACE: $PADOGRID_WORKSPACE"
            echo >&2 "    ERROR: The 'vm.hosts' property is not set in the 'etc/cluster.properties' file."
            echo >&2 "           file. Command aborted."
            echo "----------------------------------------------------------------"
            exit 1
         fi
      fi
   fi
fi

# Replace , with space
__VM_HOSTS=$(echo "$VM_HOSTS" | sed "s/,/ /g")
DEFAULT_USER=$(whoami)
VM_USER=`getClusterProperty "vm.user" "$DEFAULT_USER"`

if [ "$KEY" == "" ]; then
   KEY=`getClusterProperty "vm.privateKeyFile"`
fi
VM_KEY=""
if [ "$KEY" != "" ]; then 
   if [ ! -f "$KEY" ]; then
      echo >&2 "ERROR: Specified private key does not exist [$KEY]."
      echo >&2 "       Command aborted."
      exit 1
   fi
   VM_KEY="-i $KEY"
fi

# Fail fast: Exit if any of the hosts is not reachable
for VM_HOST in $__VM_HOSTS; do
   REPLY=$(ssh -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no -o PasswordAuthentication=no "echo hello" 2>&1)
   EXIT_CODE=$?
   if [ "$EXIT_CODE" != "0" ]; then
      echo -e "ERROR: $VM_HOST - ${CLightRed}Failed${CNone} ($REPLY)"
      echo "       Command aborted."
      exit 1
   fi
done

# Determine all VMs that do not have Java and Coherence installed.
JAVA_HOME_COMMAND="if [ -d "$VM_JAVA_HOME" ]; then echo true; else echo false; fi"
COHERENCE_HOME_COMMAND="if [ -d "$VM_COHERENCE_HOME" ]; then echo true; else echo false; fi"
JAVA_HOME_NOT_FOUND_LIST=""
COHERENCE_HOME_NOT_FOUND_LIST=""
for VM_HOST in $__VM_HOSTS; do
   JAVA_HOME_EXISTS=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no "$JAVA_HOME_COMMAND")
   COHERENCE_HOME_EXISTS=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no "$COHERENCE_HOME_COMMAND")
   if [[ "$JAVA_HOME_EXISTS" == *"false" ]]; then
      JAVA_HOME_NOT_FOUND_LIST="$JAVA_HOME_NOT_FOUND_LIST $VM_HOST"
   fi
   if [[ "$COHERENCE_HOME_EXISTS" == *"false" ]]; then
      COHERENCE_HOME_NOT_FOUND_LIST="$COHERENCE_HOME_NOT_FOUND_LIST $VM_HOST"
   fi
done

echo ""

REMOTE_VM_KEY=""
if [ "$VM_PRIVATE_KEY_FILE" != "" ]; then
   PRIVATE_KEY_FILE_NAME=$(basename $VM_PRIVATE_KEY_FILE)
   REMOTE_VM_KEY="-i $VM_PADOGRID_WORKSPACE/$PRIVATE_KEY_FILE_NAME"
fi

#
# Returns the VM that has the product distribution file.
# @required VM_PRODUCT_HOME
# @param    productDistFilePath Product distribution file path in VMs.
#
function findVmWithProductDist
{
   local __PRODUCT_DIST_FILE_NAME=$(basename "$1")
   local __PRODUCT_PARENT_PATH="$(dirname "$VM_PRODUCT_HOME")"
   local __PRODUCT_COMMAND="if [ -f "/tmp/$__PRODUCT_DIST_FILE_NAME" ]; then echo true; else echo false; fi"

   # Determine the first VM that has product distribution file
   BASE_VM=""
   for VM_HOST in $__VM_HOSTS; do
      __PRODUCT_EXISTS=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no "$__PRODUCT_COMMAND")
      if [ "$__PRODUCT_EXISTS" == "true" ]; then
         BASE_VM=$VM_HOST
         break
      fi
   done
   echo "$BASE_VM"
}

#
# Installs the product defined by the following variables
#
# @required PRODUCT
# @required PRODUCT_HOME_NOT_FOUND_LIST
# @required PRODUCT_PATH
# @required VM_PRODUCT_HOME
# @param    baseVM The VM that has the product distribution file. If unspecified or an empty string,
#                  then PRODUCT_PATH must be specified.
#
function installProduct
{
   if [ "$PRODUCT_HOME_NOT_FOUND_LIST" == "" ]; then
      echo "$PRODUCT already installed on all VMs."
   else

      local BASE_VM="$1"
      if [ "$BASE_VM" == "" ] && [ ! -f "$PRODUCT_PATH" ]; then
         echo >&2 "ERROR: Invalid path [$PRODUCT_PATH]."
         echo >&2 "       Command aborted."
         exit 1
      fi

      local __PRODUCT_DIST_FILE_NAME=$(basename $PRODUCT_PATH)
      local __PRODUCT_PARENT_PATH="$(dirname "$VM_PRODUCT_HOME")"
      local __PRODUCT_COMMAND="if [ -f "/tmp/$__PRODUCT_DIST_FILE_NAME" ]; then echo true; else echo false; fi"

      echo "$PRODUCT installation"
      echo "    Local Source: $PRODUCT_PATH"
      echo "   Remote Target: $VM_PRODUCT_HOME"

      if [ "$BASE_VM" == "" ]; then
         for VM_HOST in $PRODUCT_HOME_NOT_FOUND_LIST; do
            echo "   Uploading $VM_HOST [$PRODUCT_PATH]..."
            BASE_VM=$VM_HOST
            break
         done
         # Upload to the base VM
         if [ "$SIMULATE" == "true" ]; then
            echo scp -q -r -o stricthostkeychecking=no $VM_KEY $PRODUCT_PATH $VM_USER@$BASE_VM:/tmp/
         else
            scp -q -r -o stricthostkeychecking=no $VM_KEY $PRODUCT_PATH $VM_USER@$BASE_VM:/tmp/
         fi
      fi

      for VM_HOST in $PRODUCT_HOME_NOT_FOUND_LIST; do
         echo "   Installing $VM_HOST..."
         if [ "$VM_HOST" != "$BASE_VM" ]; then
            # Copy from the base VM
            if [ "$SIMULATE" == "true" ]; then
               echo ssh -q -n $VM_KEY $VM_USER@$BASE_VM -o stricthostkeychecking=no "scp -o stricthostkeychecking=no $REMOTE_VM_KEY /tmp/$__PRODUCT_DIST_FILE_NAME $VM_USER@$VM_HOST:/tmp/"
            else
               ssh -q -n $VM_KEY $VM_USER@$BASE_VM -o stricthostkeychecking=no "scp -o stricthostkeychecking=no $REMOTE_VM_KEY /tmp/$__PRODUCT_DIST_FILE_NAME $VM_USER@$VM_HOST:/tmp/"
            fi
         fi
    # Install
         if [ "$SIMULATE" == "true" ]; then
            echo ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no "if [ ! -d "$__PRODUCT_PARENT_PATH" ]; then mkdir -p "$__PRODUCT_PARENT_PATH"; fi"
            echo ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no "tar -C $__PRODUCT_PARENT_PATH/ -xzf /tmp/$__PRODUCT_DIST_FILE_NAME"
         else
            ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no "if [ ! -d "$__PRODUCT_PARENT_PATH" ]; then mkdir -p "$__PRODUCT_PARENT_PATH"; fi"
            ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no "tar -C $__PRODUCT_PARENT_PATH/ -xzf /tmp/$__PRODUCT_DIST_FILE_NAME"
         fi

    # Remove
         #ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no "rm /tmp/$__PRODUCT_DIST_FILE_NAME"
      done

      echo "$PRODUCT installation complete."
   fi
   echo ""
}

if [ "$JAVA_HOME_ARG" == "" ] && [ "$PRODUCT_ARG" == "" ]; then
   CREATE_AND_INSTALL="true"
else
   CREATE_AND_INSTALL="false"
fi

JAVA_BASE_VM=""
PRODUCT_BASE_VM=""
if [ "$CREATE_AND_INSTALL" == "true" ]; then
   if [ "$JAVA_HOME_NOT_FOUND_LIST" != "" ]; then
      if [[ ${OS_NAME} == CYGWIN* ]]; then
         echo "Java deployment from Cygwin is not supported. Please use the -java option"
         echo "to specify the Java distribution file path."
      else
         PARENT_DIR=$(dirname "$JAVA_HOME")
         BASE_NAME=$(basename "$JAVA_HOME")
         JAVA_HOME_ARG="/tmp/$BASE_NAME.tar.gz"
         JAVA_BASE_VM=$(findVmWithProductDist "$JAVA_HOME_ARG")
         if [ "$JAVA_BASE_VM" == "" ]; then
            tar --exclude "$BASE_NAME/*src*" --exclude "$BASE_NAME/doc*" -C $PARENT_DIR -czf "/tmp/$BASE_NAME.tar.gz" "$BASE_NAME"
         fi
      fi
   fi
   if [ "$COHERENCE_HOME_NOT_FOUND_LIST" != "" ]; then
      PARENT_DIR=$(dirname "$COHERENCE_HOME")
      BASE_NAME=$(basename "$COHERENCE_HOME")
      PRODUCT_ARG="/tmp/$BASE_NAME.tar.gz"
      PRODUCT_BASE_VM=$(findVmWithProductDist "$PRODUCT_ARG")
      if [ "$PRODUCT_BASE_VM" == "" ]; then
         tar --exclude "$BASE_NAME/doc" --exclude "$BASE_NAME/examples" -C $PARENT_DIR -czf "/tmp/$BASE_NAME.tar.gz" "$BASE_NAME"
      fi
   fi
fi

# Install Java
if [ "$JAVA_HOME_ARG" != "" ]; then
   
   # Arguments to installProduct function
   PRODUCT="Java"
   PRODUCT_HOME_NOT_FOUND_LIST=$JAVA_HOME_NOT_FOUND_LIST
   PRODUCT_PATH=$JAVA_HOME_ARG
   VM_PRODUCT_HOME=$VM_JAVA_HOME
   
   installProduct "$JAVA_BASE_VM"

   if [ "$CREATE_AND_INSTALL" == "true" ]; then
      if [ -f "$PRODUCT_ARG" ]; then
         rm "$PRODUCT_ARG"
      fi
   fi
fi

# Install Coherence
if [ "$PRODUCT_ARG" != "" ]; then
   # Arguments to installProduct function
   PRODUCT="Coherence"
   PRODUCT_HOME_NOT_FOUND_LIST=$COHERENCE_HOME_NOT_FOUND_LIST
   PRODUCT_PATH=$PRODUCT_ARG
   VM_PRODUCT_HOME=$VM_COHERENCE_HOME
   
   installProduct "$PRODUCT_BASE_VM"

   if [ "$CREATE_AND_INSTALL" == "true" ]; then
      if [ -f "$PRODUCT_ARG" ]; then
         rm "$PRODUCT_ARG"
      fi
   fi
fi

echo "VM installation complete."
echo "Run 'vm_test' to check installation and configuration status."
echo ""
if [ "$SIMULATE" == "true" ]; then
   echo "Simulation complete."
fi

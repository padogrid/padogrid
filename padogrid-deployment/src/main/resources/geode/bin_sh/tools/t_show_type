#!/usr/bin/env bash

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

BASE_DIR="$(dirname "$SCRIPT_DIR")"

EXECUTABLE="`basename $0`"

__options()
{
   echo "-diag -recovery -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Determine the network partition type

SYNOPSIS
   $EXECUTABLE [-diag gfsh|true|false] [-recovery] [-?]

DESRIPTION
   Determines the network partition type. The '-diag' option allows you to perform
   an online or offline diagnosis. If you are diagnosing in the cluster environment
   where you can connect to the cluster, then specify the '-diag gfsh' option.
   Otherwise, if you do not have access to the cluster, then specify '-diag true'
   or '-diag false'. The former (true) indicates that one of the locators can
   be connected, and the latter (false) indicates that none of the locators can
   be connected. The default is '-diag false'.

OPTIONS
   -diag gfsh|true|false
            If gfsh, then attempts to connect to the locators found in the log files
            for diagnosis using gfsh. The port number must be set to LOCATOR_PORT in
            the 'setenv.sh'. The default is set as follows.

            LOCATOR_PORT="$LOCATOR_PORT"

            If 'true', then it is assumed that you are able to connect to one of the
            locators.

            If 'false', the it is assumed that you are not able to connect to any of
            the locators.

            Default: false

   -recovery
            If specified, then displays recovery steps for the identified network partition type.

DEFAULT:
   $EXECUTABLE

EOF
exit
fi

RECOVERY_SPECIFIED=$([[ "$@" == *"-recovery"* ]] && echo "true" || echo "false")
SHOW_OPTS=""
if [ "$NO_COLOR" == "true" ]; then
   SHOW_OPTS="-no-color"
fi

if [ "$DIAG_ARG" == "" ]; then
   DIAG_ARG="false"
fi
case $DIAG_ARG in  
      gfsh|true|false)
      ;;
   *)
      echo -e "${CError}ERROR:${CNone} Invalid -connect option [$DIAG_ARG]. Command aborted."
      exit 1
      ;;
esac

# List of executables executed by this command. This is used to remove temp files
# generated by each command upon detecting Ctrl-C.
EXECUTABLE_LIST="$EXECUTABLE t_show_membership_service_failure t_show_cluster_views t_show_quorum_check t_show_stuck_threads t_show_missing_disk_stores"

if [ "$TIMESTAMP" == "" ]; then
   TIMESTAMP=`date +%y%m%d-%H%M%S`
fi

# Trap Ctrl-C
LAST_TIMESTAMP_TRAP=0
trap 'cleanExit "$EXECUTABLE_LIST" "$TIMESTAMP" "false"' INT

TMP_FILE1="/tmp/padogrid-$EXECUTABLE-1-$TIMESTAMP.log"
TMP_FILE2="/tmp/padogrid-$EXECUTABLE-2-$TIMESTAMP.log"

type="normal"

#
# Find membership failures
#
last_restarted_timestamp=""
last_failure_timestamp=""
last_restarted_in_seconds=0
last_failure_in_seconds=0
is_membership_failure="false"
t_show_membership_service_failure -no-color -timestamp $TIMESTAMP > $TMP_FILE1
if [ "$(cat $TMP_FILE1 | grep 'Membership service failure')" != "" ]; then
   if [ "$(cat $TMP_FILE1 | grep 'system restarted')" != "" ]; then
      last_restarted_timestamp=$(t_show_membership_service_failure -no-color -timestamp $TIMESTAMP | grep -B 1 'system restarted' | grep "$TTee" | sed -e "s/$TTee //" | sort | tail -n 1)
      last_failure_timestamp=$(t_show_membership_service_failure -no-color -timestamp $TIMESTAMP | grep -B 1 'Membership service failure' |  grep "$TTee" |  sed -e "s/^.*fatal //" | sort | tail -n 1)
      last_restarted_in_seconds=$(get_time_in_seconds $last_restarted_timestamp)
      last_failure_in_seconds=$(get_time_in_seconds $last_failure_timestamp)
   fi
   is_membership_failure="true"
fi
if [ $last_restarted_in_seconds -lt $last_failure_in_seconds ]; then
   last_restarted_timestamp=""
fi

# Cluster views
t_show_cluster_views -no-color -timestamp $TIMESTAMP > $TMP_FILE1


#
# Get cluster views
#

# Determine a list of log files
log_files="$(cat $TMP_FILE1 | grep .log: | sed 's/:.*$//' | uniq)"

# Determine the view timestamps and last view timestamp
declare -A view_timestamp_array
view_times_in_seconds=""
last_view_timestamp=""
last_view_time_in_seconds=0
index=0
for i in $log_files; do
   first_line=$(cat $TMP_FILE1 | grep "$i" | tail -n 1)
   log_file=$(echo $first_line | grep '.log' | sed 's/.log:.*$/.log/')
   timestamp=$(echo $first_line | sed 's/^.*: //')
   time_in_seconds=$(get_time_in_seconds $timestamp)
   view_timestamp_array[$index]=$timestamp
   if [ $index -eq 0 ]; then
      view_times_in_seconds="$time_in_seconds"
   else
      view_times_in_seconds="$view_times_in_seconds $time_in_seconds"
   fi
   if [ $last_view_time_in_seconds -lt $time_in_seconds ]; then
      last_view_time_in_seconds=$time_in_seconds
      last_view_timestamp=$timestamp
   fi
   let index=index+1
done

if [ "$last_view_timestamp" == "" ]; then
   echo -e "${CError}ERROR:${CNone} Unable to find cluster views. Log file contents are incomplete."
   echo "       Please collect additional log files. Command aborted."
   exit 1
fi

echo ""
if [ "$last_restarted_timestamp" != "" ]; then
   echo "last restarted: $last_restarted_timestamp"
fi
echo "     last view: $last_view_timestamp"

if [ $last_view_time_in_seconds -gt $last_failure_in_seconds ]; then
   line_count=$(cat $TMP_FILE1 | sed '/crashed/h;//!H;$!d;x' | wc -l)
   crashed_count=$(cat $TMP_FILE1 | sed '/crashed/h;//!H;$!d;x' | grep 'crashed:' | sed 's/.*crashed:.* //')
   if [ "$line_count" == "5" ] && [ "$crashed_count" != "" ]; then
      crashed_members=$(cat $TMP_FILE1 | sed '/crashed/h;//!H;$!d;x' | grep -A $crashed_count 'crashed:' | sed '/crashed/d' | sed -e 's/^.* //')

      echo ""
      for i in $crashed_members; do
         echo -e "    crashed: $i"
      done

      # Type 0
      if [ $crashed_count -eq 1 ]; then
         type="0"
         echo ""
         echo -e "       type: ${CError}$type${CNone}"
         echo ""
         show_recovery $type
         cleanExit "$EXECUTABLE_LIST" "$TIMESTAMP" "true"
      fi
   fi
fi

# Get all crashed members and check if they are in the last view
# rejoined_crashed_members --> all members crashed and rejoined the cluster
# remaining_crashed_members --> all members remain crashed
FILTER="received new view"
pushd $LOG_DIR > /dev/null 2>&1
__crashed_members=$(grep "$FILTER" $LOCATOR_FILES |grep crashed: | sed -e 's/^.*crashed: //' -e 's/\[//'  -e 's/\]//' | tail -n 1 | sed -e 's/,/ /g')
popd > /dev/null 2>&1
crashed_members=""
for i in $__crashed_members; do
   member=$(echo $i | sed -e 's/(.*$//')
   crashed_members="$crashed_members $member"
done
crashed_members=$(echo $crashed_members | xargs -n1 | sort -u | xargs)

timestamp_search=$(echo $last_view_timestamp | sed 's/\//\\\//g')
cat $TMP_FILE1 | grep -A 100 "$last_view_timestamp" | sed -n "/$timestamp_search/,/weight:/p" > $TMP_FILE2
rejoined_crashed_members=""
remaining_crashed_members=""
rejoined_crashed_member_count=0
remaining_crashed_member_count=0
if [ "$(cat $TMP_FILE2 | grep crashed:)" == "" ]; then
   for i in $crashed_members; do 
      if [ "$(cat $TMP_FILE2 | grep $i)" != "" ]; then
         let rejoined_crashed_member_count=rejoined_crashed_member_count+1
         rejoined_crashed_members="$rejoined_crashed_members $i"
      else
         let remaining_crashed_member_count=remaining_crashed_member_count+1
         remaining_crashed_members="$remaining_crashed_members $i"
      fi
   done
fi
rejoined_crashed_members=$(echo $rejoined_crashed_members | xargs -n1 | sort -u | xargs)
remaining_crashed_members=$(echo $remaining_crashed_members | xargs -n1 | sort -u | xargs)

echo ""
if [ "$crashed_members" ]; then
   echo "  diagnosis: Member(s) crashed before the last view are $crashed_members"
fi
if [ "$rejoined_crashed_members" != "" ]; then
   echo "  diagnosis: Member(s) rejoined after all crashes are $rejoined_crashed_members"
fi
if [ "$remaining_crashed_members" != "" ]; then
   echo "  diagnosis: Member(s) still remain crashed are $remaining_crashed_members"
fi

# Find all locators logged
cat $TMP_FILE1 | grep "  .*locator" | sed -e 's/^.* //' -e 's/(.*$//' -e 's/ .*$//' > $TMP_FILE2
all_locators=""
while IFS= read -r line; do
   if [[ "$all_locators" != *"$line"* ]]; then
      if [ "$all_locators" == "" ];then
         all_locators=$line
      else
         all_locators="$all_locators $line"
      fi
   fi
done < "$TMP_FILE2"
unset IFS

echo ""
if [ "$is_membership_failure" == "true" ] && [ "$last_restarted_timestamp" == "" ]; then
   successful_locators=""
   failed_locators=""
   if [ "$DIAG_ARG" == "gfsh" ]; then
      for locator in $all_locators; do
         locator_endpoint=$locator[$LOCATOR_PORT]
         echo "Connecting to locator via gfsh $locator_endpoint..."
         gfsh -e "connect --locator=$locator_endpoint" > $TMP_FILE2
         if [ "$(cat $TMP_FILE2 | grep -i success)" != "" ]; then
            echo "  diagnosis: $locator_endpoint connection successful"
            if [ "$successful_locators" == "" ]; then
               successful_locators="$locator_endpoint"
            else
               successful_locators="$successful_locators $locator_endpoint"
            fi
         else
            if [ "$failed_locators" == "" ]; then
               failed_locators="$locator_endpoint"
            else
               failed_locators="$failed_locators $locator_endpoint"
            fi
            echo -e "  diagnosis: $locator_endpoint ${CError}connection failed${CNone}"
         fi
         echo ""
      done
   fi

   type="inconclusive"
   if [ "$successful_locators" == "" ] || [ "$DIAG_ARG" == "false" ]; then
      diffs=$(t_show_quorum_check -no-color -timestamp $TIMESTAMP | grep "weight sum diff:" | sed 's/^.*weight sum diff: //' | uniq)
      members=$(t_show_quorum_check -no-color -timestamp $TIMESTAMP | grep "members from last contact:" | sed 's/^.*members from last contact: //' | uniq)
      weights=$(t_show_quorum_check -no-color -timestamp $TIMESTAMP | grep "weight sum in cluster:" | sed 's/^.*weight sum in cluster: //' | uniq)

      if [ "$diffs" != "" ]; then
         #
         # --------- Type 3 ----------
         # --------- Type 4 ----------
         #
         for diff in $diffs; do
            if [ $diff -lt 0 ]; then
               for weight in $weights; do
                  case $weight in  
                  3|6|9|12)
                     type="4"
                     ;;
                  *)
                     type="3"
                     ;;
                  esac
                  break;
               done
            fi
         done
      fi
   fi
   if [ "$type" == "inconclusive" ]; then
      echo ""
      echo "  diagnosis: Network partition wait in progress."
      echo "             If 'enable-network-partition-detection=true' (default) then"
      echo "             the cluster may auto-restart."
      echo ""
   fi
   echo ""
   echo -e "       type: ${CError}$type${CNone}"
   echo ""
   show_recovery $type
   cleanExit "$EXECUTABLE_LIST" "$TIMESTAMP" "true"
fi

FILTER1="coordinator"
FILTER2="these members failed to respond to the view change"

if [ "$last_restarted_timestamp" != "" ]; then

   # Determine the weight history
   weights="$(cat $TMP_FILE1 | grep 'weight:' | sed 's/^.*weight: //')"
   # Flatten to string
   weights2=""
   for weight in $weights; do 
     if [ "$weights2" == "" ]; then
         weights2="$weight"
      else
         weights2="$weights2 $weight"
      fi
   done
   weights=$weights2
   total=0
   for i in $weights; do
      let total=total+1
   done
   
   echo "  diagnosis: There were a total of $total view changes recorded by all locators."

   # Determin max_weight (largest weight)
   log_file_counts=""
   for i in $log_files; do
      log_file_counts="$log_file_counts $(grep $i $TMP_FILE1 | wc -l)"
   done
   last_weights=""
   for log_file_count in $log_file_counts; do
       log_file_weights=""
       max_weight=0
       count=0
       weights3=""
       for weight in $weights2; do
          if [ "$weights3" == "" ]; then
             weights3="$weight"
          else
             weights3="$weights3 $weight"
          fi
          let count=count+1 
          log_file_weights="$log_file_weights $weight"
          if [ $count -lt $log_file_count ]; then
             if [ $max_weight -lt $weight ]; then
                max_weight=$weight
             fi
          else
             if [ "last_weights" == "" ]; then
                last_weights="$weight"
             else
                last_weights="$last_weights $weight"
             fi
             break;
          fi
       done
       weights2=$(echo "$weights2" | sed "s/$weights3//")
   done

   # Determine locators and coordinator
   echo ""
   view_locators=""
   coordinator_addr=""
   declare -A coordinator_addr_array
   declare -A weight_array
   index=0
   for i in $log_files; do
      first_line=$(cat $TMP_FILE1 | grep "$i" | tail -n 1)
      log_file=$(echo $first_line | grep '.log' | sed 's/.log:.*$/.log/')
      timestamp=$(echo $first_line | sed 's/^.*: //')
      first_line=$(echo $first_line | sed -e 's/\//\\\//g' -e 's/\[/\\\[/g')
      cat $TMP_FILE1 | sed -n -e "/$first_line/,/^$/p" > $TMP_FILE2

      count=0
      line_count=0
      weight_sum=0
      weight_sums=""
      while IFS= read -r line; do
         let line_count=line_count+1
         case $line_count in
         1)
           ;;
         2)
            coordinator=$(echo $line | grep $FILTER1 | sed 's/^.*: //')
            if [ "$coordinator" == "" ]; then
               coordinator=$(echo $line |grep "$FILTER2" | sed "s/^.*$FILTER2/Failed members/")
               coordinator_addr_array[$index]="failed"
            else
               coordinator_addr=$(echo $coordinator | sed 's/(.*$//')
               coordinator_addr_array[$index]=$coordinator_addr
            fi
            ;;
         *)
            let count=count+1
            weight=$(echo $line | grep weight: | sed 's/^.*weight: //');
            if [ "$weight" == "" ]; then
               addr=$(echo $line | sed 's/^.* //')
               addr=$(echo $addr | sed 's/(.*$//')
               if [ "$(echo $line | grep locator)" != "" ]; then
                  member_type="locator"
                  let weight_sum=weight_sum+3
                  if [[ "$view_locators" != *"$addr"* ]]; then
                     if [ "$view_locators" == "" ]; then
                       view_locators=$addr
                     else
                        view_locators="$view_locators $addr"
                     fi
                  fi
               elif [ "$(echo $line | grep lead)" != "" ]; then
                  member_type="lead"
               else
                  member_type="member"
               fi
            else
               weight_sum=$weight
            fi
            ;;
         esac
      done < "$TMP_FILE2"
      unset IFS
      weight_sums="$weight_sums $weight_sum"
      if [ "$coordinator" != "Failed members" ]; then
         last_weight_sum=$weight_sum
      fi
      weight_array[$index]=$weight_sum
      let index=index+1

      let diff=weight_sum-max_weight
      echo "  timestamp: $timestamp"
      echo "   log_file: $log_file"
      echo "coordinator: $coordinator"
      echo "     weight: $weight_sum"
      echo " max weight: $max_weight"
      echo "weight diff: $diff"
      if [ $weight_sum -eq $max_weight ]; then
         echo "  diagnosis: Cluster weight sum same as max weight sum"
      elif [ $weight_sum -lt $max_weight ]; then
         echo "  diagnosis: Cluster weight sum reduced [$diff]"
      else
         echo "  diagnosis: Cluster weight sum increased [$diff]"
      fi
      echo ""
   done

   # NOTE: view_locators and all_locators should be same
   sb_locators=""
   for i in $all_locators; do
      found="false"
      for j in $view_locators; do
         if [ "$i" == "$j" ]; then
            found="true"
            break;
         fi
      done
      if [ "$found" != "true" ]; then
         if [ "$sb_locators" == "" ]; then
            sb_locators=$i
         else
            sb_locators="$sb_locators $i"
         fi
      fi
   done

   echo ""
   echo "  diagnosis: Locators found in views $view_locators"
   echo ""
   echo "Testing cluster connnection with locators found in views..."
   echo ""
   successful_locators=""
   failed_locators=""
   if [ "$DIAG_ARG" == "gfsh" ]; then
      for locator in $view_locators; do
        locator_endpoint=$locator[$LOCATOR_PORT]
        gfsh -e "connect --locator=$locator_endpoint" > $TMP_FILE2
        if [ "$(cat $TMP_FILE2 | grep -i success)" != "" ]; then
           echo "  diagnosis: $locator_endpoint connection successful"
           if [ "$successful_locators" == "" ]; then
              successful_locators="$locator_endpoint"
           else
              successful_locators="$successful_locators $locator_endpoint"
           fi
        else
           if [ "$failed_locators" == "" ]; then
              failed_locators="$locator_endpoint"
           else
              failed_locators="$failed_locators $locator_endpoint"
           fi
           echo "  diagnosis: $locator_endpoint connection failed"
           cat $TMP_FILE2 
        fi
      done

      echo ""
      if [ "$successful_locators" == "" ]; then
         echo "  reachable locators: none"
      else
         echo "  reachable locators: $successful_locators"
      fi
      if [ "$failed_locators" == "" ]; then
         echo "unreachable locators: none"
      else
         echo "unreachable locators: $failed_locators"
      fi
   fi

   if [ "$successful_locators" != "" ] || [ "$DIAG_ARG" == "true" ]; then
      prev_coordinator_addr=""
      coordinator_addr_list=${coordinator_addr_array[@]}
      coordinator_addr_list=$(unique_words "$coordinator_addr_list")
      coordinator_count=0
      for i in $coordinator_addr_list; do 
         echo "coordinator: $i"
         let coordinator_count=coordinator_count+1
      done
      if [ $coordinator_count -gt 1 ]; then
         echo -e "  diagnosis: Multiple active coordinators found [${CError}split-brain${CNone}]"

         type="2"
         echo ""
         echo -e "       type: ${CError}$type${CNone}"
         echo ""
         show_recovery $type
         cleanExit "$EXECUTABLE_LIST" "$TIMESTAMP" "true"
      fi

      prev_weight=0
      is_weights_differ="false"
      for i in ${!weight_array[@]}; do
         if [ $i -gt 0 ]; then
            if [ $prev_weight -ne ${weight_array[$i]} ]; then
               is_weights_differ="true"
            fi
         fi 
         prev_weight=${weight_array[$i]}
      done

      echo ""
      echo "Checking missing disk stores..."
      echo ""
      last_stuck_thread_timestamp=$(t_show_stuck_threads -no-color -timestamp $TIMESTAMP | grep "last stuck:" | sed 's/^.*last stuck: //')
      last_stuck_thread_in_seconds=$(get_time_in_seconds $last_stuck_thread_timestamp)
      last_reply_thread_timestamp=$(t_show_stuck_threads -no-color -timestamp $TIMESTAMP | grep "last reply:" | sed 's/^.*last reply: //')
      last_reply_thread_in_seconds=$(get_time_in_seconds $last_reply_thread_timestamp)

      if [ "$last_stuck_thread_timestamp" == "" ] || [ "$last_reply_thread_timestamp" != "" ]; then
         #
         # --------- Type 1 ----------
         # --------- Type 2 ----------
         #
 
         # no stuck threads
         if [ "$(t_show_missing_disk_stores -no-color -timestamp $TIMESTAMP | grep offline)" != "" ]; then
            # missing disk stores found
            last_missing_disk_store_timestamp=$(t_show_missing_disk_stores -timestamp $TIMESTAMP | grep "^$TTee" | sed "s/$TTee //" | sort -u | tail -n 1)
            last_missing_disk_store_time_in_seconds=$(get_time_in_seconds $last_missing_disk_store_timestamp)
            if [ $last_missing_disk_store_time_in_seconds -gt $last_view_time_in_seconds ]; then
               is_missing_disk_stores_newer="true"
            else
               is_missing_disk_stores_newer="false"
            fi
            if [ "$is_missing_disk_stores_newer" == "true" ] && ([ "$remaining_crashed_members" != "" ] ||  [ $last_restarted_in_seconds -gt $last_view_time_in_seconds ]); then
               echo "  diagnosis: Missing disk stores found"
               if [ "$is_weights_differ" != "true" ] && [ "$sb_locators" == "" ]; then
                  type="1"
               else
                  type="2"
               fi
               echo ""
               echo -e "       type: ${CError}$type${CNone}"
               echo ""
               show_recovery $type
               cleanExit "$EXECUTABLE_LIST" "$TIMESTAMP" "true"
            else
               echo "  diagnosis: Missing disk stores found but they are older than the last view and there are no crashed members reported since."
            fi
         else
            # check data loss
            type="1 or normal"
            echo "  diagnosis: Using gfsh check data loss. If data loss then, Type 1; otherwise, normal." 
            echo ""
            echo -e "       type: ${CGo}normal${CNone} or ${CError}1${CNone}"
            echo ""
            show_recovery "1"
            cleanExit "$EXECUTABLE_LIST" "$TIMESTAMP" "true"
         fi
      else
         #
         # --------- Type 5 ----------
         #
         if [ "$remaining_crashed_members" != "" ]; then
            type="5"
            echo ""
            echo -e "       type: ${CError}$type${CNone}"
            echo ""
            show_recovery $type
            cleanExit "$EXECUTABLE_LIST" "$TIMESTAMP" "true"
         fi
      fi
   else
      for i in ${!coordinator_addr_array[@]}; do
         echo "coordinator: ${coordinator_addr_array[$i]}"
      done

      if [ "$(t_show_missing_disk_stores -no-color -timestamp $TIMESTAMP | grep offline)" != "" ]; then
         #
         # --------- Type 2 ----------
         #

         type="2"
         echo ""
         echo -e "       type: ${CError}$type${CNone}"
         echo ""
         show_recovery $type
         cleanExit "$EXECUTABLE_LIST" "$TIMESTAMP" "true"
      else
        echo ""
        echo "  diagnosis: Check locator log files for 'quorum check'. If 'quorum check' repeatedly fails then Type 3, otherwise Type 4."
        echo ""
         type="4 or 5"
         echo ""
         echo -e "       type: ${CError}$type${CNone}"
         echo ""
         show_recovery $type
         cleanExit "$EXECUTABLE_LIST" "$TIMESTAMP" "true"
      fi
   fi
fi

echo ""
echo "Checking stuck threads..."
echo ""
last_stuck_thread_timestamp=$(t_show_stuck_threads -no-color -timestamp $TIMESTAMP | grep "last stuck:" | sed 's/^.*last stuck: //')
last_stuck_thread_in_seconds=$(get_time_in_seconds $last_stuck_thread_timestamp)
last_reply_thread_timestamp=$(t_show_stuck_threads -no-color -timestamp $TIMESTAMP | grep "last reply:" | sed 's/^.*last reply: //')
last_reply_thread_in_seconds=$(get_time_in_seconds $last_reply_thread_timestamp)
if [ "$last_stuck_thread_timestamp" != "" ]; then
   echo "       last stuck thread time: $last_stuck_thread_timestamp"
   echo " last stuck thread reply time: $last_reply_thread_timestamp"
   echo ""
   if [ $last_stuck_thread_in_seconds -gt $last_view_time_in_seconds ]; then
      echo "  diagnosis: Stuck thread(s) found after the last view"
   else
      echo "  diagnosis: Stuck thread(s) found before the last view"
   fi
   if [ $last_reply_thread_in_seconds -gt $last_view_time_in_seconds ]; then
      echo "  diagnosis: Last stuck thread reply found after the last view"
   else
      echo "  diagnosis: Last stuck thread reply found before the last view"
   fi
else
   echo "  diagnosis: No stuck threads found"
fi

echo ""
echo "Checking suspects..."
echo ""
pushd $LOG_DIR > /dev/null 2>&1
grep suspect $ALL_FILES  | grep "received suspect" > $TMP_FILE1
popd > /dev/null 2>&1
suspect_log_files="$(cat $TMP_FILE1 | grep .log: | sed 's/:.*$//' | uniq)"
last_suspect_log_file=""
last_suspect_timestamp=""
last_suspect_time_in_seconds=0
is_suspect="false"
for suspect_log_file in $suspect_log_files; do
   last_line=$(cat $TMP_FILE1 | grep $suspect_log_file | tail -n 1)
   timestamp=$(echo $last_line | sed -e "s/$log_file://" -e 's/^.*info //' -e "s/$CLUSTER.*$//"  -e 's/info.*//i')
   time_in_seconds=$(get_time_in_seconds $timestamp)
   if [ $time_in_seconds -gt $last_suspect_time_in_seconds ]; then 
      last_suspect_log_file=$suspect_log_file
      last_suspect_timestamp=$timestamp
      last_suspect_time_in_seconds=$time_in_seconds
      is_suspect="true"
   fi
done

if [ "$is_suspect" == "true" ]; then
   echo "  diagnosis: Last suspect recorded in $last_suspect_log_file"
   echo "  diagnosis: Last suspect recorded at $last_suspect_timestamp"
   echo "  diagnosis: Last view recorded at    $last_view_timestamp"
   if [ $last_suspect_time_in_seconds -gt $last_view_time_in_seconds ]; then
      is_suspect="true"
      echo "  diagnosis: Suspects found"
      type="inconclusive"
   else
      if [ "$remaining_crashed_members" != "" ]; then
         is_suspect="true"
         type="inconclusive"
      else
         is_suspect="false"
         echo "  diagnosis: Last suspect recorded is older than the last view ${last_view_timestamp}"
         echo "  diagnosis: Members are all present in the cluster and accounted for"
      fi
   fi
else
   echo "  diagnosis: No suspects found"
fi

if [ "$last_stuck_thread_timestamp" != "" ] || [ "$is_suspect" == "true" ]; then
   if [ "$remaining_crashed_members" != "" ]; then
      type="5"
   elif [ $last_stuck_thread_in_seconds -gt $last_view_time_in_seconds ]; then
      if [ $last_reply_thread_in_seconds -lt $last_view_time_in_seconds ]; then
         type="5"
      fi
   else
      type="inconclusive"
   fi
   if [ "$type" == "5" ]; then
      echo ""
      echo -e "       type: ${CError}$type${CNone}"
      echo ""
      show_recovery $type
      cleanExit "$EXECUTABLE_LIST" "$TIMESTAMP" "true"
   fi
fi

echo ""
echo -e "       type: ${CGo}$type${CNone}"
echo ""
show_recovery $type

cleanExit "$EXECUTABLE_LIST" "$TIMESTAMP" "true"

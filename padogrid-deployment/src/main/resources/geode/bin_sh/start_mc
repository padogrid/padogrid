#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020-2024 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-cluster -simulate -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Start GemFire Management Console in the specified cluster

SYNOPSIS
   $EXECUTABLE [-cluster cluster_name] [-?]

DESCRIPTION
   Starts GemFire Managment Console.

OPTIONS
   -cluster cluster_name
             Cluster name.
   -simulate
             Specify this option to display GemFire Management Console startup details
             without actually running it.

EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
DEFAULT
   $EXECUTABLE -cluster $CLUSTER

EOF
fi
cat <<EOF
SEE ALSO
EOF
   printSeeAlsoList "*mc*" $EXECUTABLE
   exit
fi


# Source in GemFire specific env
if [ -f $PADOGRID_WORKSPACES_HOME/.geodeenv.sh ]; then
   . $PADOGRID_WORKSPACES_HOME/.geodeenv.sh
fi

# Set -simulate if specified
if [ "$SIMULATE" == "true" ]; then
   SIMULATE_OPT="-simulate"
else
   SIMULATE_OPT=""
fi

#
# VM cluster
#
THIS_HOST_NAME=`hostname`
if [ "$REMOTE_SPECIFIED" == "false" ]; then
   VM_ENABLED=`getClusterProperty "vm.enabled" "false"`
   if [ "$VM_ENABLED" == "true" ] && [ "$THIS_HOST_NAME" != "$DEFAULT_MC_HOST" ]; then
      VM_HOST=`getClusterProperty "mc.host" $DEFAULT_MC_HOST`
      if [ "$VM_HOST" == "" ]; then
         echo "----------------------------------------------------------------"
         echo "WORKSPACE: $PADOGRID_WORKSPACE"
         echo "    ERROR: VM Management Console host undefined. Set 'mc.hosts' in the following cluster.properties file."  
         echo "           $ETC_DIR/cluster.properties"
         echo "           Command aborted."
         echo "----------------------------------------------------------------"
         exit 1
      fi

      # If pod cluster, then source in the pod env vars to set the VM specific variables
      OS_ENV=`getOsEnv`
      if [ "$OS_ENV" == "gh" ] && [ "$POD" != "local" ]; then
         if [ -f "$PODS_DIR/$POD/.nodeenv.sh" ]; then
            . "$PODS_DIR/$POD/.nodeenv.sh"
         fi
      fi

      VM_USER=`getVmUser`
      VM_KEY=`getVmKeyArg`

      # For Vagrant VMs, run local if '.local' is suffix
      if [ "$VM_HOST" != "${THIS_HOST_NAME}.local" ] ;  then
         if [ "$(isVmPrivateHostReachable "$VM_USER" "$VM_KEY")" == "true" ]; then
            # If private hosts are reachable then execute from here.
            ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$COMMAND_PREFIX $VM_PADOGRID_HOME/geode/bin_sh/start_mc $SIMULATE_OPT -remote $VM_HOST -workspace $VM_PADOGRID_WORKSPACE -cluster $CLUSTER $@"
         else
            # If private hosts are not reachable then use a public host as a proxy to execute this command.
            #RWE_NAME=$(basename $PADOGRID_WORKSPACES_HOME)
            #WORKSPACE=$(basename $PADOGRID_WORKSPACE)
            RWE_NAME=$(basename $VM_PADOGRID_WORKSPACES_HOME)
            WORKSPACE=$(basename $VM_PADOGRID_WORKSPACE)

            VM_PUBLIC_HOSTS=`getClusterProperty "vm.public.hosts"`
            # Replace , with space
            __VM_HOSTS=$(echo "$VM_PUBLIC_HOSTS" | sed "s/,/ /g")
            for VM_HOST in $__VM_HOSTS; do
               ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "switch_rwe $RWE_NAME/$WORKSPACE && $COMMAND_PREFIX $VM_PADOGRID_HOME/$PRODUCT/bin_sh/$EXECUTABLE -cluster $CLUSTER $@"
               break;
            done
         fi
         exit
      fi
   fi
fi

# Make sure Management Center is installed
MC_HOME="$GEMFIRE_MC_HOME"
MC_ENV_NAME="GEMFIRE_MC_HOME"
if [ ! -d "$MC_HOME" ]; then
   echo >&2 "----------------------------------------------------------------"
   echo >&2 "WORKSPACE: $PADOGRID_WORKSPACE"
   echo >&2 "    ERROR: The following Management Console home directory does not exist."
   echo >&2 "              [$MC_HOME]"
   echo >&2 "           Please install Management Console. For a local cluster, use"
   echo >&2 "           'update_padogrid', for a VM cluster, use 'vm_install' to set"
   echo >&2 "           GEMFIRE_MC_HOME in the following workspace setenv.sh file."
   echo >&2 "           "
   echo -e >&2 "              ${CHighlight}$PADOGRID_WORKSPACE/setenv.sh${CNone}"
   echo >&2 "           "
   echo >&2 "           Note that GemFire Management Console is distributed as a single jar file."
   echo >&2 "           You will need to place the jar file in the directory that has the same name"
   echo >&2 "           without the '.jar' suffix. For example, the directory, 'gemfire-management-console',"
   echo >&2 "           must contain the fiie, 'gemfire-management-console-1.3.0.jar'."
   echo >&2 "           "
   echo >&2 "           Command aborted."
   echo >&2 "----------------------------------------------------------------"
   exit 1
fi

# Determine the node host name for URL
POD=`getClusterProperty "pod.name" "local"`
NODE_NAME_PREFIX=`getPodProperty "node.name.prefix" $NODE_NAME_PREFIX`
if [ "$POD" == "local" ]; then
   NODE=`hostname`
else
   NODE="`hostname`.local"
fi

# MC_VERSION: Determine the GemFire Management Console version
JAR_FILE_PREFIX="gemfire-management-console-"
LIB_EXTENSION=""
pushd $MC_HOME/ > /dev/null 2>&1 
for file in ${JAR_FILE_PREFIX}*; do
   file=${file#*$JAR_FILE_PREFIX}
   if [[ $file == *.jar ]]; then
      MC_VERSION=${file%.jar}
      LIB_EXTENSION=".jar"
   fi
done
popd > /dev/null 2>&1 
MC_DIR_NAME="$JAR_FILE_PREFIX"
JAR_NAME="$JAR_FILE_PREFIX$MC_VERSION.jar"
APPLICATION_PROPERTIES_FILE="application.properties"

MC_HTTP_PORT=`getClusterProperty "mc.http.port" $DEFAULT_MC_HTTP_PORT`
MC_HTTPS_PORT=`getClusterProperty "mc.https.port" $DEFAULT_MC_HTTPS_PORT`
MC_HTTPS_ENABLED=`getClusterProperty "mc.https.enabled" "false"`
MC_JMX_PORT=`getClusterProperty "mc.jmx.port" $DEFAULT_MC_JMX_PORT`
MC_JMX_RMI_PORT=`getClusterProperty "mc.jmx.rmi.port" $DEFAULT_MC_JMX_RMI_PORT`
if [ "$MC_HTTPS_ENABLED" == "true" ]; then
   MC_NAME=${CLUSTER}-mc-${MC_HTTPS_PORT}
else
   MC_NAME=${CLUSTER}-mc-${MC_HTTP_PORT}
fi
WORKING_DIR=$RUN_DIR/$MC_NAME
export LOG_FILE=$LOG_DIR/${MC_NAME}.log

if [ ! -d "$WORKING_DIR" ]; then
   mkdir -p "$WORKING_DIR"
fi
if [ ! -f "$WORKING_DIR/$JAR_NAME" ]; then
   cp "$MC_HOME/$JAR_NAME" "$WORKING_DIR/"
fi
# Place the default application.properties file in the working directory
if [ ! -f "$WORKING_DIR/$APPLICATION_PROPERTIES_FILE" ]; then
   cp "$ETC_DIR/gmc-$APPLICATION_PROPERTIES_FILE" "$WORKING_DIR/$APPLICATION_PROPERTIES_FILE"
fi

if [ ! -d "$LOG_DIR" ]; then
   mkdir -p "$LOG_DIR"
fi

# If the management console is already running, then exit.
if [ "$SIMULATE" == "false" ]; then
   PID=`getMcPid $MC_NAME $WORKSPACE $RWE`
   if [ -n "${PID}" ]; then
      echo "----------------------------------------------------------------"
      echo "WORKSPACE: $PADOGRID_WORKSPACE"
      echo "  Cluster: $CLUSTER"
      echo "   Status: This GemFire Management Console for this cluster is already running PID=[$PID]. Command aborted."
      echo "----------------------------------------------------------------"
      exit 1
   fi
fi

if [[ ${OS_NAME} == CYGWIN* ]]; then
   export LOG_FILE="$(cygpath -wp "$LOG_FILE")"
   CLASSPATH="$(cygpath -wp "$CLASSPATH")"
   WORKING_DIR="$(cygpath -wp "$WORKING_DIR")"
   GFMC_CONFIG_FILE="$(cygpath -wp "$GFMC_CONFIG_FILE")"
fi

JAVA_OPTS="-Dexecutable.name=$EXECUTABLE"
JAVA_OPTS="$JAVA_OPTS -Dpadogrid.gemfire.mc.name=$MC_NAME -Dpadogrid.workspace=$WORKSPACE -Dpadogrid.rwe=$RWE"
JAVA_OPTS="$JAVA_OPTS --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED"

if [ "$MC_HTTPS_ENABLED" == "true" ]; then
    MC_HTTP_PORT=$MC_HTTPS_PORT
fi
ARGS="--server.port=$MC_HTTP_PORT"
if [ "$SIMULATE" != "true" ]; then
   pushd "$WORKING_DIR/" > /dev/null 2>&1 
   "$JAVA" $JAVA_OPTS -jar gemfire-management-console-1.3.0.jar $ARGS > $LOG_FILE 2>&1 &
   popd > /dev/null 2>&1 
fi
if [ "$SIMULATE" == "true" ]; then
   PID="Simulated"
else
   PID=$!
fi

echo "----------------------------------------------------------------"
echo "         WORKSPACE: $PADOGRID_WORKSPACE"
echo "              Name: $MC_NAME"
echo "           Cluster: $CLUSTER"
echo "Management Console: gemfire-manconsole"
if [ "$MC_HTTPS_ENABLED" == "false" ]; then
echo "               URL: http://${NODE}:${MC_HTTP_PORT}"
else
echo "               URL: https://${NODE}:${MC_HTTPS_PORT}"
fi
echo "              PID: $PID"
echo "      WORKING_DIR: $WORKING_DIR"
if [ "$MC_HTTPS_ENABLED" == "false" ]; then
echo "        HTTP_PORT: $MC_HTTP_PORT"
else
echo "       HTTPS_PORT: $MC_HTTPS_PORT"
fi
echo "         JMX_PORT: $MC_JMX_PORT"
echo "          LOG_DIR: $LOG_DIR"
echo "         LOG_FILE: $LOG_FILE"
echo "             JAVA: $JAVA"
echo "        JAVA_OPTS: $JAVA_OPTS"
echo "        Arguments: $ARGS"
echo "      Config File: $WORKING_DIR/$APPLICATION_PROPERTIES_FILE"
echo "----------------------------------------------------------------"

if [ "$SIMULATE" == "true" ]; then
   echo ""
   echo "JAVA_OPTS"
   echo "---------"
   printJavaOpts "$JAVA_OPTS"
   echo ""
   echo "Environment Variable(s)"
   echo "-----------------------"
   echo "LOG_FILE=$LOG_FILE"
   echo ""
fi

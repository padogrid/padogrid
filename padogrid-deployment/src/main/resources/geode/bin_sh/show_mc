#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020-2024 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-cluster -short -long -all -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Display the status of Management Console in the specified cluster in the current workspace

SYNOPSIS
   $EXECUTABLE [-cluster cluster_name] [-short|-long] [-all] [-?]

DESCRIPTION
   Displays Management Console status.

OPTIONS
   -cluster cluster_name
             Cluster name. If unspecified, then displays the current context cluster's management console.

   -short
             Displays running status only.

   -long
             Displays detailed information.

   -all
             Displays all management consoles in the current workspace clusters

EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
DEFAULT
   $EXECUTABLE -cluster $CLUSTER

FILES
   $CLUSTER_DIR/etc/cluster.properties
             The current cluster configuration file.

   $LOG_DIR
             The current cluster log directory.

EOF
fi
cat <<EOF
SEE ALSO
EOF
   printSeeAlsoList "*mc*" $EXECUTABLE
   exit
fi

# Displays short status of a management console.
function displayMcShort()
{
   # Determine the node host name for URL
   NODE_NAME_PREFIX=`getPodProperty "node.name.prefix" $NODE_NAME_PREFIX`
   NODE=`getOsNodeName`

   MC_HOST=`getClusterProperty "mc.host" $DEFAULT_MC_HOST`
   MC_HTTP_PORT=`getClusterProperty "mc.http.port" $DEFAULT_MC_HTTP_PORT`
   MC_HTTPS_PORT=`getClusterProperty "mc.https.port" $DEFAULT_MC_HTTPS_PORT`
   MC_HTTPS_ENABLED=`getClusterProperty "mc.https.enabled" $DEFAULT_MC_HTTPS_ENABLED`
   if [ "$MC_HOST" == "" ]; then
      MC_URL=""
   else
      if [ "$MC_HTTPS_ENABLED" == "false" ]; then
         MC_URL="http://${MC_HOST}:${MC_HTTP_PORT}"
      else
         MC_URL="https://${MC_HOST}:${MC_HTTPS_PORT}"
      fi
   fi
   MC_JMX_PORT=`getClusterProperty "mc.jmx.port" $DEFAULT_MC_JMX_PORT`
   if [ "$MC_HTTPS_ENABLED" == "true" ]; then
      MC_NAME=${CLUSTER}-mc-${MC_HTTPS_PORT}
   else
      MC_NAME=${CLUSTER}-mc-${MC_HTTP_PORT}
   fi
   WORKING_DIR=$RUN_DIR/$MC_NAME
   LOG_FILE=$LOG_DIR/${CLUSTER}-mc-${MC_HTTP_PORT}.log
   PID=`getMcPid $MC_NAME $WORKSPACE $RWE`

   echo "    CLUSTER: $CLUSTER"
   if [ "$SHORT" == "false" ]; then
   echo "CLUSTER_DIR: $PADOGRID_WORKSPACE/clusters/$CLUSTER"
   echo "       Name: $MC_NAME"
   fi
   if [ "$PID" == "" ]; then
   echo -e "      STATE: ${CLightRed}Down${CNone}"
   if [ "$SHORT" == "false" ]; then
   echo "        PID: N/A"
   fi
   else
   echo -e "      STATE: ${CLightGreen}Running${CNone}"
   if [ "$SHORT" == "false" ]; then
   echo "        PID: $PID"
   fi
   fi
   if [ "$SHORT" == "false" ]; then
   if [ "$VM_ENABLED" == "true" ]; then
   echo " Deployment: VM"
   fi
   echo -e "        URL: $CUrl$MC_URL$CNone"
   fi
}

# Displays long status of a management console.
function displayMcLong()
{
   # Determine the node host name for URL
   NODE_NAME_PREFIX=`getPodProperty "node.name.prefix" $NODE_NAME_PREFIX`
   NODE=`getOsNodeName`

   MC_HOST=`getClusterProperty "mc.host" $DEFAULT_MC_HOST`
   MC_HTTP_PORT=`getClusterProperty "mc.http.port" $DEFAULT_MC_HTTP_PORT`
   MC_HTTPS_PORT=`getClusterProperty "mc.https.port" $DEFAULT_MC_HTTPS_PORT`
   MC_HTTPS_ENABLED=`getClusterProperty "mc.https.enabled" $DEFAULT_MC_HTTPS_ENABLED`
   if [ "$MC_HTTPS_ENABLED" == "false" ]; then
      MC_URL="http://${MC_HOST}:${MC_HTTP_PORT}"
   else
      MC_URL="https://${MC_HOST}:${MC_HTTPS_PORT}"
   fi
   MC_JMX_PORT=`getClusterProperty "mc.jmx.port" $DEFAULT_MC_JMX_PORT`
   MC_JMX_URL="service:jmx:rmi:///jndi/rmi://${MC_HOST}:${MC_JMX_PORT}/jmxrmi"
   if [ "$MC_HTTPS_ENABLED" == "true" ]; then
      MC_NAME=${CLUSTER}-mc-${MC_HTTPS_PORT}
   else
      MC_NAME=${CLUSTER}-mc-${MC_HTTP_PORT}
   fi
   WORKING_DIR=$RUN_DIR/$MC_NAME
   LOG_FILE=$LOG_DIR/${CLUSTER}-mc-${MC_HTTP_PORT}.log
   PID=`getMcPid $MC_NAME $WORKSPACE $RWE`

   echo "----------------------------------------------------------------"
   echo "  WORKSPACE: $PADOGRID_WORKSPACE"
   echo "       Name: $MC_NAME"
   if [ "$PID" == "" ]; then
   echo -e "      STATE: ${CLightRed}Down${CNone}"
   echo "        PID: N/A"
   else
   echo -e "      STATE: ${CLightGreen}Running${CNone}"
   echo "        PID: $PID"
   fi
   echo "    Cluster: $CLUSTER"
   echo "Man Console: gemfire-manconsole"
   echo -e "        URL: $CUrl$MC_URL$CNone"
   echo "    JMX_URL: $MC_JMX_URL"
   echo "WORKING_DIR: $WORKING_DIR"
   if [ "$MC_HTTPS_ENABLED" == "true" ]; then
   echo " HTTPS_PORT: $MC_HTTPS_PORT"
   else
   echo "  HTTP_PORT: $MC_HTTP_PORT"
   fi
   echo "   JMX_PORT: $MC_JMX_PORT"
   echo "    LOG_DIR: $LOG_DIR"
   echo "   LOG_FILE: $LOG_FILE"
   echo "----------------------------------------------------------------"
}

POD=`getClusterProperty "pod.name" "local"`

#
# VM cluster
#
THIS_HOST_NAME=`hostname`
MC_HOST=`getClusterProperty "mc.host" $DEFAULT_MC_HOST`
if [ "$REMOTE_SPECIFIED" == "false" ]; then
   VM_ENABLED=`getClusterProperty "vm.enabled" "false"`
   if [ "$VM_ENABLED" == "true" ] && [ "$THIS_HOST_NAME" != "$DEFAULT_MC_HOST" ]; then
      VM_HOST=`getClusterProperty "mc.host" $DEFAULT_MC_HOST`
      if [ "$VM_HOST" == "" ]; then
         echo "----------------------------------------------------------------"
         echo "WORKSPACE: $PADOGRID_WORKSPACE"
         echo "    ERROR: VM Management Console host undefined. Set 'mc.hosts' in the following cluster.properties file."  
         echo "           $ETC_DIR/cluster.properties"
         echo "           Command aborted."
         echo "----------------------------------------------------------------"
         exit 1
      fi

      # If pod cluster, then source in the pod env vars to set the VM specific variables
      OS_ENV=`getOsEnv`
      if [ "$OS_ENV" == "gh" ] && [ "$POD" != "local" ]; then
         if [ -f "$PODS_DIR/$POD/.nodeenv.sh" ]; then
            . "$PODS_DIR/$POD/.nodeenv.sh"
         fi
      fi

      VM_USER=`getVmUser`
      VM_KEY=`getVmKeyArg`

      # For Vagrant VMs, run local if '.local' is suffix
      if [ "$VM_HOST" != "${THIS_HOST_NAME}.local" ] ;  then
         if [ "$(isVmPrivateHostReachable "$VM_USER" "$VM_KEY")" == "true" ]; then
            # If private hosts are reachable then execute from here.
            ssh -n $VM_KEY $VM_USER@$VM_HOST -o loglevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$COMMAND_PREFIX $VM_PADOGRID_HOME/$PRODUCT/bin_sh/show_mc -remote $VM_HOST -workspace $VM_PADOGRID_WORKSPACE -cluster $CLUSTER -product gemfire $@"
         else
            # If private hosts are not reachable then use a public host as a proxy to execute this command.
            #RWE_NAME=$(basename $PADOGRID_WORKSPACES_HOME)
            #WORKSPACE=$(basename $PADOGRID_WORKSPACE)
            RWE_NAME=$(basename $VM_PADOGRID_WORKSPACES_HOME)
            WORKSPACE=$(basename $VM_PADOGRID_WORKSPACE)

            VM_PUBLIC_HOSTS=`getClusterProperty "vm.public.hosts"`
            # Replace , with space
            __VM_HOSTS=$(echo "$VM_PUBLIC_HOSTS" | sed "s/,/ /g")
            for VM_HOST in $__VM_HOSTS; do
               ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "switch_rwe $RWE_NAME/$WORKSPACE && $COMMAND_PREFIX $VM_PADOGRID_HOME/$PRODUCT/bin_sh/$EXECUTABLE -cluster $CLUSTER $@"
               break;
            done
         fi
         exit
      fi
   fi
fi

if [ "$ALL" == "true" ]; then

   # Display all clusters

   pushd $CLUSTERS_DIR > /dev/null 2>&1
   CLUSTERS=""
   COUNT=0
   for i in *; do
      if [ -d "$i" ]; then
         if [ "$(isGeodeCluster $i)" == "true" ]; then
            let COUNT=COUNT+1
            if [ $COUNT -eq 1 ]; then
               CLUSTERS="$i"
            else
               CLUSTERS="$CLUSTERS $i"
            fi
         fi
      fi
   done
   popd > /dev/null 2>&1

   echo "----------------------------------------------------------------"
   echo "GemFire Clusters: $CLUSTERS"
   echo "----------------------------------------------------------------"
   echo ""

   if [ "$LONG" == "false" ]; then 
      # Short display -all
      for CLUSTER in ${CLUSTERS}; do
         displayMcShort
      done
   else
      # Long display -all
      for CLUSTER in ${CLUSTERS}; do
         displayMcLong
      done
   fi

   echo ""
   echo "----------------------------------------------------------------"
   echo "GemFire Clusters: $CLUSTERS"
   echo "----------------------------------------------------------------"

else

   if  [ ! -d $CLUSTER_DIR ]; then
      echo "ERROR: The specified cluster does not exist: [$CLUSTER]. Command aborted."
      exit 1
   fi

   if [ "$LONG" == "false" ]; then
      # Short display (single)
      displayMcShort
   else
      # Long display (single)
      displayMcLong
   fi

fi

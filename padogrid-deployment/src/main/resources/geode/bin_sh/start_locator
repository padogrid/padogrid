#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020-2023 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================
  
SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-cluster -num -simulate -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Start a locator in the specified cluster

SYNOPSIS
   $EXECUTABLE [-cluster cluster_name] [-num locator_number] [-simulate] [-?]

DESCRIPTION
   Starts a locator in the specified cluster.

OPTIONS
   -cluster cluster_name
             Cluster name.

   -num locator_number
             Locator number 1-9.

   -simulate
             If specified then it only displays the locator information
             and does not run the locator.

EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
DEFAULT
   $EXECUTABLE -cluster $CLUSTER -num $LOCATOR_NUM

EOF
fi
cat <<EOF
SEE ALSO
EOF
   printSeeAlsoList "*locator*" $EXECUTABLE
   exit
fi

POD=`getClusterProperty "pod.name" "local"`

# Set -simulate if specified
if [ "$SIMULATE" == "true" ]; then
   SIMULATE_OPT="-simulate"
else
   SIMULATE_OPT=""
fi
# Set -create_script if specified
if [ "$CREATE_SCRIPT" == "true" ]; then
   CREATE_SCRIPT_OPT="-create-script"
else
   CREATE_SCRIPT_OPT=""
fi

#
# VM cluster
#
VM_ENABLED=`getClusterProperty "vm.enabled" "false"`
if [ "$REMOTE_SPECIFIED" == "false" ]; then
   if [ "$VM_ENABLED" == "true" ]; then
      VM_LOCATOR_HOSTS=`getClusterProperty "vm.locator.hosts"`
      if [ "$VM_LOCATOR_HOSTS" == "" ]; then
         echo >&2 "----------------------------------------------------------------"
         echo >&2 "WORKSPACE: $PADOGRID_WORKSPACE"
         echo >&2 "    ERROR: VM locator hosts undefined. Set 'vm.locator.hosts' in the following cluster.properties file."  
         echo >&2 "           $ETC_DIR/cluster.properties"
         echo >&2 "           Command aborted."
         echo >&2 "----------------------------------------------------------------"
         exit 1
      fi

      # If pod cluster, then source in the pod env vars to set the VM specific variables
      OS_ENV=`getOsEnv`
      if [ "$OS_ENV" == "gh" ] && [ "$POD" != "local" ]; then
         if [ -f "$PODS_DIR/$POD/.nodeenv.sh" ]; then
            . "$PODS_DIR/$POD/.nodeenv.sh"
         fi
      fi

      VM_USER=`getVmUser`
      VM_KEY=`getVmKeyArg`
      if [ "$(isVmPrivateHostReachable "$VM_USER" "$VM_KEY")" == "true" ]; then
         # If private hosts are reachable then execute from here.

         # Replace , with space
         __VM_HOSTS=$(echo "$VM_LOCATOR_HOSTS" | sed "s/,/ /g")

         # Determine the host
         __LOCATOR_NUMBER=0
         __FOUND="false"
         
         for VM_HOST in $__VM_HOSTS; do
            let __LOCATOR_NUMBER=__LOCATOR_NUMBER+1
            if [ $__LOCATOR_NUMBER -eq $LOCATOR_NUM_NO_LEADING_ZERO ]; then
               __FOUND="true"
               if [ "$POD" == "local" ]; then
                  NUM=1
               else
                  let NUM=__LOCATOR_NUMBER
               fi
               ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$COMMAND_PREFIX $VM_PADOGRID_HOME/$PRODUCT/bin_sh/start_locator $SIMULATE_OPT $CREATE_SCRIPT_OPT -cluster $CLUSTER -remote $VM_HOST -workspace $VM_PADOGRID_WORKSPACE -num $NUM"
               break;
            fi
         done
         FIRST_NUMBER=1
         LAST_NUMBER=$__LOCATOR_NUMBER
         if [ "$__FOUND" == "false" ]; then
            echo >&2 "ERROR: Invalid locator number. Valid range is [$FIRST_NUMBER, $LAST_NUMBER]. Command aborted." 
         fi
      else
         # If private hosts are not reachable then use a public host as a proxy to execute this command.
         #RWE_NAME=$(basename $PADOGRID_WORKSPACES_HOME)
         #WORKSPACE=$(basename $PADOGRID_WORKSPACE)
         RWE_NAME=$(basename $VM_PADOGRID_WORKSPACES_HOME)
         WORKSPACE=$(basename $VM_PADOGRID_WORKSPACE)

         VM_PUBLIC_HOSTS=`getClusterProperty "vm.public.hosts"`
         # Replace , with space
         __VM_HOSTS=$(echo "$VM_PUBLIC_HOSTS" | sed "s/,/ /g")
         for VM_HOST in $__VM_HOSTS; do
            ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "switch_rwe $RWE_NAME/$WORKSPACE && $COMMAND_PREFIX $VM_PADOGRID_HOME/$PRODUCT/bin_sh/$EXECUTABLE -cluster $CLUSTER $@"
            break;
         done
      fi
      exit
   fi
fi

#
# Local cluster
#

# For pod clusters. If non-pod, the following variables are ignored.
if [ "$POD" != "local" ] && [ "$VM_ENABLED" == "true" ]; then
   LOCATOR_NUMBER=1
   VM_USER=`getVmUser`
   VM_KEY=`getVmKeyArg`
   getVmLocatorName `hostname`
   LOCATOR=$(getVmLocatorName `hostname`)
else
   PRIMARY_NODE_NAME=`getPodProperty "node.name.primary" "$DEFAULT_NODE_NAME_PRIMARY"`
   NODE_NAME_PREFIX=$PRIMARY_NODE_NAME
   NODE_LOCAL="${PRIMARY_NODE_NAME}.local"
   LOCATOR_NUMBER=$LOCATOR_NUM_NO_LEADING_ZERO
   LOCATOR=`getLocatorName $LOCATOR_NUMBER`
fi
LOCATOR_DIR=$RUN_DIR/$LOCATOR

if  [ ! -d $CLUSTER_DIR ]; then
   echo "----------------------------------------------------------------"
   echo "WORKSPACE: $PADOGRID_WORKSPACE"
   echo "  Cluster: $CLUSTER"
   echo "   Status: This cluster has not been created. Please run the create_cluster command to"
   echo "           to create the cluster before running this command."
   echo "----------------------------------------------------------------"
   exit 1
fi

if [ ! -d $LOCATOR_DIR ]; then
   if [ "$REMOTE_SPECIFIED" == "true" ]; then
      $SCRIPT_DIR/add_locator -cluster $CLUSTER -workspace $PADOGRID_WORKSPACE
   else
      echo "----------------------------------------------------------------"
      echo "WORKSPACE: $PADOGRID_WORKSPACE"
      echo "  Cluster: $CLUSTER"
      echo "  Locator: $LOCATOR"
      echo "   Status: This locator has not been configured. Please run the add_locator command to configure"
      echo "           new locators."
      echo "----------------------------------------------------------------"
      exit 1
   fi
fi

# If the locator is already running, then exit.
if [ "$SIMULATE" == "false" ] && [ "$CREATE_SCRIPT" == "false" ]; then
   PID=`getLocatorPid $LOCATOR $WORKSPACE $RWE`
   if [ -n "${PID}" ]; then
      echo "----------------------------------------------------------------"
      echo "WORKSPACE: $PADOGRID_WORKSPACE"
      echo "  Cluster: $CLUSTER"
      echo "  Locator: $LOCATOR"
      echo "   Status: This locator is already running [Locator: $LOCATOR, PID=$PID]. Command aborted."
      echo "----------------------------------------------------------------"
      exit 1
   fi
fi

# Locator port number
LOCATOR_PROPERTIES=""
LOCATOR_START_PORT=`getClusterProperty "locator.tcp.startPort" $DEFAULT_LOCATOR_START_PORT`
let LOCATOR_PORT=LOCATOR_START_PORT+LOCATOR_NUMBER-1
let LOCATOR_END_PORT=LOCATOR_START_PORT+MAX_LOCATOR_COUNT-1
LOCATOR_TCP_LIST=""
VM_ENABLED=`getClusterProperty "vm.enabled" "false"`

if [ "$VM_ENABLED" == "true" ]; then

   HOST_NAME=$REMOTE
   BIND_ADDRESS=`getClusterProperty "vm.${HOST_NAME}.bindAddress"`
   HOSTNAME_FOR_CLIENTS=`getClusterProperty "vm.${HOST_NAME}.hostnameForClients"`
   VM_LOCATOR_HOSTS=`getClusterProperty "vm.locator.hosts"`
   if [ "$VM_LOCATOR_HOSTS" == "" ]; then
      echo >&2 "----------------------------------------------------------------"
      echo >&2 "WORKSPACE: $PADOGRID_WORKSPACE"
      echo >&2 "    ERROR: VM hosts undefined. Set 'vm.locator.hosts' in the following cluster.properties file."  
      echo >&2 "           $ETC_DIR/cluster.properties"
      echo >&2 "           Command aborted."
      echo >&2 "----------------------------------------------------------------"
      exit 1
   fi
   # Replace , with space
   __VM_LOCATOR_HOSTS=$(echo "$VM_LOCATOR_HOSTS" | sed "s/,/ /g")
   for VM_HOST in $__VM_LOCATOR_HOSTS; do
      if [ "$LOCATOR_TCP_LIST" == "" ]; then
         LOCATOR_TCP_LIST="$VM_HOST[$LOCATOR_START_PORT]"
      else
         LOCATOR_TCP_LIST="$LOCATOR_TCP_LIST,$VM_HOST[$LOCATOR_START_PORT]"
      fi
   done

elif [ "$POD" == "local" ]; then

   HOST_NAME=`hostname`
   BIND_ADDRESS=`getClusterProperty "cluster.bindAddress" "$HOST_NAME"`
   HOSTNAME_FOR_CLIENTS=`getClusterProperty "cluster.hostnameForClients" "$HOST_NAME"`
   LOCATOR_PREFIX=`getLocatorPrefix`
   pushd $RUN_DIR > /dev/null 2>&1
   for i in ${LOCATOR_PREFIX}*; do
      if [ -d "$i" ]; then
         __LOCATOR=$i
         __LOCATOR_NUM=${__LOCATOR##$LOCATOR_PREFIX}
         __LOCATOR_NUM=$(trimLeadingZero $__LOCATOR_NUM)
         let __LOCATOR_PORT=LOCATOR_START_PORT+__LOCATOR_NUM-1
         if [ "$LOCATOR_TCP_LIST" == "" ]; then
            LOCATOR_TCP_LIST="$BIND_ADDRESS[$__LOCATOR_PORT]"
         else
            LOCATOR_TCP_LIST="$LOCATOR_TCP_LIST,$BIND_ADDRESS[$__LOCATOR_PORT]"
         fi
      fi
   done
   popd > /dev/null 2>&1

else

   BIND_ADDRESS=`getClusterProperty "cluster.bindAddress" "$HOST_NAME"`
   HOSTNAME_FOR_CLIENTS=`getClusterProperty "cluster.hostnameForClients" "$HOST_NAME"`
   PRIMARY_NODE_NAME=`getPodProperty "node.name.primary" "$DEFAULT_NODE_NAME_PRIMARY"`
   NODE_NAME_PREFIX=$PRIMARY_NODE_NAME
   LOCATOR_COUNT=`getLocatorCount`
   if [ $BIND_ADDRESS != "" ]; then
      LOCATOR_TCP_LIST="$BIND_ADDRESS[$LOCATOR_START_PORT]"
      HOSTNAME_FOR_CLIENTS=$BIND_ADDRESS
   else
      NODE_LOCAL="${PRIMARY_NODE_NAME}.local"
      LOCATOR_TCP_LIST="$NODE_LOCAL[$LOCATOR_START_PORT]"
      BIND_ADDRESS=$NODE_LOCAL
      HOSTNAME_FOR_CLIENTS=$NODE_LOCAL
   fi

fi

if [ "$POD" != "local" ] && [ "$REMOTE_SPECIFIED" == "false" ]; then
   ssh -n $SSH_USER@$NODE_LOCAL -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$COMMAND_PREFIX $REMOTE_BASE_DIR/$PRODUCT/bin_sh/$EXECUTABLE -cluster $CLUSTER -remote $NODE_LOCAL -workspace $PADOGRID_WORKSPACE $*"
   exit
fi

#LOCATOR_PROPERTIES="-Dpadogrid.group=$CLUSTER \
#-Dpadogrid.tcp.port=$LOCATOR_PORT \
#-Dpadogrid.tcp.locators=$LOCATOR_TCP_LIST "

# Debug parameters.
DEBUG_ENABLED=`getClusterProperty "locator.debug.enabled" $DEFAULT_LOCATOR_DEBUG_ENABLED`
DEBUG=""
if [ "$DEBUG_ENABLED" == "true" ]; then
   DEBUG_START_PORT=`getClusterProperty "locator.debug.startPort" $DEFAULT_LOCATOR_DEBUG_START_PORT`
   if [ "$POD" == "local" ]; then
      let DEBUG_PORT=DEBUG_LOCATOR_START_PORT+LOCATOR_NUMBER-1
   else
      DEBUG_PORT=$DEBUG_START_PORT
   fi
   if [[ $JAVA_VERSION == 1.8* ]]; then
      DEBUG="--J=-Xdebug --J='-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=$DEBUG_PORT'"
   else
      DEBUG="--J=-Xdebug --J='-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:$DEBUG_PORT'"
   fi
else
   DEBUG_PORT="Disabled"
   DEBUG=""
fi

# JMX parameters
LOCATOR_JMX_ENABLED=`getClusterProperty "locator.jmx.enabled" $DEFAULT_LOCATOR_JMX_ENABLED`
JMX_PARAMETERS=""
if [ "$LOCATOR_JMX_ENABLED" == "true" ]; then
   LOCATOR_JMX_START_PORT=`getClusterProperty "locator.jmx.startPort" $DEFAULT_LOCATOR_JMX_START_PORT`
   if [ "$POD" == "local" ]; then
      let JMX_PORT=LOCATOR_JMX_START_PORT+LOCATOR_NUMBER-1
   else
      JMX_PORT=$LOCATOR_JMX_START_PORT
   fi
   JMX_PARAMETERS="--J=-Dcom.sun.management.jmxremote.port=${JMX_PORT} --J=-Dcom.sun.management.jmxremote.ssl=false --J=-Dcom.sun.management.jmxremote.authenticate=false"
else
   JMX_PORT="Disabled"
   JMX_PARAMETERS=""
fi

# Set LOG_FILE in the log directory.
if [[ ${OS_NAME} == CYGWIN* ]]; then
   __LOG_DIR="$(cygpath -wp "$LOG_DIR")"
else
   __LOG_DIR=$LOG_DIR
fi
GEMFIRE_PROPERTY_FILE="$ETC_DIR/gemfire.properties"
STATS_FILE_NAME=${LOCATOR}.gfs
STATS_FILE=$STATS_DIR/${STATS_FILE_NAME}
export LOG_FILE_NAME=${LOCATOR}.log
export LOG_FILE=$LOG_DIR/${LOG_FILE_NAME}
if [[ ${OS_NAME} == CYGWIN* ]]; then
   GEMFIRE_PROPERTY_FILE="$(cygpath -wp "$GEMFIRE_PROPERTY_FILE")"
   export LOG_FILE="$(cygpath -wp "$LOG_FILE")"
   CONFIG_FILE="$(cygpath -wp "$CONFIG_FILE")"
   CLIENT_CONFIG_FILE="$(cygpath -wp "$CLIENT_CONFIG_FILE")"
fi

# Set heap to the "heap.min/heap.max" values found in the $ETC_DIR/cluster.properties file.
MIN_HEAP_SIZE=`getClusterProperty "locator.heap.min" $DEFAULT_LOCATOR_MIN_HEAP_SIZE`
MAX_HEAP_SIZE=`getClusterProperty "locator.heap.max" $DEFAULT_LOCATOR_MAX_HEAP_SIZE`

# Set JAVA_OPTS.
# 6/29/22 - Leave out LOG_PROPERITES (Log4J) due to NPE within Log4J by Geode v1.15.0.
#           This issue is seen for locators only.
#JAVA_OPTS="$JAVA_OPTS $LOCATOR_PROPERTIES $LOG_PROPERTIES $SHUTDOWN_HOOK_PROPERTIES $JMX_PARAMETERS"
JAVA_OPTS="$JAVA_OPTS $LOCATOR_JAVA_OPTS"
JAVA_OPTS="$JAVA_OPTS $LOCATOR_PROPERTIES $SHUTDOWN_HOOK_PROPERTIES $JMX_PARAMETERS"
JAVA_OPTS="$JAVA_OPTS --J=-Xms${MIN_HEAP_SIZE} --J=-Xmx${MAX_HEAP_SIZE}"
JAVA_OPTS="$JAVA_OPTS ${DEBUG}"

# Set Pulse
JMX_MANAGER_HTTP_START_PORT=`getClusterProperty "locator.jmx.manager.http.startPort" $DEFAULT_JMX_MANAGER_HTTP_START_PORT`
JMX_MANAGER_START_PORT=`getClusterProperty "locator.jmx.manager.startPort" $DEFAULT_JMX_MANAGER_START_PORT`
if [ "$POD" == "local" ]; then
   let JMX_MANAGER_HTTP_PORT=JMX_MANAGER_HTTP_START_PORT+LOCATOR_NUMBER-1
   let JMX_MANAGER_PORT=JMX_MANAGER_START_PORT+LOCATOR_NUMBER-1
else
   JMX_MANAGER_HTTP_PORT=$JMX_MANAGER_HTTP_START_PORT
   JMX_MANAGER_PORT=$JMX_MANAGER_START_PORT
fi

# Set PROMETHEUS paths
LOCATOR_PROMETHEUS_ENABLED=`getClusterProperty "locator.prometheus.enabled" $DEFAULT_LOCATOR_PROMETHEUS_ENABLED`
if [ "$LOCATOR_PROMETHEUS_ENABLED" == "true" ]; then
   LOCATOR_PROMETHEUS_START_PORT=`getClusterProperty "locator.prometheus.startPort" $DEFAULT_LOCATOR_PROMETHEUS_START_PORT`
   if [ "$POD" == "local" ]; then
      let PROMETHEUS_PORT=LOCATOR_PROMETHEUS_START_PORT+LOCATOR_NUMBER-1
   else
      PROMETHEUS_PORT=$LOCATOR_PROMETHEUS_START_PORT
   fi
   PROMETHEUS_CONFIG_FILE_PATH="$ETC_DIR/prometheus.yml"
   PROMETHEUS_JAR_PATH=`find $PADOGRID_HOME/lib -name jmx_prometheus_javaagent*.jar`

   if [[ ${OS_NAME} == CYGWIN* ]]; then
      PROMETHEUS_JAR_PATH="$(cygpath -wp "$PROMETHEUS_JAR_PATH")"
      PROMETHEUS_CONFIG_FILE_PATH="$(cygpath -wp "$PROMETHEUS_CONFIG_FILE_PATH")"
      # Remove the disk drive letter from the path. A workaround to a bug in the prometheus exporter.
      PROMETHEUS_CONFIG_FILE_PATH=${PROMETHEUS_CONFIG_FILE_PATH:2}
   fi
   JAVA_OPTS="$JAVA_OPTS --J=-javaagent:$PROMETHEUS_JAR_PATH=$PROMETHEUS_PORT:$PROMETHEUS_CONFIG_FILE_PATH"
else
   PROMETHEUS_PORT="Disabled"
fi

# Set GC log
GC_LOG_ENABLED=`getClusterProperty "gc.log.enabled" $DEFAULT_GC_LOG_ENABLED`
GC_LOG_FILE_ENABLED=`getClusterProperty "gc.log.file.enabled" $DEFAULT_GC_LOG_FILE_ENABLED`
if [ $GC_LOG_ENABLED == "true" ]; then
   if [ $GC_LOG_FILE_ENABLED == "true" ]; then
      GC_LOG_FILE=$LOG_DIR/${LOCATOR}-gc.log
      if [[ ${OS_NAME} == CYGWIN* ]]; then
         GC_LOG_FILE="$(cygpath -wp "$GC_LOG_FILE")"
      fi
      if [[ $JAVA_VERSION == 1.8* ]]; then
         JAVA_OPTS="$JAVA_OPTS --J=-Xloggc:$GC_LOG_FILE --J=-XX:+PrintGCDetails --J=-XX:+PrintGCDateStamps"
      else
         JAVA_OPTS="$JAVA_OPTS --J=-Xlog:gc=info:file=$GC_LOG_FILE:time,uptime,pid:filecount=5,filesize=4096"
      fi
   fi
fi

# Start the locator
if [[ ${OS_NAME} == CYGWIN* ]]; then
   CLASSPATH="$(cygpath -wp "$CLASSPATH")"
   LOCATOR_DIR="$(cygpath -wp "$LOCATOR_DIR")"
fi
export LOG_DIR=$__LOG_DIR

GEMFIRE_PROPERTIES="--J=-Dgemfire.jmx-manager=true \
   --J=-Dgemfire.jmx-manager-port=$JMX_MANAGER_PORT \
   --J=-Dgemfire.jmx-manager-http-port=$JMX_MANAGER_HTTP_PORT"
JAVA_OPTS="$JAVA_OPTS $GEMFIRE_PROPERTIES"

PULSE_PROPERTIES="--J=-Dpulse.Log-File-Name=pulse --J=-Dpulse.Log-File-Location=."
JAVA_OPTS="$JAVA_OPTS $PULSE_PROPERTIES"
JAVA_OPTS="--J=-Dpado.vm.id=${LOCATOR} \
   --J=-Dpadogrid.workspace=$WORKSPACE \
   --J=-Dpadogrid.rwe=$RWE \
   --J=-Dgemfire.statistic-archive-file=$STATS_FILE \
   --J=-Dgemfire.log-file=$LOG_FILE $JAVA_OPTS"
GFSH_OPTS="--name=${LOCATOR} \
   --locators=$LOCATOR_TCP_LIST \
   --dir=$LOCATOR_DIR \
   --port=$LOCATOR_PORT \
   --properties-file=$GEMFIRE_PROPERTY_FILE"

if [ "$BIND_ADDRESS" != "" ]; then
   GFSH_OPTS="$GFSH_OPTS --bind-address=$BIND_ADDRESS"
fi
if [ "$HOSTNAME_FOR_CLIENTS" != "" ]; then
   GFSH_OPTS="$GFSH_OPTS --hostname-for-clients=$HOSTNAME_FOR_CLIENTS"
fi

if [ "$SIMULATE" == "true" ]; then
   PID="Simulated"
elif [ "$CREATE_SCRIPT" == "true" ]; then
   PID="Script"
else
   # LOG_FILE might not exist if a VM bundle has been deployed.
   if  [ ! -d "$LOG_DIR" ]; then
      mkdir -p $LOG_DIR
   fi
   if  [ ! -d "$STATS_DIR" ]; then
      mkdir -p $STATS_DIR
   fi
   if [ "$RUN_SCRIPT" != "" ]; then
      $RUN_SCRIPT >> $LOG_FILE &
   else
      if [[ ${OS_NAME} == CYGWIN* ]]; then
         # Start gfsh using gfsh.bat on Windows
         GFSH="$PRODUCT_HOME/bin/gfsh.bat"
         export GF_JAVA=$JAVA_HOME/bin/java.exe
         # GF_JAVA required by gfsh.bat
         GF_JAVA="$(cygpath -wp "$GF_JAVA")"
         export GF_JAVA
      else
         GFSH="$PRODUCT_HOME/bin/gfsh"
         GF_JAVA="$JAVA_HOME/bin/java"
         export GF_JAVA
      fi
      echo $GFSH start locator $GFSH_OPTS $JAVA_OPTS
      $GFSH start locator $GFSH_OPTS $JAVA_OPTS
      PID=`getLocatorPid $LOCATOR $WORKSPACE $RWE`
   fi
fi

# PULSE_URL
PULSE_URL="http://$HOSTNAME_FOR_CLIENTS:$JMX_MANAGER_HTTP_PORT/pulse"

# JMX_URL
JMX_URL="service:jmx:rmi:///jndi/rmi://padomac.local:$JMX_PORT/jmxrmi"

echo "----------------------------------------------------------------"
echo "       WORKSPACE: $PADOGRID_WORKSPACE"
echo "         Cluster: $CLUSTER"
if [ "$VM_SPECIFIED" == "true" ] || [ "$VM_ENABLED" == "true" ]; then
echo "      Deployment: VM"
else
echo "             Pod: $POD"
fi
echo "         Locator: $LOCATOR"
echo "             PID: $PID"
echo "    CLUSTER_TYPE: $CLUSTER_TYPE"
echo "     WORKING_DIR: $LOCATOR_DIR"
echo "      CONFIG_DIR: $ETC_DIR"
echo "     CONFIG_FILE: $CONFIG_FILE"
echo "         LOG_DIR: $LOG_DIR"
echo "        LOG_FILE: $LOG_FILE"
echo "    LOCATOR_PORT: $LOCATOR_PORT"
echo "      DEBUG_PORT: $DEBUG_PORT"
echo " PROMETHEUS_PORT: $PROMETHEUS_PORT"
echo "        JMX_PORT: $JMX_PORT"
echo "       PULSE_URL: $PULSE_URL"
echo "JMX_MANAGER_PORT: $JMX_MANAGER_PORT"
if [ "$LOCATOR_JMX_ENABLED" == "true" ]; then
echo "         JMX_URL: $JMX_URL"
fi
echo "         GF_JAVA: $GF_JAVA"
if [ "$RUN_SCRIPT" != "" ]; then
echo -e "      RUN_SCRIPT: ${CLightGreen}$RUN_SCRIPT${CNone}"
fi
echo "       GFSH_OPTS: $GFSH_OPTS"
echo "       JAVA_OPTS: $JAVA_OPTS"
echo "       CLASSPATH: $CLASSPATH"
echo "----------------------------------------------------------------"

if [ "$SIMULATE" == "true" ]; then
   echo ""
   echo "GFSH_OPTS"
   echo "---------"
   printJavaOpts "$GFSH_OPTS"
   echo ""
   echo "JAVA_OPTS"
   echo "---------"
   printJavaOpts "$JAVA_OPTS"
   echo ""
   echo "CLASSPATH"
   echo "---------"
   printClassPath "$CLASSPATH"
   echo ""
   echo "Environment Variables"
   echo "---------------------"
   echo "LOG_FILE=$LOG_FILE"
   echo ""
fi


#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020-2025 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.  # You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

# Dashboard folder name in Grafana. The output file should be imported to this folder.
FOLDER_NAME="GemFireTemplates"
OUTPUT_DIR="$APP_DIR/templates/$FOLDER_NAME"

# The template file
TEMPLATE_FILE="$OUTPUT_DIR/Template Member Regions Tables.json"
# The file to generate
OUTPUT_FILE="$OUTPUT_DIR/GemFire Member Regions Tables.json"

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   ./$EXECUTABLE - Generate a GemFire stats dashboard file by collecting region stats

SYNOPSIS
   ./$EXECUTABLE [-?]

DESCRIPTION
   Generates the following dashboard file,

   $OUTPUT_FILE

   that contains table panels capturing all GemFire statistics available from Prometheus.

   Once the file is generated, move its folder to the following directory 

   $DASHBOARDS_DIR

   and execute ./import_folder -folder $FOLDER_NAME to import it into Grafana.

DEFAULT
   ./$EXECUTABLE

SEE ALSO
   generate_partitioned_region_tables, generate_replicated_region_tables

EOF
exit
fi

if [ ! -d "$OUTPUT_DIR" ]; then
   mkdir -p "$OUTPUT_DIR"
fi

# The staging file is a temporary file containing interim results used
# to build the output contents.
STAGING_FILE="/tmp/$EXECUTABLE-$(date +%s).json"

# Empty targets in both partitioned region and replication region panels.
# We'll be creating a new list for them.
cat "$TEMPLATE_FILE" | jq '.  
      | .dashboard.title="GemFire Member Regions Tables" 
      | .dashboard.uid="92d76020-1dce-4ca2-b32d-8a309950847c"
      | .dashboard.tags=["all", "gemfire", "member", "region", "generated"]
      | .dashboard.panels[2].targets |= []
      | .dashboard.panels[3].targets |= []' > "$OUTPUT_FILE"

cp "$OUTPUT_FILE" "$STAGING_FILE"

CACHE_PERF_STATS=$(curl -sG http://localhost:9090/federate -d 'match[]={__name__!=""}' | grep "CachePerfStats" | sed -e '/# TYPE/d' -e 's/{.*$//' | sort |uniq )

INDEX=0
for CPS in $CACHE_PERF_STATS; do
   INDEX=$((INDEX+1))
   TITLE=$(echo $CPS | sed 's/gemfire_//')
   REFID="$TITLE"
   TARGET=$(echo '
       {
         "datasource": {
           "type": "prometheus",
           "uid": "${DataSource}"
         },
         "editorMode": "code",
         "exemplar": false,
         "expr": "METRIC{$ClusterFilterLabel=\"$Cluster\",category=\"CachePerfStats\",instance=\"$Member\"}",
         "format": "table",
         "instant": true,
         "legendFormat": "__auto",
         "range": true,
         "refId": "REFID"
       }
       ' |  sed -e "s/METRIC/$CPS/" -e "s/REFID/$REFID/")

   # Staging is necessary due to the large content size
   cp "$OUTPUT_FILE" "$STAGING_FILE"
   cat "$STAGING_FILE" | jq ".dashboard.panels[2].targets[.dashboard.panels[2].targets | length] |= . + $TARGET
                       | .dashboard.panels[3].targets[.dashboard.panels[3].targets | length] |= . + $TARGET" > "$OUTPUT_FILE"
done

# Remove the temporary staging files
if [ -f "$STAGING_FILE" ]; then
   rm "$STAGING_FILE"
fi

echo ""
echo "Generated: $OUTPUT_FILE"
echo "Move this file to ../etc/dashboards/$FOLDER_NAME/ and run ./import_folder -folder $FOLDER_NAME"
echo ""

#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020-2023 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-cluster -num -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Stop the specified master in the specified cluster

SYNOPSIS
   $EXECUTABLE [-cluster cluster_name] [-num master_number] [-?]


DESCRIPTION
   Stops the specified master.

   For VM clusters, the master number reflects the host in the order it is
   defined by the cluster property, 'vm.master.hosts', in the 'etc/cluster.properties'
   file. (Run 'show_cluster -long' to see the VM master numbers that map to hosts.)

   -cluster cluster_name
             Cluster name.

   -num master_number
             Master number 1-5
EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
DEFAULT
   $EXECUTABLE -cluster $CLUSTER -num $MEMBER_NUM

FILES
   $CLUSTER_DIR/etc/cluster.properties
             The current cluster configuration file.

EOF
fi
cat <<EOF
SEE ALSO
EOF
   printSeeAlsoList "*master*" $EXECUTABLE
   exit
fi

POD=`getClusterProperty "pod.name" "local"`

#
# VM cluster
#
VM_ENABLED=`getClusterProperty "vm.enabled" "false"`
if [ "$REMOTE_SPECIFIED" == "false" ]; then
   if [ "$VM_ENABLED" == "true" ]; then
      VM_MASTER_HOSTS=`getClusterProperty "vm.master.hosts"`
      if [ "$VM_MASTER_HOSTS" == "" ]; then
         echo "ERROR: VM master hosts undefined. Set 'vm.master.hosts' in the following cluster.properties file."  
         echo "       $ETC_DIR/cluster.properties"
         echo "       Command aborted."
         exit 1
      fi

      # If pod cluster, then source in the pod env vars to set the VM specific variables
      OS_ENV=`getOsEnv`
      if [ "$OS_ENV" == "gh" ] && [ "$POD" != "local" ]; then
         if [ -f "$PODS_DIR/$POD/.nodeenv.sh" ]; then
            . "$PODS_DIR/$POD/.nodeenv.sh"
         fi
      fi

      # Replace , with space
      __VM_HOSTS=$(echo "$VM_MASTER_HOSTS" | sed "s/,/ /g")
      VM_USER=`getVmUser`
      VM_KEY=`getVmKeyArg`

      # Determine the host
      __MASTER_NUMBER=0
      __FOUND="false"
      
      for VM_HOST in $__VM_HOSTS; do
         let __MASTER_NUMBER=__MEMBER_NUMBER+1
         if [ $__MASTER_NUMBER -eq $MEMBER_NUM_NO_LEADING_ZERO ]; then
            __FOUND="true"
            ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$COMMAND_PREFIX $VM_PADOGRID_HOME/$PRODUCT/bin_sh/stop_master -cluster $CLUSTER -remote $VM_HOST -workspace $VM_PADOGRID_WORKSPACE -num 1"
            break;
         fi
      done
      FIRST_NUMBER=1
      LAST_NUMBER=$__MASTER_NUMBER
      if [ "$__FOUND" == "false" ]; then
         echo "ERROR: Invalid master number. Valid range is [$FIRST_NUMBER, $LAST_NUMBER]. Command aborted." 
      fi
      exit
   fi
fi

#
# Local cluster
#

NODE_NAME_PRIMARY=`getPodProperty "node.name.primary" "$DEFAULT_NODE_NAME_PRIMARY"`
NODE_NAME_PREFIX=$NODE_NAME_PRIMARY

if  [ ! -d $CLUSTER_DIR ]; then
   echo "----------------------------------------------------------------"
   echo "Cluster: $CLUSTER"
   echo " Status: This cluster has not been created. Please run the create_cluster command to"
   echo "         to create the cluster before running this command."
   echo "----------------------------------------------------------------"
   exit 1
fi

if [ "$MEMBER_NUM_SPECIFIED" == "false" ]; then
   echo "ERROR: Master number not specified. Run 'stop_master -?' to see usage. Command aborted."
   exit 1
fi


if [ "$POD" != "local" ]; then
   PRIMARY_NODE_NAME=`getPodProperty "node.name.primary" "$DEFAULT_NODE_NAME_PRIMARY"`
   NODE_LOCAL="${PRIMARY_NODE_NAME}.local"
   if [ "$REMOTE_SPECIFIED" == "false" ]; then
      ssh -n $SSH_USER@$NODE_LOCAL -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$COMMAND_PREFIX $REMOTE_BASE_DIR/$PRODUCT/bin_sh/$EXECUTABLE -cluster $CLUSTER -remote $NODE_LOCAL -workspace $PADOGRID_WORKSPACE $*;"
      exit
   fi
   REMOTE_SPECIFIED="false"
fi

MASTER_NUMBER=$MEMBER_NUM
MASTER=`getMasterName $MASTER_NUMBER`
MASTER_DIR=$RUN_DIR/$MASTER
if [[ ${OS_NAME} == CYGWIN* ]]; then
   MASTER_DIR="$(cygpath -wp "$MASTER_DIR")"
fi

PID=`getMasterPid $MASTER $WORKSPACE $RWE`
if [ -z "${PID}" ]; then
   echo "----------------------------------------------------------------"
   echo " WORKSPACE: $PADOGRID_WORKSPACE"
   echo "   Cluster: $CLUSTER"
   if [ "$VM_ENABLED" == "true" ]; then
   echo "Deployment: VM"
   else
   echo "       Pod: $POD"
   fi
   echo "   Master: $MASTER"
   echo "    Status: Master is already stopped [Master: $MASTER]. Command aborted."
   echo "----------------------------------------------------------------"
   exit 0
else

   echo SPARK_LOCAL_DIRS=$CLUSTER_DIR/scratch \
   SPARK_CONF_DIR=$ETC_DIR \
   SPARK_PID_DIR=$RUN_DIR/pids \

   echo SPARK_CONF_DIR=$ETC_DIR \
   SPARK_PID_DIR=$RUN_DIR/pids \
   ${SPARK_HOME}/sbin/spark-daemon.sh stop org.apache.spark.deploy.master.Master $MASTER_NUM_NO_LEADING_ZERO

   SPARK_CONF_DIR=$ETC_DIR \
   SPARK_PID_DIR=$RUN_DIR/pids \
   "${SPARK_HOME}/sbin"/spark-daemon.sh stop org.apache.spark.deploy.master.Master $MASTER_NUM_NO_LEADING_ZERO

   echo "----------------------------------------------------------------"
   echo "  WORKSPACE: $PADOGRID_WORKSPACE"
   echo "    Cluster: $CLUSTER"
   if [ "$VM_ENABLED" == "true" ]; then
   echo " Deployment: VM"
   else
   echo "        Pod: $POD"
   fi
   echo "        Pod: $POD"
   echo "    Master: $MASTER"
   echo "        PID: $PID"
   echo "     Status: Stopped"
   echo "Working Dir: $MASTER_DIR"
   echo "----------------------------------------------------------------"
fi

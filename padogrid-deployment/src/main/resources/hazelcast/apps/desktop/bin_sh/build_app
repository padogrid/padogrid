#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020-2023 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"
REPO_NAME=hazelcast-desktop

if [ "$HELP" == "true" ]; then
   echo ""
   echo -e "${CBrownOrange}Deprecated:${CNone}"
   echo "    Starting PadoGrid v0.9.15, this script is deprecated. You can now install"
   echo "    HazelcastDesktop by running 'install_padogrid -product hazelcast-desktop' and"
   echo "    update your workspaces by running 'update_padogrid -product hazelcast-desktop'."
   echo "    Once installed, run 'create_app -desktop' to create a properly configured"
   echo "    desktop environment."
   echo ""
   echo "Usage:"
   echo "   ./$EXECUTABLE [-clean] [-?]"
   echo ""
   echo "   Builds $REPO_NAME in the padogrid environment. Upon successfully execution,"
   echo "   it deploys the latest $REPO_NAME distribuion in the following app directory."
   echo "      $APP_DIR/${REPO_NAME}_<version>"
   echo ""
   echo "   -clean Cleans up the build files after the build completes."
   echo ""
   echo "Default: ./$EXECUTABLE"
   echo ""
   exit
fi

#
# Returns the sorted list of the specified list that contains product versions
# @param versionList
#
function sortVersionList
{
   local VERSION_LIST="$1"
   local TMP_FILE=/tmp/$EXECUTABLE-$(date "+%m%d%y%H%M%S").txt
   echo 
   echo "" > $TMP_FILE
   if [ -f $TMP_FILE ]; then
      rm $TMP_FILE
   fi
   touch $TMP_FILE
   for i in $VERSION_LIST; do
      echo "$i" >> $TMP_FILE
   done
   
   # The -V option may not be available for some OS's.
   SORTED_VERSIONS=$(sort -rV $TMP_FILE 2> /dev/null)
   case ${?} in
   0) echo ;;
   *) SORTED_VERSIONS=$(sort -r $TMP_FILE) ;;
   esac
   rm $TMP_FILE
   echo $SORTED_VERSIONS
}

#
# Determine the addon version
#
ADDON_CORE_JAR_FILE_PATH=`ls $BASE_DIR/lib/v$HAZELCAST_MAJOR_VERSION_NUMBER/hazelcast-addon-core-*.jar`
ADDON_CORE_JAR_FILE_NAME="`basename $ADDON_CORE_JAR_FILE_PATH`"
ADDON_CORE_PREFIX="hazelcast-addon-core-$HAZELCAST_MAJOR_VERSION_NUMBER-"
ADDON_CORE_NAME=${ADDON_CORE_JAR_FILE_NAME%.jar}
ADDON_VERSION=${ADDON_CORE_NAME#$ADDON_CORE_PREFIX}

PADOGRID_COMMON_JAR_FILE_PATH="$PADOGRID_HOME/lib/padogrid-common-$ADDON_VERSION.jar"
ADDON_COMMON_JAR_FILE_PATH="$BASE_DIR/lib/hazelcast-addon-common-$ADDON_VERSION.jar"
ADDON_CORE_JAR_FILE_PATH_3="$BASE_DIR/lib/v3/hazelcast-addon-core-3-$ADDON_VERSION.jar"
ADDON_CORE_JAR_FILE_PATH_4="$BASE_DIR/lib/v4/hazelcast-addon-core-4-$ADDON_VERSION.jar"
ADDON_CORE_JAR_FILE_PATH_5="$BASE_DIR/lib/v5/hazelcast-addon-core-5-$ADDON_VERSION.jar"

# Install the addon-core jar to the local Maven repo
if [[ ${OS_NAME} == CYGWIN* ]]; then
   PADOGRID_COMMON_JAR_FILE_PATH="$(cygpath -wp "$PADOGRID_COMMON_JAR_FILE_PATH")"
   ADDON_COMMON_JAR_FILE_PATH="$(cygpath -wp "$ADDON_COMMON_JAR_FILE_PATH")"
   ADDON_CORE_JAR_FILE_PATH_3="$(cygpath -wp "$ADDON_CORE_JAR_FILE_PATH_3")"
   ADDON_CORE_JAR_FILE_PATH_4="$(cygpath -wp "$ADDON_CORE_JAR_FILE_PATH_4")"
   ADDON_CORE_JAR_FILE_PATH_5="$(cygpath -wp "$ADDON_CORE_JAR_FILE_PATH_5")"
   __SED_BACKUP="0"
fi

# SED backup prefix
if [[ ${OS_NAME} == DARWIN* ]]; then
   # Mac - space required
   __SED_BACKUP=" 0"
else
   __SED_BACKUP="0"
fi

# Install padogrid to the local repo
mvn install:install-file -Dfile=$PADOGRID_COMMON_JAR_FILE_PATH -DgroupId=padogrid.addon \
    -DartifactId=padogrid-common -Dversion=$ADDON_VERSION -Dpackaging=jar
mvn install:install-file -Dfile=$ADDON_COMMON_JAR_FILE_PATH -DgroupId=padogrid.addon \
    -DartifactId=hazelcast-addon-common -Dversion=$ADDON_VERSION -Dpackaging=jar
mvn install:install-file -Dfile=$ADDON_CORE_JAR_FILE_PATH_3 -DgroupId=padogrid.addon \
    -DartifactId=hazelcast-addon-core-3 -Dversion=$ADDON_VERSION -Dpackaging=jar
mvn install:install-file -Dfile=$ADDON_CORE_JAR_FILE_PATH_4 -DgroupId=padogrid.addon \
    -DartifactId=hazelcast-addon-core-4 -Dversion=$ADDON_VERSION -Dpackaging=jar
mvn install:install-file -Dfile=$ADDON_CORE_JAR_FILE_PATH_5 -DgroupId=padogrid.addon \
    -DartifactId=hazelcast-addon-core-5 -Dversion=$ADDON_VERSION -Dpackaging=jar

#
# Build hazelcast-desktop
#
BUILD_DIR=$APP_DIR/build
if [ ! -d $BUILD_DIR ]; then
   mkdir -p $BUILD_DIR
fi

# Checkout hazelcast-desktop
pushd $BUILD_DIR > /dev/null
git clone https://github.com/netcrest/hazelcast-desktop.git
popd > /dev/null

# Determine the latest release version
pushd $BUILD_DIR/hazelcast-desktop
TAGS=`git tag`
REPO_VERSIONS=$(sortVersionList "$TAGS")
for i in $REPO_VERSIONS; do
   REPO_VERSION=$i
   break;
done

# Checkout the latest desktop release
git checkout tags/$REPO_VERSION

# Change the addon version number in the desktop pom.xml
sed -i${__SED_BACKUP} 's/<padogrid.version>.*<\/padogrid.version>/<padogrid.version>'$ADDON_VERSION'<\/padogrid.version>/' pom.xml

# Build the desktop
mvn -DskipTests package
popd > /dev/null

# 
# Inflate the hazelcast-desktop distribution
#
REPO_NAME_VERSION=${REPO_NAME}_${REPO_VERSION}
tar -C $APP_DIR -xzf $BUILD_DIR/$REPO_NAME/${REPO_NAME}-deployment/target/assembly/${REPO_NAME}_${REPO_VERSION}.tar.gz

# 
# For some reason, the following files do not get included during maven build.
# Copy them manually for now. We do this for WSL.
#
cp $PADOGRID_HOME/hazelcast/lib/hazelcast-addon-common*.jar $APP_DIR/$REPO_NAME_VERSION/lib/
cp $PADOGRID_HOME/lib/padogrid-common*.jar $APP_DIR/$REPO_NAME_VERSION/lib/

#
# To run the desktop from WSL, we need to copy the required jar files into
# the desktop lib folder.
#
cp $PADOGRID_HOME/hazelcast/plugins/v3/* $APP_DIR/$REPO_NAME_VERSION/lib/v3/
cp $PADOGRID_HOME/hazelcast/plugins/v4/* $APP_DIR/$REPO_NAME_VERSION/lib/v4/
cp $PADOGRID_HOME/hazelcast/plugins/v5/* $APP_DIR/$REPO_NAME_VERSION/lib/v5/
cp $HAZELCAST_HOME/lib/hazelcast-*-all-*.jar $APP_DIR/$REPO_NAME_VERSION/lib/

# Copy the .addonenv.sh to hazelcast-desktop/bin_sh and adjust the directory level.
# This allows the desktop to pickup the cluster CLASSPATH.
cp $SCRIPT_DIR/.addonenv.sh $APP_DIR/$REPO_NAME_VERSION/bin_sh/
sed -i${__SED_BACKUP} 's/__DESKTOP_DIR=\$SCRIPT_DIR/__DESKTOP_DIR="\$(dirname "\$SCRIPT_DIR")"/' $APP_DIR/$REPO_NAME_VERSION/bin_sh/.addonenv.sh

# Set the Hazelcast major version number in the desktop setenv.sh/setenv.bat files
sed -i${__SED_BACKUP} 's/HAZELCAST_MAJOR_VERSION_NUMBER=.*$/HAZELCAST_MAJOR_VERSION_NUMBER='${HAZELCAST_MAJOR_VERSION_NUMBER}'/' $APP_DIR/$REPO_NAME_VERSION/bin_sh/setenv.sh
sed -i${__SED_BACKUP} 's/HAZELCAST_MAJOR_VERSION_NUMBER=.*$/HAZELCAST_MAJOR_VERSION_NUMBER='${HAZELCAST_MAJOR_VERSION_NUMBER}'/' $APP_DIR/$REPO_NAME_VERSION/bin_win/setenv.bat

# Remove the build files if the -clean option is specified.
if [ "$CLEAN" == "true" ]; then
   rm -rf $BUILD_DIR
fi

#
# Display desktop information
#
echo ""
echo "Deployed $REPO_NAME_VERSION in the following directory:"
echo "   $APP_DIR/$REPO_NAME_VERSION"
echo ""
echo "1. Place your client jar files that contain domain classes, etc. in the 'plugins/'"
echo "   directory."
echo "2. Update the 'etc/hazelcast-client.xml' as necessary. By default, the desktop connects"
echo "   to 'localhost:5701', i.e., the 'myhz' cluster."
echo "3. Change directory to the 'bin_sh/' directory and run 'desktop'."
echo ""

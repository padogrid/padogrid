# -------------------------------------------------------------------------
# Overview:
#
# Group test cases allow you to create and test groups of Hazelcast operations.
# You can think of a group as a function invoking one or more Hazelcast operations.
# As an example, a group could contain set, get, put, get calls making a total
# of four (4) Hazelcast IMap calls. You can designate threads to invoke this
# group and measure the average latency of each group (function) call.
# -------------------------------------------------------------------------

#
# This template creates one-to-many ER between Customer and Order objects by setting
# Customer.customerId to Order.customerId.
#

# The number of test runs. Each group has the member size set by the 
# 'memberSetSize' property. This means the total number of valid 
# legitimate transactions that return summary would be limited to
# the number of groups. Use this property to increase the number of
# transactions.
# Default: 1
testCount=1000

# Interval between test runs in msec.
# Default: 0
testIntervalInMsec=0

# Print status interval in sec. The application prints status in this interval
# to the console.
# Default: 10 sec
printStatusIntervalInSec=10

# Turn off logging (recommended)
hazelcast.logging.type=none

# Group names separated by ',' or '&'. If ',', then the next group executes after
# the current group completes. If '&', then the current group and the next group
# execute concurrently. Note that testCount applies per group. For example, if
# testCount=2 and groupName=g1&g2,g3 then g1 and g2 execute concurrently twice
# before g3 executes twice.
#groupNames=w_tx,w_queue_take&w_queue_poll
groupNames=w_tx

# -------------------------------------------------------------------------
# Group:
#
# A group represents a function that invokes one or more Hazelcast IMap methods.
#
# name         Group name.
#
# threadCount  The number of threads per group test.
#
#              Default: (processor count * 1.5).
#
# operations  Comma separated list of operations to perform. Operations are
#             individually defined. See the "Operations" section for details.
#             The listed operations are invoked sequentially per group invocation.
#             For example, if totalInvocationCount=1000 then the operations listed
#             will be invoked 1000 times in the order they are listed.
#
# totalInvocationCount Total number of group invocations.
# 
# comment     Any text describing the group. 
# -------------------------------------------------------------------------

# g1 sets 100 Customer objects into customers defined by the 'set1' operation
# and up to 5 (set1.factory.er.maxKeys) child Order objects per customer into orders
# defined by the 'set2' operation.
# Note that you can list more than one operations separated by commas.

# Execute various Hazelcast operations to simulate a workflow.

w_tx.name=Workflow
w_tx.threadCount=10
w_tx.operations=set1,put1,put2,get1,get2,rput1,rput2,rget1,rget2,sleep1,publish1,rpublish1,offer1,offer1,peek1,take1,sleep1,poll1,predicate1,sql1,sleep1,sql2,predicate3,sql3,sleep2
w_tx.comment=Simulates a workflow consisting of Hazelcast 21 operations with \
sprinkled delays. Before running this, you must first run `group-workflow-init.properties' to ingest initial data.\n\
>                                    Maps: [map1, map2] \n\
>                         Replicated Maps: [rmap1, rmap2] \n\
>                                  Topics: [topic1] \n\
>                         Reliable Topics: [rtopic1] \n\
>                                  Queues: [queue1] \n\
>                                 Queries: [nw/customer, nw/orders]
w_tx.totalInvocationCount=1000

g1.name=IQueue.offer() Test
g1.threadCount=8
g1.operations=offer1
g1.comment=IQueue.offer() test (1 KiB payload in queue1)
g1.totalInvocationCount=100

# w_queue_take performs IQueue.take()
# Take a half of the queue items and let queue_poll poll the other half.
w_queue_take.name=IQueue.take() Test
w_queuee_take.threadCount=1
w_queuee_take.operations=take1
w_queuee_take.comment=IQueue.take() test (1 KiB payload in queue1)
w_queuee_take.totalInvocationCount=500

# w_queue_poll performs IQueue.poll()
queue_poll.name=IQueue.poll() Test
queue_poll.threadCount=10
queue_poll.operations=poll1
queue_poll.comment=IQueue.poll() test (1 KiB payload in queue1)
queue_poll.totalInvocationCount=500

# -------------------------------------------------------------------------
# Operations:
#
# map | rmap | cache | topic | rtopic | queue | sleep
#                 Data structure name. This parameter specifies the name of the
#                 data structure pertaining to the specified test case.
#
#                 The 'sleep' operation sleeps for the specified amount of time
#                 in milliseconds. It has no other attributes. For example, 
#                 'sleep10.sleep=10', sleeps for 10 milliseconds before executing
#                 the next operation in the group.
#
# ref             The test case reference name. The defining test case inherits
#                 all values set by the referenced test case. Referenced properties
#                 are overwritten if defined.
#
# testCase        Test case.
#                 If invalid values are entered then the default value is assigned.
#
#                 Valid Test Cases: 
#                   - map (IMap): set, get, getall, put, putall    - Default: putall
#                   - cache (ICache): get, getall, put, putall     - Default: putall
#                   - *rmap (ReplicatedMap): get, put, putall      - Default: putall
#                   - queue (IQueue): offer, peek, poll, take      - Default: offer
#                   - topic/rtopic (ITopic): publish, **publishall - Default: publishall (4.x, 5.x), publish (3.x)
#
#                 * There is no getall API support for ReplicatedMap.
#                 ** ITopic.publishAll() is a new API only available in Hazelcast 4.1+.
#
# payloadSize     The value object size in bytes. The value object is a blob
#                 object containing the specified payload size in the form of
#                 byte array. Note that the key objects are String objects with
#                 the prefix defined by the key.prefix property. This property is
#                 used by the following test cases only.
#
#                 Used By: set, put, putall, offer, publish, publishall
#                 Default: 1024
#
# batchSize       The number of objects per putAll() or getAll() call per thread.
#
#                 Used By: getall, putall, publishall
#                 Default: 100
#
# totalEntryCount The total number of entries. 
#
#                 - For putall, getall and publishall, this value dictates the upper bound
#                   of the entry count. The number of objects inserted will be less
#                   than or equal to this value. To keep the upper bound, the keys are generated
#                   in a round-robin fashion to perform updates instead of inserts if the entry
#                   count reaches the upper limit. To insert the exact number of entries
#                   defined by totalEntryCount, the following must hold true:
#
#                      totalEntryCount = totalInvocationCount * batchSize
#
#                 - For get, totalEntryCount defines the range in selecting
#                   keys randomly. This value is always greater than or equal
#                   to key number.
#
#                       totalEntryCount >= key-number
#
#                 *Used By: get, getall, putall
#                 Default: 10000
#
#                 * Note that totalEntryCount is not used by publishall since unlike IMap, ICache
#                   and ReplicatedMap, ITopic (and IQueue) cannot update data. It can only append
#                   data and therefore the entry count cannot be fixed.
#
# key.prefix      Key names begin with this value. This parameter is optional and used by IMap, ICache,
#                 and ReplicatedMap.
#
#                 Used By: set, get, getall, put, putall
#                 Default: k
#
# key.startNum    Key start number. Each key name stars with the prefix defined by
#                 the key.prefix property followed by a number that is increased
#                 incrementally starting from this value. For example, 
#                 key.prefix=a and key.startNum=10 produces the first key name, "a10". This parameter is
#                 used by IMap, ICache, and ReplicatedMap.
#
#                 Used By: set, get, getall, put, putall
#                 Default: 1
#
# factory.class                Factory class that creates custom data objects. This class must implement 
#                              org.hazelcast.addon.test.perf.data.DataObjectFactory or extend
#                              org.hazelcast.demo.nw.impl.AbstractDataObjectFactory.
#
# factory.key.length           The fixed length of key value. If -1 or 0, then the key value is not formatted
#                              to a fixed length.
#                              Default: -1
#
# factory.key.isLeadingZeros  If true, zeroes are prepended to key values to create a fixed length. This
#                             property has no effect if factory.key.length is <= 0.
#                             Default: false
#
# factory.key.isRandom        If true, then the specified er.maxKeys value is used as the upper bound
#                             to generate a random number in the the range of [1, maxKeys]. If false,
#                             then the specified maxKeys value is used.
#                             Default: true
#
# factory.er.maxKeys          The maxKeys value is sets the upper bound of the ER key value.
#                             Default: 1
#
# factory.er.operation        ER operation. The specified operation is recursively executed.
# -------------------------------------------------------------------------

# set1
set1.map=nw/customers
set1.testCase=set
set1.key.startNum=0
set1.key.prefix=000000-
set1.factory.class=org.hazelcast.demo.nw.impl.CustomerFactoryImpl
# If isRandom is true then key.length and key.isLeadingZeros have no effect
set1.factory.key.isRandom=false
# key.length is ignored if isLeadingZeros is false
# If key.length is <= 0 then it defaults to the the key number length
# and key.isLeadingZeros has no effect.
set1.factory.key.length=11
set1.factory.key.isLeadingZeros=true

# ER - set2, i.e., Order objects as child objects to Customer
set1.factory.er.operation=set2
# If true, then the specified maxKeys value is used as the upper bound
# to generate a random number in the the range of [1, maxKeys].
# If false, then the specified maxKeys value is used.
set1.factory.er.isRandom=true
set1.factory.er.maxKeys=5

# set2
set2.map=nw/orders
set2.ref=set1
set2.factory.class=org.hazelcast.demo.nw.impl.OrderFactoryImpl
# If isRandom is true then key.length and key.isLeadingZeros have no effect
set2.factory.key.isRandom=false
# key.length is ignored if isLeadingZeros is false
# If key.length is <= 0 then it defaults to the the key number length
# and key.isLeadingZeros has no effect.
set2.factory.key.length=11
set2.factory.key.isLeadingZeros=true

# ----------------
# Map
# ----------------

# putall1
putall1.map=map1
putall1.testCase=putall
putall1.totalEntryCount=10000
putall1.payloadSize=512
putall1.batchSize=100
putall1.key.prefix=a
putall1.key.startNum=1

# putall2
putall2.ref=putall1
putall2.map=map2
putall2.payloadSize=1024
putall2.key.prefix=b

# put1
put1.map=map1
put1.testCase=put
put1.payloadSize=512
put1.key.prefix=a
put1.key.startNum=1

# put2
put2.ref=put1
put2.map=map2
put2.payloadSize=1024
put2.key.prefix=b

# get1
get1.ref=put1
get1.testCase=get

# get2
get2.ref=put2
get2.testCase=get


# ----------------
# Replicated Map
# ----------------

# rputall1
rputall1.rmap=rmap1
rputall1.testCase=putall
rputall1.totalEntryCount=10000
rputall1.payloadSize=512
rputall1.batchSize=100
rputall1.key.prefix=a
rputall1.key.startNum=1

# rputall2
rputall2.ref=rputall1
rputall2.rmap=rmap2
rputall2.payloadSize=1024
rputall2.key.prefix=b
rputall2.key.startNum=1

# put1
rput1.rmap=rmap1
rput1.testCase=put
rput1.payloadSize=512
rput1.key.prefix=a
rput1.key.startNum=1

# put2
rput2.ref=rput1
rput2.rmap=rmap2
rput2.payloadSize=1024
rput2.key.prefix=b

# rget1
rget1.ref=rput1
rget1.testCase=get

# rget2
rget2.ref=rput2
rget2.testCase=get

# ----------------
# Topic
# ----------------

# publish1
publish1.topic=topic1
publish1.testCase=publish
publish1.payloadSize=1024

# publishall1
publishall1.topic=topic2
publishall1.testCase=publishall
publishall1.payloadSize=1024
publishall1.batchSize=100

# ----------------
# Reliable Topic
# ----------------

# rpublish1
rpublish1.rtopic=rtopic1
rpublish1.testCase=publish
rpublish1.payloadSize=1024

# rpublishall1
rpublishall1.rtopic=rtopic2
rpublishall1.testCase=publishall
rpublishall1.payloadSize=1024
rpublishall1.batchSize=100

# ----------------
# Queue
# ----------------

# offer1
offer1.queue=queue1
offer1.testCase=offer
offer1.payloadSize=1024

# peek1
peek1.queue=queue1
peek1.testCase=peek

# take1
take1.queue=queue1
take1.testCase=take

# poll1
poll1.queue=queue1
poll1.testCase=poll

# ----------------
# Map Query
# ----------------

# predicate1
predicate1.map=nw/customers
predicate1.testCase=predicate
predicate1.predicate=country='Argentina'

# sql1
sql1.testCase=sql
sql1.sql=select * from "nw/customers" where country='Argentina'

# predicate2
predicate2.map=nw/orders
predicate2.testCase=predicate
predicate2.predicate=freight>20

# sql2
sql2.testCase=sql
sql2.sql=select * from "nw/orders" where freight>20

# predicate3
predicate3.map=nw/orders
predicate3.testCase=predicate
predicate3.predicate.class=org.hazelcast.demo.nw.impl.OrdersPredicateImpl

# sql3
sql3.testCase=sql
sql3.sql.class=org.hazelcast.demo.nw.impl.OrdersSqlImpl
sql3.sql.arg="nw/orders"

# ----------------
# Sleep
# ----------------

# sleep 1 msec
sleep1.sleep=1
# sleep 2 msec
sleep2.sleep=2
# sleep 5 msec
sleep5.sleep=5
# sleep 10 msec
sleep10.sleep=10
# sleep 100 msec
sleep100.sleep=100
# sleep 200 msec
sleep200.sleep=200


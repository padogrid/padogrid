#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-cluster -simulate -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Start Hazelcast Management Center in the specified cluster

SYNOPSIS
   $EXECUTABLE [-cluster cluster_name] [-?]

DESCRIPTION
   Starts Hazelcast Management Center.

OPTIONS
   -cluster cluster_name
             Cluster name.
   -simulate
             If specified then it only displays the Management Center information
             and does not run the Management Center.

EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
DEFAULT
   $EXECUTABLE -cluster $CLUSTER

EOF
fi
cat <<EOF
SEE ALSO
EOF
   printSeeAlsoList "*mc*" $EXECUTABLE
   exit
fi


# Source in Hazelcast specific env
if [ -f $PADOGRID_WORKSPACES_HOME/.hazelcastenv.sh ]; then
   . $PADOGRID_WORKSPACES_HOME/.hazelcastenv.sh
fi
#
# Set -simulate if specified
if [ "$SIMULATE" == "true" ]; then
   SIMULATE_OPT="-simulate"
else
   SIMULATE_OPT=""
fi

#
# VM cluster
#
THIS_HOST_NAME=`hostname`
if [ "$REMOTE_SPECIFIED" == "false" ]; then
   VM_ENABLED=`getClusterProperty "vm.enabled" "false"`
   if [ "$VM_ENABLED" == "true" ] && [ "$THIS_HOST_NAME" != "$DEFAULT_MC_HOST" ]; then
      VM_HOST=`getClusterProperty "mc.host" $DEFAULT_MC_HOST`
      if [ "$VM_HOST" == "" ]; then
         echo "----------------------------------------------------------------"
         echo "WORKSPACE: $PADOGRID_WORKSPACE"
         echo "    ERROR: VM Management Center host undefined. Set 'mc.hosts' in the following cluster.properties file."  
         echo "           $ETC_DIR/cluster.properties"
         echo "           Command aborted."
         echo "----------------------------------------------------------------"
         exit 1
      fi

      # If pod cluster, then source in the pod env vars to set the VM specific variables
      OS_ENV=`getOsEnv`
      if [ "$OS_ENV" == "gh" ] && [ "$POD" != "local" ]; then
         if [ -f "$PODS_DIR/$POD/.nodeenv.sh" ]; then
            . "$PODS_DIR/$POD/.nodeenv.sh"
         fi
      fi

      DEFAULT_USER=$(whoami)
      VM_USER=`getClusterProperty "vm.user" "$DEFAULT_USER"`
      VM_KEY=`getClusterProperty "vm.privateKeyFile"`
      if [ "$VM_KEY" == "" ]; then
         VM_KEY="$VM_PRIVATE_KEY_FILE"
      fi
      if [ "$VM_KEY" != "" ]; then
         VM_KEY="-i $VM_KEY"
      fi
      # For Vagrant VMs, run local if '.local' is suffix
      if [ "$VM_HOST" != "${THIS_HOST_NAME}.local" ] ;  then
         if [ "$(isVmPrivateHostReachable "$VM_USER" "$VM_KEY")" == "true" ]; then
            # If private hosts are reachable then execute from here.
            ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$COMMAND_PREFIX $VM_PADOGRID_HOME/hazelcast/bin_sh/start_mc $SIMULATE_OPT -remote $VM_HOST -workspace $VM_PADOGRID_WORKSPACE -cluster $CLUSTER $@"
         else
            # If private hosts are not reachable then use a public host as a proxy to execute this command.
            #RWE_NAME=$(basename $PADOGRID_WORKSPACES_HOME)
            #WORKSPACE=$(basename $PADOGRID_WORKSPACE)
            RWE_NAME=$(basename $VM_PADOGRID_WORKSPACES_HOME)
            WORKSPACE=$(basename $VM_PADOGRID_WORKSPACE)

            VM_PUBLIC_HOSTS=`getClusterProperty "vm.public.hosts"`
            # Replace , with space
            __VM_HOSTS=$(echo "$VM_PUBLIC_HOSTS" | sed "s/,/ /g")
            for VM_HOST in $__VM_HOSTS; do
               ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "switch_rwe $RWE_NAME/$WORKSPACE && $COMMAND_PREFIX $VM_PADOGRID_HOME/$PRODUCT/bin_sh/$EXECUTABLE -cluster $CLUSTER $@"
               break;
            done
         fi
         exit
      fi
   fi
fi

# Make sure Management Center is installed
if [ "$CLUSTER_TYPE" == "jet" ]; then
   MC_HOME="$JET_MC_HOME"
   MC_ENV_NAME="JET_MC_HOME"
else
   MC_HOME="$HAZELCAST_MC_HOME"
   MC_ENV_NAME="HAZELCAST_MC_HOME"
fi
if [ ! -d "$MC_HOME" ]; then
   echo >&2 "----------------------------------------------------------------"
   echo >&2 "WORKSPACE: $PADOGRID_WORKSPACE"
   echo >&2 "    ERROR: The following Management Center home directory does not exist."
   echo >&2 "              [$MC_HOME]"
   echo >&2 "           Please install Management Center. For a local cluster, use"
   echo >&2 "           'update_product', for a VM cluster, use 'vm_install' to set"
   echo >&2 "           HAZELCAST_MC_HOME in the following workspace setenv.sh file."
   echo -e >&2 "              ${CHighlight}$PADOGRID_WORKSPACE/setenv.sh${CNone}"
   echo >&2 "           Command aborted."
   echo >&2 "----------------------------------------------------------------"
   exit 1
fi

# Determine the node host name for URL
POD=`getClusterProperty "pod.name" "local"`
NODE_NAME_PREFIX=`getPodProperty "node.name.prefix" $NODE_NAME_PREFIX`
if [ "$POD" == "local" ]; then
   NODE=`hostname`
else
   NODE="`hostname`.local"
fi

if [ "$CLUSTER_TYPE" == "jet" ]; then
   # Jet MC
   if [ -z $CLASSPATH ]; then
      CLASSPATH="$BASE_DIR/lib/*:$BASE_DIR/plugins/*"
   else
      CLASSPATH="$CLASSPATH:$BASE_DIR/lib/*:$BASE_DIR/plugins/*"
   fi
   
   # Jet MC requires hazelcast-client.xml to provide the Jet cluster information
   # Determine the member addresses and feed them to the Jet MC via system properties.
   # Member port number
   MEMBER_PROPERTIES=""
   MEMBER_START_PORT=`getClusterProperty "tcp.startPort" $DEFAULT_MEMBER_START_PORT`
   MC_HOST=`getClusterProperty "mc.host" $DEFAULT_MC_HOST`
   MC_HTTP_PORT=`getClusterProperty "mc.http.port" $DEFAULT_MC_HTTP_PORT`
   MC_HTTPS_PORT=`getClusterProperty "mc.https.port" $DEFAULT_MC_HTTPS_PORT`
   MC_HTTPS_ENABLED=`getClusterProperty "mc.https.enabled" "false"`
   let MEMBER_END_PORT=MEMBER_START_PORT+MAX_MEMBER_COUNT-1
   MEMBER_TCP_LIST=""
   declare -a MEMBER_ADDRESSES
   let __INDEX=0
   VM_ENABLED=`getClusterProperty "vm.enabled" "false"`
   if [ "$VM_SPECIFIED" == "true" ]; then
      #VM_HOSTS=`getClusterProperty "vm.hosts"
      if [ "$VM_HOSTS" == "" ]; then
         echo >&2 "----------------------------------------------------------------"
         echo >&2 "WORKSPACE: $PADOGRID_WORKSPACE"
         echo >&2 "    ERROR: VM hosts undefined. Set 'vm.hosts' in the following cluster.properties file."  
         echo >&2 "              $ETC_DIR/cluster.properties"
         echo >&2 "           Command aborted."
         echo >&2 "----------------------------------------------------------------"
         exit 1
      fi
      # Replace , with space
      __VM_HOSTS=$(echo "$VM_HOSTS" | sed "s/,/ /g")
      for VM_HOST in $__VM_HOSTS; do
         MEMBER_ADDRESSES[__INDEX]="$VM_HOST:$MEMBER_START_PORT"
         let __INDEX=__INDEX+1
      done
   elif [ "$POD" == "local" ]; then
      HOST_NAME=`hostname`
      for i in $(seq $MEMBER_START_PORT $MEMBER_END_PORT); do
         MEMBER_ADDRESSES[__INDEX]="$HOST_NAME:$i"
         let __INDEX=__INDEX+1
      done
   else
      MEMBER_PREFIX=`getMemberPrefix`
      MEMBER_COUNT=`getMemberCount`
      NODE_COUNT=`getPodProperty "node.count" "$MEMBER_COUNT"`
      for i in $(seq 1 $MEMBER_COUNT); do
         __MEMBER_NUM=`getMemberNumWithLeadingZero $i`
         NODE_LOCAL="${NODE_NAME_PREFIX}-${__MEMBER_NUM}.local"
         NODE_ADDR="$NODE_LOCAL:$MEMBER_START_PORT"
         MEMBER_ADDRESSES[__INDEX]="$NODE_ADDR"
         let __INDEX=__INDEX+1
      done
   fi
   
   #Set the first two (2) addresses for now
   #for i in ${MEMBER_ADDRESSES[@]}; do
   MEMBER_PROPERTIES=""
   __INDEX=1
   for i in $(seq 0 1); do
      if [ "$MEMBER_PROPERTIES" == "" ]; then
         MEMBER_PROPERTIES="-Dpadogrid.jet.member.address.${__INDEX}=${MEMBER_ADDRESSES[$i]}"
      else
         MEMBER_PROPERTIES="$MEMBER_PROPERTIES -Dpadogrid.jet.member.address.${__INDEX}=${MEMBER_ADDRESSES[$i]}"
      fi
      let __INDEX=__INDEX+1
   done
   MEMBER_PROPERTIES="-Dpadogrid.group=$CLUSTER $MEMBER_PROPERTIES"
   if [ "$MC_JAVA_OPTS" == "" ]; then
      MC_JAVA_OPTS="$MEMBER_PROPERTIES"
   else
      MC_JAVA_OPTS="$MC_JAVA_OPTS $MEMBER_PROPERTIES"
   fi

else
   # MC_VERSION: Determine the Hazelcast management center version
   if [ $HAZELCAST_MAJOR_VERSION_NUMBER -ge 4 ]; then
      WAR_FILE_PREFIX="hazelcast-management-center-"
   else
      WAR_FILE_PREFIX="hazelcast-mancenter-"
   fi
   LIB_EXTENSION=""
   pushd $MC_HOME/ > /dev/null 2>&1 
   for file in ${WAR_FILE_PREFIX}*; do
      file=${file#*$WAR_FILE_PREFIX}
      if [[ $file == *.jar ]]; then
         MC_VERSION=${file%.jar}
         LIB_EXTENSION=".jar"
      else
         LIB_EXTENSION=".war"
         MC_VERSION=${file%.war}
      fi
   done
         popd > /dev/null 2>&1 
   if [ -z $CLASSPATH ]; then
      CLASSPATH="$MC_HOME/${WAR_FILE_PREFIX}${MC_VERSION}${LIB_EXTENSION}:$BASE_DIR/lib/*:$BASE_DIR/plugins/*"
   else
      CLASSPATH="$MC_HOME/${WAR_FILE_PREFIX}${MC_VERSION}${LIB_EXTENSION}:$CLASSPATH:$BASE_DIR/lib/*:$BASE_DIR/plugins/*"
   fi
fi

MC_HTTP_PORT=`getClusterProperty "mc.http.port" $DEFAULT_MC_HTTP_PORT`
MC_HTTPS_PORT=`getClusterProperty "mc.https.port" $DEFAULT_MC_HTTPS_PORT`
MC_HTTPS_ENABLED=`getClusterProperty "mc.https.enabled" "false"`
MC_JMX_PORT=`getClusterProperty "mc.jmx.port" $DEFAULT_MC_JMX_PORT`
MC_JMX_RMI_PORT=`getClusterProperty "mc.jmx.rmi.port" $DEFAULT_MC_JMX_RMI_PORT`
if [ "$MC_HTTPS_ENABLED" == "true" ]; then
   MC_NAME=${CLUSTER}-mc-${MC_HTTPS_PORT}
else
   MC_NAME=${CLUSTER}-mc-${MC_HTTP_PORT}
fi
WORKING_DIR=$RUN_DIR/$MC_NAME
export LOG_FILE=$LOG_DIR/${MC_NAME}.log

if [ ! -d "$WORKING_DIR" ]; then
   mkdir -p "$WORKING_DIR"
fi

# If the management center is already running, then exit.
if [ "$SIMULATE" == "false" ]; then
   PID=`getMcPid $MC_NAME $WORKSPACE $RWE`
   if [ -n "${PID}" ]; then
      echo "----------------------------------------------------------------"
      echo "WORKSPACE: $PADOGRID_WORKSPACE"
      echo "  Cluster: $CLUSTER"
      echo "   Status: This Management Center for this cluster is already running PID=[$PID]. Command aborted."
      echo "----------------------------------------------------------------"
      exit 1
   fi
fi

if [[ ${OS_NAME} == CYGWIN* ]]; then
   export LOG_FILE="$(cygpath -wp "$LOG_FILE")"
   CLASSPATH="$(cygpath -wp "$CLASSPATH")"
   WORKING_DIR="$(cygpath -wp "$WORKING_DIR")"
   JET_MC_APPLICATION_PROPERTIES_FILE="$(cygpath -wp "$JET_MC_APPLICATION_PROPERTIES_FILE")"
   CLIENT_CONFIG_FILE="$(cygpath -wp "$CLIENT_CONFIG_FILE")"
fi

JAVA_OPTS="-Dpadogrid.hazelcast.mc.name=$MC_NAME -Dpadogrid.workspace=$WORKSPACE -Dpadogrid.rwe=$RWE -Dhazelcast.mc.jmx.enabled=true -Dhazelcast.mc.jmx.port=$MC_JMX_PORT -Dhazelcast.mc.jmx.rmi.port=$MC_JMX_RMI_PORT -Dcom.sun.management.jmxremote.ssl=false -Dhazelcast.mc.allowMultipleLogin=true"

if [ "$MC_LICENSE_KEY" != "" ]; then
   JAVA_OPTS="$JAVA_OPTS -Dhazelcast.mc.license=$MC_LICENSE_KEY"
elif [ "$IMDG_LICENSE_KEY" != "" ]; then
   JAVA_OPTS="$JAVA_OPTS -Dhazelcast.mc.license=$IMDG_LICENSE_KEY"
fi

# Hazelcast Management Center bug introduced in 4.x:
# A workaround to the following file corruption error when running in a non-local pod:
#  "Could not initialize metrics storage: Failed to open metrics store run/pi-mc-8080/metrics/registry
#   because it is corrupted. Please remove this file and restart the application"
# If non-local then take the default working directory (~/hazelcast-mc)
if [ "$POD" == "local" ]; then
   JAVA_OPTS="$JAVA_OPTS -Dhazelcast.mc.home=$WORKING_DIR"
fi

JAVA_OPTS="$JAVA_OPTS $MC_JAVA_OPTS" 

#JAVA_OPTS="$JAVA_OPTS -Djet.licenseKey=$JET_LICENSE_KEY" 
if [ "$CLUSTER_TYPE" == "jet" ]; then
   # 2021 MC: IMDG and Jet merged 
   JAVA_OPTS="$JAVA_OPTS -Dhazelcast.mc.http.port=$MC_HTTP_PORT"

   ARGS="--port=$MC_HTTP_PORT --application-config=$JET_MC_APPLICATION_PROPERTIES_FILE --client-config=$CLIENT_CONFIG_FILE"
   if [ "$JET_LICENSE_KEY" != "" ]; then
      ARGS="$ARGS -l $JET_LICENSE_KEY" 
   fi

   # Drop padogrid specific args
   for i in "$@"; do
      case "$i" in
      -remote)
      ;;
      -workspace)
      ;;
      -all)
      ;;
      *)
      if [ "$__PREV" != "-workspace" ]; then
         ARGS="$ARGS $i"
      fi
      ;;
      esac
      __PREV="$i"
   done
   if [ "$SIMULATE" != "true" ]; then
      "$JAVA" $JAVA_OPTS -jar "$MC_HOME"/$JET_MC_JAR $ARGS > $LOG_FILE 2>&1 &
   fi
else
   if [ "$MC_HTTPS_ENABLED" == "true" ]; then
       MC_HTTP_PORT=$MC_HTTPS_PORT
   fi
   if [ $HAZELCAST_MAJOR_VERSION_NUMBER -ge 5 ] && [ $HAZELCAST_MC_MAJOR_VERSION_NUMBER -ge 5 ] && [ $HAZELCAST_MC_MINOR_VERSION_NUMBER -ge 2 ]; then
      JAVA_OPTS="$JAVA_OPTS -Dhazelcast.mc.http.port=$MC_HTTP_PORT -Dhazelcast.mc.contextPath=/hazelcast-mancenter"
      if [ "$SIMULATE" != "true" ]; then
         "$JAVA" -server -Dloader.path="${CLASSPATH}" ${JAVA_OPTS} -cp "$HAZELCAST_MC_JAR" org.springframework.boot.loader.PropertiesLauncher > $LOG_FILE 2>&1 &
      fi
   elif [ $HAZELCAST_MAJOR_VERSION_NUMBER -ge 4 ]; then
      JAVA_OPTS="$JAVA_OPTS -Dhazelcast.mc.http.port=$MC_HTTP_PORT -Dhazelcast.mc.contextPath=hazelcast-mancenter"
      if [ "$SIMULATE" != "true" ]; then
         "$JAVA" $JAVA_OPTS -cp $CLASSPATH com.hazelcast.webmonitor.Launcher > $LOG_FILE 2>&1 &
      fi
   else
      ARGS="$MC_HTTP_PORT $MC_HTTP_PORT hazelcast-mancenter"
      if [ "$SIMULATE" != "true" ]; then
         "$JAVA" $JAVA_OPTS -cp $CLASSPATH Launcher $ARGS > $LOG_FILE 2>&1 &
      fi
   fi
fi
if [ "$SIMULATE" == "true" ]; then
   PID="Simulated"
else
   PID=$!
fi

echo "----------------------------------------------------------------"
echo "        WORKSPACE: $PADOGRID_WORKSPACE"
echo "             Name: $MC_NAME"
echo "          Cluster: $CLUSTER"
echo "Management Center: hazelcast-mancenter"
if [ "$CLUSTER_TYPE" == "jet" ]; then
echo "              URL: http://${NODE}:${MC_HTTP_PORT}"
else
if [ "$MC_HTTPS_ENABLED" == "false" ]; then
echo "              URL: http://${NODE}:${MC_HTTP_PORT}/hazelcast-mancenter"
else
echo "              URL: https://${NODE}:${MC_HTTPS_PORT}/hazelcast-mancenter"
fi
fi
echo "              PID: $PID"
echo "      WORKING_DIR: $WORKING_DIR"
if [ "$MC_HTTPS_ENABLED" == "false" ]; then
echo "        HTTP_PORT: $MC_HTTP_PORT"
else
echo "       HTTPS_PORT: $MC_HTTPS_PORT"
fi
echo "         JMX_PORT: $MC_JMX_PORT"
echo "          LOG_DIR: $LOG_DIR"
echo "         LOG_FILE: $LOG_FILE"
echo "             JAVA: $JAVA"
echo "        JAVA_OPTS: $JAVA_OPTS"
echo "        CLASSPATH: $CLASSPATH"
echo "        Arguments: $ARGS"
echo "----------------------------------------------------------------"

if [ "$SIMULATE" == "true" ]; then
   echo ""
   echo "JAVA_OPTS"
   echo "---------"
   printJavaOpts "$JAVA_OPTS"
   echo ""
   echo "CLASSPATH"
   echo "---------"
   printClassPath "$CLASSPATH"
   echo ""
   echo "Environment Variable(s)"
   echo "-----------------------"
   echo "LOG_FILE=$LOG_FILE"
   echo ""
fi

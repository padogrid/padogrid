#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-cluster -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Stop Hazelcast Management Center in the specified cluster

SYNOPSIS
   $EXECUTABLE [-cluster cluster_name] [-?]

DESCRIPTION
   Stops Hazelcast Management Center

OPTIONS
   -cluster cluster_name
             Cluster name.

EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
DEFAULT
   $EXECUTABLE -cluster $CLUSTER

EOF
fi
cat <<EOF
SEE ALSO
EOF
   printSeeAlsoList "*mc*" $EXECUTABLE
   exit
fi

#
# VM cluster
#
THIS_HOST_NAME=`hostname`
MC_HOST=`getClusterProperty "mc.host" $DEFAULT_MC_HOST`
if [ "$REMOTE_SPECIFIED" == "false" ]; then
   VM_ENABLED=`getClusterProperty "vm.enabled" "false"`
   if [ "$VM_ENABLED" == "true" ] && [ "$THIS_HOST_NAME" != "$DEFAULT_MC_HOST" ]; then

      # If pod cluster, then source in the pod env vars to set the VM specific variables
      OS_ENV=`getOsEnv`
      if [ "$OS_ENV" == "gh" ] && [ "$POD" != "local" ]; then
         if [ -f "$PODS_DIR/$POD/.nodeenv.sh" ]; then
            . "$PODS_DIR/$POD/.nodeenv.sh"
         fi
      fi

      DEFAULT_USER=$(whoami)
      VM_USER=`getClusterProperty "vm.user" "$DEFAULT_USER"`
      VM_KEY=`getClusterProperty "vm.privateKeyFile"`
      if [ "$VM_KEY" != "" ]; then
         VM_KEY="-i $VM_KEY"
      elif [ "$VM_PRIVATE_KEY_FILE" != "" ]; then
         VM_KEY="-i $VM_PRIVATE_KEY_FILE"
      fi
      # For Vagrant VMs, run local if '.local' is suffix
      if [ "$MC_HOST" != "${THIS_HOST_NAME}.local" ] ;  then
         ssh -q -n $VM_KEY $VM_USER@$MC_HOST -o stricthostkeychecking=no "$COMMAND_PREFIX $VM_PADOGRID_HOME/$PRODUCT/bin_sh/stop_mc -remote $MC_HOST -workspace $VM_PADOGRID_WORKSPACE -cluster $CLUSTER $@"
         exit
      fi
   fi
fi

# Get workspace name
WORKSPACE=${PADOGRID_WORKSPACE##*/}

# Determine the node host name for URL
POD=`getClusterProperty "pod.name" "local"`
NODE_NAME_PREFIX=`getClusterProperty "node.name.prefix" $NODE_NAME_PREFIX`
if [ "$POD" == "local" ]; then
   NODE=`hostname`
else
   NODE="`hostname`.local"
fi

MC_HTTP_PORT=`getClusterProperty "mc.http.port" $DEFAULT_MC_HTTP_PORT`
MC_HTTPS_PORT=`getClusterProperty "mc.https.port" $DEFAULT_MC_HTTPS_PORT`
MC_HTTPS_ENABLED=`getClusterProperty "mc.https.enabled" "false"`
MC_JMX_PORT=`getClusterProperty "mc.jmx.port" $DEFAULT_MC_JMX_PORT`
if [ "$MC_HTTPS_ENABLED" == "true" ]; then
   MC_NAME=${CLUSTER}-mc-${MC_HTTPS_PORT}
else
   MC_NAME=${CLUSTER}-mc-${MC_HTTP_PORT}
fi
WORKING_DIR=$RUN_DIR/$MC_NAME
LOG_FILE=$LOG_DIR/${MC_NAME}.log
PID=`getMcPid $MC_NAME $WORKSPACE`

if [ -z $PID ]; then
   echo "Management Center not running [$CLUSTER]. Command aborted."
   exit
else
   if [[ ${OS_NAME} == CYGWIN* ]]; then
      taskkill /f /pid "${PID}"
   else
      kill -9 "${PID}"
   fi

   echo "----------------------------------------------------------------"
   echo "        WORKSPACE $PADOGRID_WORKSPACE"
   echo "             Name: $MC_NAME"
   echo "          Cluster: $CLUSTER"
   echo "Management Center: hazelcast-mancenter"
   if [ "$MC_HTTPS_ENABLED" == "true" ]; then
   echo "              URL: https://${NODE}:${MC_HTTPS_PORT}/hazelcast-mancenter"
   else
   echo "              URL: http://${NODE}:${MC_HTTP_PORT}/hazelcast-mancenter"
   fi
   echo "              PID: $PID"
   if [ "$MC_HTTPS_ENABLED" == "true" ]; then
   echo "       HTTPS_PORT: $MC_HTTPS_PORT"
   else
   echo "        HTTP_PORT: $MC_HTTP_PORT"
   fi
   echo "         JMX_PORT: $MC_JMX_PORT"
   echo "          LOG_DIR: $LOG_DIR"
   echo "         LOG_FILE: $LOG_FILE"
   echo "      WORKING_DIR: ${WORKING_DIR}"
   echo "           Status: Stopped"
   echo "----------------------------------------------------------------"
fi

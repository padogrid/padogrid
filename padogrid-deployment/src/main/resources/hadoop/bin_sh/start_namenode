#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020,2021 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================
  
SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-cluster -num -simulate -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Start a Hadoop namenode in the specified cluster

SYNOPSIS
   $EXECUTABLE [-cluster cluster_name] [-num namenode_number] [-simulate] [-?]

DESCRIPTION
   Starts a Hadoop namenode in the specified cluster.

OPTIONS
   -cluster cluster_name
             Cluster name.

   -num namenode_number
             NameNode number 1-9.

   -simulate
             If specified then it only displays the namenode information
             and does not run the namenode.

EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
DEFAULT
   $EXECUTABLE -cluster $CLUSTER -num $NAMENODE_NUM

EOF
fi
cat <<EOF
SEE ALSO
EOF
   printSeeAlsoList "*namenode*" $EXECUTABLE
   exit
fi

POD=`getClusterProperty "pod.name" "local"`

# Set -simulate if specified
if [ "$SIMULATE" == "true" ]; then
   SIMULATE_OPT="-simulate"
else
   SIMULATE_OPT=""
fi
# Set -create_script if specified
if [ "$CREATE_SCRIPT" == "true" ]; then
   CREATE_SCRIPT_OPT="-create-script"
else
   CREATE_SCRIPT_OPT=""
fi

#
# VM cluster
#
if [ "$REMOTE_SPECIFIED" == "false" ]; then
   VM_ENABLED=`getClusterProperty "vm.enabled" "false"`
   if [ "$VM_ENABLED" == "true" ]; then
      VM_NAMENODE_HOSTS=`getClusterProperty "vm.namenode.hosts"`
      if [ "$VM_NAMENODE_HOSTS" == "" ]; then
         echo >&2 "----------------------------------------------------------------"
         echo >&2 "WORKSPACE: $PADOGRID_WORKSPACE"
         echo >&2 "    ERROR: VM namenode hosts undefined. Set 'vm.namenode.hosts' in the following cluster.properties file."  
         echo >&2 "           $ETC_DIR/cluster.properties"
         echo >&2 "           Command aborted."
         echo >&2 "----------------------------------------------------------------"
         exit 1
      fi

      # If pod cluster, then source in the pod env vars to set the VM specific variables
      OS_ENV=`getOsEnv`
      if [ "$OS_ENV" == "gh" ] && [ "$POD" != "local" ]; then
         if [ -f "$PODS_DIR/$POD/.nodeenv.sh" ]; then
            . "$PODS_DIR/$POD/.nodeenv.sh"
         fi
      fi

      # Replace , with space
      __VM_HOSTS=$(echo "$VM_NAMENODE_HOSTS" | sed "s/,/ /g")
      DEFAULT_USER=$(whoami)
      VM_USER=`getClusterProperty "vm.user" "$DEFAULT_USER"`
      VM_KEY=`getClusterProperty "vm.privateKeyFile"`
      if [ "$VM_KEY" == "" ]; then
         VM_KEY="$VM_PRIVATE_KEY_FILE"
      fi
      if [ "$VM_KEY" != "" ]; then 
         VM_KEY="-i $VM_KEY"
      fi

      # Determine the host
      __NAMENODE_NUMBER=0
      __FOUND="false"
      
      for VM_HOST in $__VM_HOSTS; do
         let __NAMENODE_NUMBER=__NAMENODE_NUMBER+1
         if [ $__NAMENODE_NUMBER -eq $NAMENODE_NUM_NO_LEADING_ZERO ]; then
            __FOUND="true"
            if [ "$POD" == "local" ]; then
               NUM=1
            else
               let NUM=__NAMENODE_NUMBER
            fi
            ssh -n $VM_KEY $VM_USER@$VM_HOST -o LogLevel=error -o stricthostkeychecking=no -o connecttimeout=$SSH_CONNECT_TIMEOUT "$COMMAND_PREFIX $VM_PADOGRID_HOME/$PRODUCT/bin_sh/start_namenode $SIMULATE_OPT $CREATE_SCRIPT_OPT -cluster $CLUSTER -remote $VM_HOST -workspace $VM_PADOGRID_WORKSPACE -num $NUM"
            break;
         fi
      done
      FIRST_NUMBER=1
      LAST_NUMBER=$__NAMENODE_NUMBER
      if [ "$__FOUND" == "false" ]; then
         echo >&2 "ERROR: Invalid namenode number. Valid range is [$FIRST_NUMBER, $LAST_NUMBER]. Command aborted." 
      fi
      exit
   fi
fi

#
# Local cluster
#

# For pod clusters. If non-pod, the following variables are ignored.
PRIMARY_NODE_NAME=`getPodProperty "node.name.primary" "$DEFAULT_NODE_NAME_PRIMARY"`
NODE_NAME_PREFIX=$PRIMARY_NODE_NAME
NODE_LOCAL="${PRIMARY_NODE_NAME}.local"

NAMENODE_NUMBER=$NAMENODE_NUM_NO_LEADING_ZERO
NAMENODE=`getNameNodeName $NAMENODE_NUMBER`
NAMENODE_DIR=$RUN_DIR/$NAMENODE

if  [ ! -d $CLUSTER_DIR ]; then
   echo "----------------------------------------------------------------"
   echo "WORKSPACE: $PADOGRID_WORKSPACE"
   echo "  Cluster: $CLUSTER"
   echo "   Status: This cluster has not been created. Please run the create_cluster command to"
   echo "           to create the cluster before running this command."
   echo "----------------------------------------------------------------"
   exit 1
fi

if [ ! -d $NAMENODE_DIR ]; then
   if [ "$REMOTE_SPECIFIED" == "true" ]; then
      $SCRIPT_DIR/add_namenode -cluster $CLUSTER -workspace $PADOGRID_WORKSPACE
   else
      echo "----------------------------------------------------------------"
      echo "WORKSPACE: $PADOGRID_WORKSPACE"
      echo "  Cluster: $CLUSTER"
      echo " NameNode: $NAMENODE"
      echo "   Status: This namenode has not been configured. Please run the add_namenode command to configure"
      echo "           new namenodes."
      echo "----------------------------------------------------------------"
      exit 1
   fi
fi

# If the namenode is already running, then exit.
if [ "$SIMULATE" == "false" ] && [ "$CREATE_SCRIPT" == "false" ]; then
   PID=`getNameNodePid $NAMENODE $WORKSPACE $RWE`
   if [ -n "${PID}" ]; then
      echo "----------------------------------------------------------------"
      echo "WORKSPACE: $PADOGRID_WORKSPACE"
      echo "  Cluster: $CLUSTER"
      echo " NameNode: $NAMENODE"
      echo "   Status: This namenode is already running [NameNode: $NAMENODE, PID=$PID]. Command aborted."
      echo "----------------------------------------------------------------"
      exit 1
   fi
fi

# NameNode port number
NAMENODE_PROPERTIES=""
NAMENODE_START_PORT=`getClusterProperty "namenode.tcp.startPort" $DEFAULT_NAMENODE_START_PORT`
let NAMENODE_PORT=NAMENODE_START_PORT+NAMENODE_NUMBER-1
let NAMENODE_END_PORT=NAMENODE_START_PORT+MAX_NAMENODE_COUNT-1
NAMENODE_TCP_LIST=""
NAMENODE_HTTP_START_PORT=`getClusterProperty "namenode.http.startPort" $DEFAULT_NAMENODE_HTTP_START_PORT`
VM_ENABLED=`getClusterProperty "vm.enabled" "false"`

if [ "$VM_ENABLED" == "true" ]; then
   HOST_NAME=$REMOTE
   BIND_ADDRESS=`getClusterProperty "vm.${HOST_NAME}.bindAddress"`
   HOSTNAME_FOR_CLIENTS=`getClusterProperty "vm.${HOST_NAME}.hostnameForClients"`
   VM_NAMENODE_HOSTS=`getClusterProperty "vm.namenode.hosts"`
   if [ "$VM_NAMENODE_HOSTS" == "" ]; then
      echo >&2 "----------------------------------------------------------------"
      echo >&2 "WORKSPACE: $PADOGRID_WORKSPACE"
      echo >&2 "    ERROR: VM hosts undefined. Set 'vm.namenode.hosts' in the following cluster.properties file."  
      echo >&2 "           $ETC_DIR/cluster.properties"
      echo >&2 "           Command aborted."
      echo >&2 "----------------------------------------------------------------"
      exit 1
   fi
   # Replace , with space
   __VM_NAMENODE_HOSTS=$(echo "$VM_NAMENODE_HOSTS" | sed "s/,/ /g")
   for VM_HOST in $__VM_NAMENODE_HOSTS; do
      if [ "$NAMENODE_TCP_LIST" == "" ]; then
         NAMENODE_TCP_LIST="$VM_HOST[$NAMENODE_START_PORT]"
      else
         NAMENODE_TCP_LIST="$NAMENODE_TCP_LIST,$VM_HOST[$NAMENODE_START_PORT]"
      fi
   done
elif [ "$POD" == "local" ]; then
   HOST_NAME=`hostname`
   BIND_ADDRESS=`getClusterProperty "cluster.bindAddress" "$HOST_NAME"`
   NAMENODE_PREFIX=`getNameNodePrefix`
   pushd $RUN_DIR > /dev/null 2>&1
   for i in ${NAMENODE_PREFIX}*; do
      if [ -d "$i" ]; then
         __NAMENODE=$i
         __NAMENODE_NUM=${__NAMENODE##$NAMENODE_PREFIX}
         __NAMENODE_NUM=$(trimLeadingZero $__NAMENODE_NUM)
         let __NAMENODE_PORT=NAMENODE_START_PORT+__NAMENODE_NUM-1
         if [ "$NAMENODE_TCP_LIST" == "" ]; then
            NAMENODE_TCP_LIST="$BIND_ADDRESS[$__NAMENODE_PORT]"
         else
            NAMENODE_TCP_LIST="$NAMENODE_TCP_LIST,$BIND_ADDRESS[$__NAMENODE_PORT]"
         fi
      fi
   done
   popd > /dev/null 2>&1
else
   PRIMARY_NODE_NAME=`getPodProperty "node.name.primary" "$DEFAULT_NODE_NAME_PRIMARY"`
   NODE_NAME_PREFIX=$PRIMARY_NODE_NAME
   NAMENODE_COUNT=`getNameNodeCount`
   NODE_LOCAL="${PRIMARY_NODE_NAME}.local"
   NAMENODE_TCP_LIST="$NODE_LOCAL[$NAMENODE_START_PORT]"
   BIND_ADDRESS=$NODE_LOCAL
   HOSTNAME_FOR_CLIENTS=$NODE_LOCAL
fi

# Debug parameters.
DEBUG_ENABLED=`getClusterProperty "namenode.debug.enabled" $DEFAULT_NAMENODE_DEBUG_ENABLED`
DEBUG=""
if [ "$DEBUG_ENABLED" == "true" ]; then
   DEBUG_START_PORT=`getClusterProperty "namenode.debug.startPort" $DEFAULT_NAMENODE_DEBUG_START_PORT`
   if [ "$POD" == "local" ]; then
      let DEBUG_PORT=DEBUG_NAMENODE_START_PORT+NAMENODE_NUMBER-1
   else
      DEBUG_PORT=$DEBUG_START_PORT
   fi
   if [[ $JAVA_VERSION == 1.8* ]]; then
      DEBUG="-Xdebug -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=$DEBUG_PORT"
   else
      DEBUG="-Xdebug -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:$DEBUG_PORT"
   fi
else
   DEBUG_PORT="Disabled"
   DEBUG=""
fi

# JMX parameters
NAMENODE_JMX_ENABLED=`getClusterProperty "namenode.jmx.enabled" $DEFAULT_NAMENODE_JMX_ENABLED`
JMX_PARAMETERS=""
if [ "$NAMENODE_JMX_ENABLED" == "true" ]; then
   NAMENODE_JMX_START_PORT=`getClusterProperty "namenode.jmx.startPort" $DEFAULT_NAMENODE_JMX_START_PORT`
   if [ "$POD" == "local" ]; then
      let JMX_PORT=NAMENODE_JMX_START_PORT+NAMENODE_NUMBER-1
   else
      JMX_PORT=$NAMENODE_JMX_START_PORT
   fi
   JMX_PARAMETERS="-Dcom.sun.management.jmxremote.port=${JMX_PORT} -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false"
else
   JMX_PORT="Disabled"
   JMX_PARAMETERS=""
fi

# Set LOG_FILE in the log directory.
if [[ ${OS_NAME} == CYGWIN* ]]; then
   __LOG_DIR="$(cygpath -wp "$LOG_DIR")"
else
   __LOG_DIR=$LOG_DIR
fi
export LOG_FILE_NAME=${NAMENODE}.log
export LOG_FILE=$LOG_DIR/${LOG_FILE_NAME}
if [[ ${OS_NAME} == CYGWIN* ]]; then
   export LOG_FILE="$(cygpath -wp "$LOG_FILE")"
fi

# Set heap to the "heap.min/heap.max" values found in the $ETC_DIR/cluster.properties file.
MIN_HEAP_SIZE=`getClusterProperty "namenode.heap.min" $DEFAULT_NAMENODE_MIN_HEAP_SIZE`
MAX_HEAP_SIZE=`getClusterProperty "namenode.heap.max" $DEFAULT_NAMENODE_MAX_HEAP_SIZE`

# Set JAVA_OPTS.
#JAVA_OPTS="$JAVA_OPTS $NAMENODE_PROPERTIES $LOG_PROPERTIES $JMX_PARAMETERS"
JAVA_OPTS="$JAVA_OPTS $NAMENODE_PROPERTIES $JMX_PARAMETERS"
#JAVA_OPTS="$JAVA_OPTS -Xms${MIN_HEAP_SIZE} -Xmx${MAX_HEAP_SIZE}"
JAVA_OPTS="$JAVA_OPTS ${DEBUG}"

# Set Pulse
JMX_MANAGER_HTTP_START_PORT=`getClusterProperty "namenode.jmx.manager.http.startPort" $DEFAULT_JMX_MANAGER_HTTP_START_PORT`
JMX_MANAGER_START_PORT=`getClusterProperty "namenode.jmx.manager.startPort" $DEFAULT_JMX_MANAGER_START_PORT`
if [ "$POD" == "local" ]; then
   let JMX_MANAGER_HTTP_PORT=JMX_MANAGER_HTTP_START_PORT+NAMENODE_NUMBER-1
   let JMX_MANAGER_PORT=JMX_MANAGER_START_PORT+NAMENODE_NUMBER-1
else
   JMX_MANAGER_HTTP_PORT=$JMX_MANAGER_HTTP_START_PORT
   JMX_MANAGER_PORT=$JMX_MANAGER_START_PORT
fi

# Set PROMETHEUS paths
NAMENODE_PROMETHEUS_ENABLED=`getClusterProperty "namenode.prometheus.enabled" $DEFAULT_NAMENODE_PROMETHEUS_ENABLED`
if [ "$NAMENODE_PROMETHEUS_ENABLED" == "true" ]; then
   NAMENODE_PROMETHEUS_START_PORT=`getClusterProperty "namenode.prometheus.startPort" $DEFAULT_NAMENODE_PROMETHEUS_START_PORT`
   if [ "$POD" == "local" ]; then
      let PROMETHEUS_PORT=NAMENODE_PROMETHEUS_START_PORT+NAMENODE_NUMBER-1
   else
      PROMETHEUS_PORT=$NAMENODE_PROMETHEUS_START_PORT
   fi
   PROMETHEUS_CONFIG_FILE_PATH="$ETC_DIR/prometheus.yml"
   PROMETHEUS_JAR_PATH=`find $BASE_DIR/lib -name jmx_prometheus_javaagent*.jar`

   if [[ ${OS_NAME} == CYGWIN* ]]; then
      PROMETHEUS_JAR_PATH="$(cygpath -wp "$PROMETHEUS_JAR_PATH")"
      PROMETHEUS_CONFIG_FILE_PATH="$(cygpath -wp "$PROMETHEUS_CONFIG_FILE_PATH")"
      # Remove the disk drive letter from the path. A workaround to a bug in the prometheus exporter.
      PROMETHEUS_CONFIG_FILE_PATH=${PROMETHEUS_CONFIG_FILE_PATH:2}
   fi
   JAVA_OPTS="$JAVA_OPTS -javaagent:$PROMETHEUS_JAR_PATH=$PROMETHEUS_PORT:$PROMETHEUS_CONFIG_FILE_PATH"
else
   PROMETHEUS_PORT="Disabled"
fi

# Set GC log
GC_LOG_ENABLED=`getClusterProperty "gc.log.enabled" $DEFAULT_GC_LOG_ENABLED`
GC_LOG_FILE_ENABLED=`getClusterProperty "gc.log.file.enabled" $DEFAULT_GC_LOG_FILE_ENABLED`
if [ $GC_LOG_ENABLED == "true" ]; then
   if [ $GC_LOG_FILE_ENABLED == "true" ]; then
      GC_LOG_FILE=$LOG_DIR/${NAMENODE}-gc.log
      if [[ ${OS_NAME} == CYGWIN* ]]; then
         GC_LOG_FILE="$(cygpath -wp "$GC_LOG_FILE")"
      fi
      if [[ $JAVA_VERSION == 1.8* ]]; then
         JAVA_OPTS="$JAVA_OPTS -Xloggc:$GC_LOG_FILE -XX:+PrintGCDetails -XX:+PrintGCDateStamps"
      else
         JAVA_OPTS="$JAVA_OPTS -Xlog:gc=info:file=$GC_LOG_FILE:time,uptime,pid:filecount=5,filesize=4096"
      fi
   fi
fi

# Start the namenode
if [[ ${OS_NAME} == CYGWIN* ]]; then
   CLASSPATH="$(cygpath -wp "$CLASSPATH")"
   NAMENODE_DIR="$(cygpath -wp "$NAMENODE_DIR")"
fi
export LOG_DIR=$__LOG_DIR

JAVA_OPTS="-Dpado.vm.id=${NAMENODE} \
   -Dpadogrid.workspace=$WORKSPACE \
   -Dpadogrid.rwe=$RWE \
   $JAVA_OPTS"

if [ "$BIND_ADDRESS" != "" ]; then
   _OPTS="$HADOOP_OPTS --bind-address=$BIND_ADDRESS"
fi
if [ "$SIMULATE" == "true" ]; then
   PID="Simulated"
elif [ "$CREATE_SCRIPT" == "true" ]; then
   PID="Script"
else
   # LOG_FILE might not exist if a VM bundle has been deployed.
   if  [ ! -d "$LOG_DIR" ]; then
      mkdir -p $LOG_DIR
   fi
   if [ "$RUN_SCRIPT" != "" ]; then
      $RUN_SCRIPT >> $LOG_FILE &
   else

# Use the first member's config dir
MEMBER_NAME=`getMemberName 1`
HADOOP_CONF_DIR=$ETC_DIR/$MEMBER_NAME
HADOOP_PID_DIR=$RUN_DIR/pid/$NAMENODE
HADOOP_LOG_DIR=$LOG_DIR/$NAMENODE
HADOOP_HEAPSIZE_MIN=$(getClusterProperty "nodenmae.heap.min" $DEFAULT_NODENAME_MIN_HEAP_SIZE)
HADOOP_HEAPSIZE_MAX=$(getClusterProperty "nodenmae.heap.max" $DEFAULT_NODENAME_MAX_HEAP_SIZE)
HDFS_NAMENODE_OPTS=$JAVA_OPTS

NAMENODE_DIR=$RUN_DIR/hdfs/namenode
NAMENODE_URL=file://$NAMENODE_DIR

      # Create and format the namenode dir if it does not exist
      if [ ! -d $NAMENODE_DIR ]; then
         mkdir -p "$NAMENODE_DIR"
         HADOOP_CONF_DIR=$HADOOP_CONF_DIR \
         HDFS_NAMENODE_OPTS=$HDFS_NAMENODE_OPTS \
         HADOOP_PID_DIR=$HADOOP_PID_DIR \
         HADOOP_LOG_DIR=$HADOOP_LOG_DIR \
         hdfs namenode -format
      fi

      echo "Starting namenode..."
      HADOOP_CONF_DIR=$HADOOP_CONF_DIR \
      HADOOP_PID_DIR=$HADOOP_PID_DIR \
      HADOOP_LOG_DIR=$HADOOP_LOG_DIR \
      HADOOP_HEAPSIZE_MAX=$HADOOP_HEAPSIZE_MAX \
      HADOOP_HEAPSIZE_MAX=$HADOOP_HEAPSIZE_MAX \
      HDFS_NAMENODE_OPTS=$HDFS_NAMENODE_OPTS \
      hdfs --daemon start namenode

      PID=`getNameNodePid $NAMENODE $WORKSPACE $RWE`

   fi
fi

# NAMENODE_URL
NAMENODE_URL="hdfs://$BIND_ADDRESS:$NAMENODE_PORT"
HTTP_URL="http://$BIND_ADDRESS:$HTTP_PORT"

# JMX_URL
JMX_URL="service:jmx:rmi:///jndi/rmi://padomac.local:$JMX_PORT/jmxrmi"

echo "----------------------------------------------------------------"
echo "       WORKSPACE: $PADOGRID_WORKSPACE"
echo "         Cluster: $CLUSTER"
if [ "$VM_SPECIFIED" == "true" ] || [ "$VM_ENABLED" == "true" ]; then
echo "      Deployment: VM"
else
echo "             Pod: $POD"
fi
echo "          NameNode: $NAMENODE"
echo "               PID: $PID"
echo "      CLUSTER_TYPE: $CLUSTER_TYPE"
echo "       WORKING_DIR: $NAMENODE_DIR"
echo "        CONFIG_DIR: $ETC_DIR"
echo "           LOG_DIR: $LOG_DIR"
echo "          LOG_FILE: $LOG_FILE"
echo "     NAMENODE_PORT: $NAMENODE_PORT"
echo "        DEBUG_PORT: $DEBUG_PORT"
echo "   PROMETHEUS_PORT: $PROMETHEUS_PORT"
echo "          JMX_PORT: $JMX_PORT"
echo "      NAMENODE_URL: $NAMENODE_URL"
echo "          HTTP_URL: $HTTP_URL"
if [ "$NAMENODE_JMX_ENABLED" == "true" ]; then
echo "           JMX_URL: $JMX_URL"
fi
echo "              JAVA: $JAVA"
if [ "$RUN_SCRIPT" != "" ]; then
echo -e "        RUN_SCRIPT: ${CLightGreen}$RUN_SCRIPT${CNone}"
fi
echo "   HADOOP_CONF_DIR: $HADOOP_CONF_DIR"
echo "    HADOOP_PID_DIR: $HADOOP_PID_DIR"
echo "    HADOOP_LOG_DIR: $HADOOP_LOG_DIR"
echo "HDFS_NAMENODE_OPTS: $HDFS_NAMENODE_OPTS"
echo "       CLASSPATH: $CLASSPATH"
echo "----------------------------------------------------------------"

if [ "$SIMULATE" == "true" ]; then
   echo ""
   echo "_OPTS"
   echo "---------"
   printJavaOpts "$_OPTS"
   echo ""
   echo "JAVA_OPTS"
   echo "---------"
   printJavaOpts "$JAVA_OPTS"
   echo ""
   echo "CLASSPATH"
   echo "---------"
   printClassPath "$CLASSPATH"
   echo ""
   echo "Environment Variables"
   echo "---------------------"
   echo "LOG_FILE=$LOG_FILE"
   echo ""
fi

